{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"1CtOy1KwjeVWMK4I"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"1Sf1L5UGM4yIaCgH"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"3LAm0qatNVzkylZh"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"4mnDMe6oXAGdjhrr"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"7xC2NykYKYYbWnaE"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"CjTuVQFP7BLbsWlO"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"FM2PcfomxW03q4ae"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"GRoHhTUN88kW57Dd"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"Im8i8rVgpyPUnJVD"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"MLRu1HSFB2mvgG9O"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n","type":"md","_id":"MeCBLsPWmrtu8PWr"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"NwJoG3Lq2q9Hn4kP"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"PzEoyc9uhgtiCPWo"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"QGqYQ3fmmWarO2nA"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"Qs5AAZlemqtf11kC"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n","type":"md","_id":"QvU1Iv7GldErPmYP"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"SQ0VHzUn5G46YIB2"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"T8RwzlrPKGZ0ZzE8"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"Thc0HxaM9lX1lq5a"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"V7Bb8Dnn2sEalno4"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"W0roZVoKfaNNuDYs"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"b9MYcZDWESqbEMbp"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"bQ2FddAAACmlo4kD"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"c2S5TVNEKWysToGt"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"dHCXnLiau1nrL5WX"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"nuJPyP55TGIvXAys"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"nz3zs0TSisAGUJRk"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"r4A2zRKviXYW3ljw"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"rq7lMQ3CIkzKrOtU"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"tvOkUEBu4SpNdsov"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"vqFsDpVvTUyUYpim"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"x8x53URM7CvvQbm2"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"xoplWbPXWVye59H9"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"yryDnmkgOCaQrCK1"}
{"$$deleted":true,"_id":"1CtOy1KwjeVWMK4I"}
{"$$deleted":true,"_id":"1Sf1L5UGM4yIaCgH"}
{"$$deleted":true,"_id":"3LAm0qatNVzkylZh"}
{"$$deleted":true,"_id":"4mnDMe6oXAGdjhrr"}
{"$$deleted":true,"_id":"7xC2NykYKYYbWnaE"}
{"$$deleted":true,"_id":"CjTuVQFP7BLbsWlO"}
{"$$deleted":true,"_id":"FM2PcfomxW03q4ae"}
{"$$deleted":true,"_id":"GRoHhTUN88kW57Dd"}
{"$$deleted":true,"_id":"Im8i8rVgpyPUnJVD"}
{"$$deleted":true,"_id":"MLRu1HSFB2mvgG9O"}
{"$$deleted":true,"_id":"MeCBLsPWmrtu8PWr"}
{"$$deleted":true,"_id":"NwJoG3Lq2q9Hn4kP"}
{"$$deleted":true,"_id":"PzEoyc9uhgtiCPWo"}
{"$$deleted":true,"_id":"QGqYQ3fmmWarO2nA"}
{"$$deleted":true,"_id":"Qs5AAZlemqtf11kC"}
{"$$deleted":true,"_id":"QvU1Iv7GldErPmYP"}
{"$$deleted":true,"_id":"SQ0VHzUn5G46YIB2"}
{"$$deleted":true,"_id":"T8RwzlrPKGZ0ZzE8"}
{"$$deleted":true,"_id":"Thc0HxaM9lX1lq5a"}
{"$$deleted":true,"_id":"V7Bb8Dnn2sEalno4"}
{"$$deleted":true,"_id":"W0roZVoKfaNNuDYs"}
{"$$deleted":true,"_id":"b9MYcZDWESqbEMbp"}
{"$$deleted":true,"_id":"bQ2FddAAACmlo4kD"}
{"$$deleted":true,"_id":"c2S5TVNEKWysToGt"}
{"$$deleted":true,"_id":"dHCXnLiau1nrL5WX"}
{"$$deleted":true,"_id":"nuJPyP55TGIvXAys"}
{"$$deleted":true,"_id":"nz3zs0TSisAGUJRk"}
{"$$deleted":true,"_id":"r4A2zRKviXYW3ljw"}
{"$$deleted":true,"_id":"rq7lMQ3CIkzKrOtU"}
{"$$deleted":true,"_id":"tvOkUEBu4SpNdsov"}
{"$$deleted":true,"_id":"vqFsDpVvTUyUYpim"}
{"$$deleted":true,"_id":"x8x53URM7CvvQbm2"}
{"$$deleted":true,"_id":"xoplWbPXWVye59H9"}
{"$$deleted":true,"_id":"yryDnmkgOCaQrCK1"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"B2z2yW5cLKgrCDNV"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"WrdUew4nFhycuiKM"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"fn2pM92QABvCVsYC"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"p5p9bMblwGnWk1XE"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"njCMYw7wT6lIn11c"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"b3ynI0RAbqtY0OUo"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"a5BNB3DpqH3RL1fv"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"aD5Va64nEHbG1OUD"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"JBLO4R872DE4iIy2"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"6tQiErNpm90sR5lF"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"7BRzMAvrKVeZC7p5"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"74kPJreOjaJVoCO3"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"ldd9Osxu9FDgJFaA"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"ryokkZ9IyavOM4ez"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"lVZqSoLdCvGQySww"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n","type":"md","_id":"KMlILMEZhv1sAdQx"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"PzlY5nontUwVeCCQ"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"wQiFyL0iVX5f1bYK"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"PEXaFaQuL9nceAwk"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"lcIK3ZWJgOtmlExp"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"wpGPwsABQxPwGf34"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n","type":"md","_id":"VT5AXOltpm35AvFU"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"YoUhVH1MkOsvsZ3I"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"TgwyN7xWnoLAnGN5"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"hdB9w1UOIT7dkM9J"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"Jg69wFIsjeMNlDVF"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"T7Y1bwZm8IlgFsR8"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"zLGPxFL5fkyQKDIQ"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"dZwzFNsfofahOsFB"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"2vvkAVqEWnrbazqx"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"kkxw6W9S5Mk1e11E"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"BJMbCTclN7vOCmK5"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"tnytBdiwHsyZaiqU"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"6sLtlqkfs80Ui4UC"}
{"$$deleted":true,"_id":"2vvkAVqEWnrbazqx"}
{"$$deleted":true,"_id":"6sLtlqkfs80Ui4UC"}
{"$$deleted":true,"_id":"6tQiErNpm90sR5lF"}
{"$$deleted":true,"_id":"74kPJreOjaJVoCO3"}
{"$$deleted":true,"_id":"7BRzMAvrKVeZC7p5"}
{"$$deleted":true,"_id":"B2z2yW5cLKgrCDNV"}
{"$$deleted":true,"_id":"BJMbCTclN7vOCmK5"}
{"$$deleted":true,"_id":"JBLO4R872DE4iIy2"}
{"$$deleted":true,"_id":"Jg69wFIsjeMNlDVF"}
{"$$deleted":true,"_id":"KMlILMEZhv1sAdQx"}
{"$$deleted":true,"_id":"PEXaFaQuL9nceAwk"}
{"$$deleted":true,"_id":"PzlY5nontUwVeCCQ"}
{"$$deleted":true,"_id":"T7Y1bwZm8IlgFsR8"}
{"$$deleted":true,"_id":"TgwyN7xWnoLAnGN5"}
{"$$deleted":true,"_id":"VT5AXOltpm35AvFU"}
{"$$deleted":true,"_id":"WrdUew4nFhycuiKM"}
{"$$deleted":true,"_id":"YoUhVH1MkOsvsZ3I"}
{"$$deleted":true,"_id":"a5BNB3DpqH3RL1fv"}
{"$$deleted":true,"_id":"aD5Va64nEHbG1OUD"}
{"$$deleted":true,"_id":"b3ynI0RAbqtY0OUo"}
{"$$deleted":true,"_id":"dZwzFNsfofahOsFB"}
{"$$deleted":true,"_id":"fn2pM92QABvCVsYC"}
{"$$deleted":true,"_id":"hdB9w1UOIT7dkM9J"}
{"$$deleted":true,"_id":"kkxw6W9S5Mk1e11E"}
{"$$deleted":true,"_id":"lVZqSoLdCvGQySww"}
{"$$deleted":true,"_id":"lcIK3ZWJgOtmlExp"}
{"$$deleted":true,"_id":"ldd9Osxu9FDgJFaA"}
{"$$deleted":true,"_id":"njCMYw7wT6lIn11c"}
{"$$deleted":true,"_id":"p5p9bMblwGnWk1XE"}
{"$$deleted":true,"_id":"ryokkZ9IyavOM4ez"}
{"$$deleted":true,"_id":"tnytBdiwHsyZaiqU"}
{"$$deleted":true,"_id":"wQiFyL0iVX5f1bYK"}
{"$$deleted":true,"_id":"wpGPwsABQxPwGf34"}
{"$$deleted":true,"_id":"zLGPxFL5fkyQKDIQ"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"if54IBxTTgeEwIWO"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"rVtqCrWT17A4n7g9"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"VnWMp9VJFi3zSxoK"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"yBQv6yozG0O8ZvWC"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"jPYC81kiqEBgOr4R"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"NUt2QvsdaZna4rCv"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"Uq3vpv2hU2BtU1O4"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"dtVyJKkCFz3yN0FR"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"g0mTZ4UPw2NLCmnW"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"hniE3GlWPH7gqrXw"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"qs02edopLZHMI6Ia"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"jaMqkHYFHlz5ojj7"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"6wAIN0BYcVr0rrg9"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"KUUf2e1o1aaQhMPt"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"sNUo04S4fXHkyUMd"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\n## Display Components are specifically for displaying data.\n","type":"md","_id":"NQm6Xh38phSBYjCL"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"H67eSYRHASlxPTiC"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"kOWSbCaFdC4B2RJ6"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"tZcK0WZRwDFdR7pN"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"KBt5Tn8IzDL6JF3p"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"EjijF4cgQiwA0Cb5"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n","type":"md","_id":"LDfKQQJ7mpCVqXix"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"isUZhZ5ywoyU9UrT"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"f00c8jzGwInpqaIG"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"ZTKMAPnOHrLIPTso"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"WoAcxNxqoIr4Nc5O"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"wTC5NdXPAsWcvk6e"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"gvhVzQetPmWFzpjM"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"N1tT4V9X8LCzCetM"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"nHjIg0ascJsS689T"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"Ha7XziLDENMsHYpK"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"O5V2EGOLgEZn6fzH"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"Jm78evEbGRAHV1bD"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"khvtXDwSfFE8wqXo"}
{"$$deleted":true,"_id":"6wAIN0BYcVr0rrg9"}
{"$$deleted":true,"_id":"EjijF4cgQiwA0Cb5"}
{"$$deleted":true,"_id":"H67eSYRHASlxPTiC"}
{"$$deleted":true,"_id":"Ha7XziLDENMsHYpK"}
{"$$deleted":true,"_id":"Jm78evEbGRAHV1bD"}
{"$$deleted":true,"_id":"KBt5Tn8IzDL6JF3p"}
{"$$deleted":true,"_id":"KUUf2e1o1aaQhMPt"}
{"$$deleted":true,"_id":"LDfKQQJ7mpCVqXix"}
{"$$deleted":true,"_id":"N1tT4V9X8LCzCetM"}
{"$$deleted":true,"_id":"NQm6Xh38phSBYjCL"}
{"$$deleted":true,"_id":"NUt2QvsdaZna4rCv"}
{"$$deleted":true,"_id":"O5V2EGOLgEZn6fzH"}
{"$$deleted":true,"_id":"Uq3vpv2hU2BtU1O4"}
{"$$deleted":true,"_id":"VnWMp9VJFi3zSxoK"}
{"$$deleted":true,"_id":"WoAcxNxqoIr4Nc5O"}
{"$$deleted":true,"_id":"ZTKMAPnOHrLIPTso"}
{"$$deleted":true,"_id":"dtVyJKkCFz3yN0FR"}
{"$$deleted":true,"_id":"f00c8jzGwInpqaIG"}
{"$$deleted":true,"_id":"g0mTZ4UPw2NLCmnW"}
{"$$deleted":true,"_id":"gvhVzQetPmWFzpjM"}
{"$$deleted":true,"_id":"hniE3GlWPH7gqrXw"}
{"$$deleted":true,"_id":"if54IBxTTgeEwIWO"}
{"$$deleted":true,"_id":"isUZhZ5ywoyU9UrT"}
{"$$deleted":true,"_id":"jPYC81kiqEBgOr4R"}
{"$$deleted":true,"_id":"jaMqkHYFHlz5ojj7"}
{"$$deleted":true,"_id":"kOWSbCaFdC4B2RJ6"}
{"$$deleted":true,"_id":"khvtXDwSfFE8wqXo"}
{"$$deleted":true,"_id":"nHjIg0ascJsS689T"}
{"$$deleted":true,"_id":"qs02edopLZHMI6Ia"}
{"$$deleted":true,"_id":"rVtqCrWT17A4n7g9"}
{"$$deleted":true,"_id":"sNUo04S4fXHkyUMd"}
{"$$deleted":true,"_id":"tZcK0WZRwDFdR7pN"}
{"$$deleted":true,"_id":"wTC5NdXPAsWcvk6e"}
{"$$deleted":true,"_id":"yBQv6yozG0O8ZvWC"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"RzzlJeuIIWwu4V3j"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"yJy6Yu9PR0K8q9PH"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"8EvErGgdxizoKKxk"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"4MXFFcEmcPgxWD3K"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"f8WP6PQQS2NiSIRV"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"AT8usGuTRdedMSut"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"1qUPaBwcbEaQo1Lx"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"6Kx746TFg3CENoVC"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"dLXuFHajU7WJQSq0"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"131Bkc6j6B6mdOmy"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"xRwJUtDcY2Yg7Amt"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"7tUPPEklGclgHg3i"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"OdVyDvUMDA0wnITB"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"l4jHlrkt0V6wxjUu"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"i32Hqswi4vNdC0ZT"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\n## Display Components are specifically for displaying data.\n","type":"md","_id":"GAxxvLrSngQqHQ18"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"urXDMsqvdQVccaoN"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"xeP94EwSj3AKCweI"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"eCFUZf7u06jkrepS"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"I2hsqDEy7KA8dtX5"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"mWZdThoriJTiVmkB"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n","type":"md","_id":"8rg2egQo6QKbiN93"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"5owhqByhA6kB0TpN"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"A4IrHnJwNWEx5zIM"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"YjmB5qayhkxNsoUi"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"YJKSS5FbPPrvO1Pn"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"HHWe2qejFkRNwgJl"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"686PDjMX3cahFWNO"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"TkO29NdkqK0K1b1G"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"FwoB7os6yiWmaQRM"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"P6RIfjTecrtZoZhF"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"kqLpCUnDmUWK6E29"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"qIqMN35MhdBQAAOU"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"CPxOtgpoty35QsQy"}
{"$$deleted":true,"_id":"131Bkc6j6B6mdOmy"}
{"$$deleted":true,"_id":"1qUPaBwcbEaQo1Lx"}
{"$$deleted":true,"_id":"4MXFFcEmcPgxWD3K"}
{"$$deleted":true,"_id":"5owhqByhA6kB0TpN"}
{"$$deleted":true,"_id":"686PDjMX3cahFWNO"}
{"$$deleted":true,"_id":"6Kx746TFg3CENoVC"}
{"$$deleted":true,"_id":"7tUPPEklGclgHg3i"}
{"$$deleted":true,"_id":"8EvErGgdxizoKKxk"}
{"$$deleted":true,"_id":"8rg2egQo6QKbiN93"}
{"$$deleted":true,"_id":"A4IrHnJwNWEx5zIM"}
{"$$deleted":true,"_id":"AT8usGuTRdedMSut"}
{"$$deleted":true,"_id":"CPxOtgpoty35QsQy"}
{"$$deleted":true,"_id":"FwoB7os6yiWmaQRM"}
{"$$deleted":true,"_id":"GAxxvLrSngQqHQ18"}
{"$$deleted":true,"_id":"HHWe2qejFkRNwgJl"}
{"$$deleted":true,"_id":"I2hsqDEy7KA8dtX5"}
{"$$deleted":true,"_id":"OdVyDvUMDA0wnITB"}
{"$$deleted":true,"_id":"P6RIfjTecrtZoZhF"}
{"$$deleted":true,"_id":"RzzlJeuIIWwu4V3j"}
{"$$deleted":true,"_id":"TkO29NdkqK0K1b1G"}
{"$$deleted":true,"_id":"YJKSS5FbPPrvO1Pn"}
{"$$deleted":true,"_id":"YjmB5qayhkxNsoUi"}
{"$$deleted":true,"_id":"dLXuFHajU7WJQSq0"}
{"$$deleted":true,"_id":"eCFUZf7u06jkrepS"}
{"$$deleted":true,"_id":"f8WP6PQQS2NiSIRV"}
{"$$deleted":true,"_id":"i32Hqswi4vNdC0ZT"}
{"$$deleted":true,"_id":"kqLpCUnDmUWK6E29"}
{"$$deleted":true,"_id":"l4jHlrkt0V6wxjUu"}
{"$$deleted":true,"_id":"mWZdThoriJTiVmkB"}
{"$$deleted":true,"_id":"qIqMN35MhdBQAAOU"}
{"$$deleted":true,"_id":"urXDMsqvdQVccaoN"}
{"$$deleted":true,"_id":"xRwJUtDcY2Yg7Amt"}
{"$$deleted":true,"_id":"xeP94EwSj3AKCweI"}
{"$$deleted":true,"_id":"yJy6Yu9PR0K8q9PH"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"7WAUXxtAIGtiWC7g"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"QkFXEAI3ErlxLfHR"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"eaF0BQzeNPxob8tl"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"0ad7oQOtvhcIEr37"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"RONPcOgk1dXIWAcY"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"NyxsfvWhr009PfEP"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"vmDnBILT2Ud8b8kV"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"AjtCWJE52szddNLx"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"vBQYH9p2a4Qqu3Hx"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"xpTCdLtOzOQADg2P"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"uGJmcehtbhFYuwgC"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"p4HlEJm5B3VqmzL4"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"cqy14mpzMXmEh0xW"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"v2w7pq2bSKpu5AY7"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"TdiC9ZXktSg4nD2M"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nAt their most basic, they can show a list of arbitrary or \n","type":"md","_id":"KcWqibSMV4zjSFfy"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"3Ivr0bYIDnAofPUr"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"LEGYEK9gn1BZ1MPn"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"pk76rjV2IVJSTmej"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"WO5zB8lzTOSRwnep"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"79lZjzeqxmYaV4MD"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n","type":"md","_id":"dy6TlATE5baKPUm7"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"9PzCKUcAQEgsKnNV"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"blOYCYsDEWmfCAr4"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"buPVeLampQ8dDtwM"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"qO6mZ5V3BWoMLK2B"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"djyKwQxeS4e3d1OV"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"lAV54fgEZCgYDU7x"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"1UQni1x4sfKMHNQE"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"yQhecC142Sg5zWvu"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"X7UuMpXOZsSLwfAy"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"mJGtuApy7rCJwxMD"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"i4J8gM2ibIjHdQ10"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"tervvrZT9YBOlcAe"}
{"$$deleted":true,"_id":"0ad7oQOtvhcIEr37"}
{"$$deleted":true,"_id":"1UQni1x4sfKMHNQE"}
{"$$deleted":true,"_id":"3Ivr0bYIDnAofPUr"}
{"$$deleted":true,"_id":"79lZjzeqxmYaV4MD"}
{"$$deleted":true,"_id":"7WAUXxtAIGtiWC7g"}
{"$$deleted":true,"_id":"9PzCKUcAQEgsKnNV"}
{"$$deleted":true,"_id":"AjtCWJE52szddNLx"}
{"$$deleted":true,"_id":"KcWqibSMV4zjSFfy"}
{"$$deleted":true,"_id":"LEGYEK9gn1BZ1MPn"}
{"$$deleted":true,"_id":"NyxsfvWhr009PfEP"}
{"$$deleted":true,"_id":"QkFXEAI3ErlxLfHR"}
{"$$deleted":true,"_id":"RONPcOgk1dXIWAcY"}
{"$$deleted":true,"_id":"TdiC9ZXktSg4nD2M"}
{"$$deleted":true,"_id":"WO5zB8lzTOSRwnep"}
{"$$deleted":true,"_id":"X7UuMpXOZsSLwfAy"}
{"$$deleted":true,"_id":"blOYCYsDEWmfCAr4"}
{"$$deleted":true,"_id":"buPVeLampQ8dDtwM"}
{"$$deleted":true,"_id":"cqy14mpzMXmEh0xW"}
{"$$deleted":true,"_id":"djyKwQxeS4e3d1OV"}
{"$$deleted":true,"_id":"dy6TlATE5baKPUm7"}
{"$$deleted":true,"_id":"eaF0BQzeNPxob8tl"}
{"$$deleted":true,"_id":"i4J8gM2ibIjHdQ10"}
{"$$deleted":true,"_id":"lAV54fgEZCgYDU7x"}
{"$$deleted":true,"_id":"mJGtuApy7rCJwxMD"}
{"$$deleted":true,"_id":"p4HlEJm5B3VqmzL4"}
{"$$deleted":true,"_id":"pk76rjV2IVJSTmej"}
{"$$deleted":true,"_id":"qO6mZ5V3BWoMLK2B"}
{"$$deleted":true,"_id":"tervvrZT9YBOlcAe"}
{"$$deleted":true,"_id":"uGJmcehtbhFYuwgC"}
{"$$deleted":true,"_id":"v2w7pq2bSKpu5AY7"}
{"$$deleted":true,"_id":"vBQYH9p2a4Qqu3Hx"}
{"$$deleted":true,"_id":"vmDnBILT2Ud8b8kV"}
{"$$deleted":true,"_id":"xpTCdLtOzOQADg2P"}
{"$$deleted":true,"_id":"yQhecC142Sg5zWvu"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"wWWH0lG15czNDBu2"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"vBvY4zaJSq0wzqsn"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"M6lQcJvpAGsqEO21"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"LQeGgy7fnVNrF4xg"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"Cm1NDSZTXeyPZUk4"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"FYp3kkBGCBcbqKEn"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"ZU8mT2RUHXtowfyE"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"yeUnkco9EH5W6LJe"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"UsaThKoRnEygC466"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"MyWmFFEMsvdHGhLW"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"fEcQmWIQDx984VYq"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"vwaL1op6GOBs9wzU"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"BXzZekkhr4RwHPAU"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"ylcv2v2B0uA15nWi"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"tkWO9LYwKAwaNImH"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n","type":"md","_id":"2n4PVhMvHsAGuf3I"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"VX6G1LDpdIhWkSEh"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"1ncsDehYXTmIng1h"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"0BTl53vi87TJvGxe"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"Wh47K6VD5pnt6MxO"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"Uvkx47QpjyuZRMbI"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n","type":"md","_id":"xeLJtQJV6eQ01x3R"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"4DMaUIPN2DWZxEin"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"3N7ZxXGK1NWHaejN"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"6Cim7L8MsjSPj3Vb"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"eCHCNzKqKrU9OI5T"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"UMbPi8RhYaXrYvND"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"lBhGjMugBn7YjXW2"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"ZSNHljNc1R9l6NLb"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"hg9G5ttBQCpWGb8B"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"H9OGiJqvFg0rZCs4"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"ybhT3uJ4UdBtIJbL"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"vhm3BoyvaI26BKjh"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"9VuYTgNNZOHakwr6"}
{"$$deleted":true,"_id":"0BTl53vi87TJvGxe"}
{"$$deleted":true,"_id":"1ncsDehYXTmIng1h"}
{"$$deleted":true,"_id":"2n4PVhMvHsAGuf3I"}
{"$$deleted":true,"_id":"3N7ZxXGK1NWHaejN"}
{"$$deleted":true,"_id":"4DMaUIPN2DWZxEin"}
{"$$deleted":true,"_id":"6Cim7L8MsjSPj3Vb"}
{"$$deleted":true,"_id":"9VuYTgNNZOHakwr6"}
{"$$deleted":true,"_id":"BXzZekkhr4RwHPAU"}
{"$$deleted":true,"_id":"Cm1NDSZTXeyPZUk4"}
{"$$deleted":true,"_id":"FYp3kkBGCBcbqKEn"}
{"$$deleted":true,"_id":"H9OGiJqvFg0rZCs4"}
{"$$deleted":true,"_id":"LQeGgy7fnVNrF4xg"}
{"$$deleted":true,"_id":"M6lQcJvpAGsqEO21"}
{"$$deleted":true,"_id":"MyWmFFEMsvdHGhLW"}
{"$$deleted":true,"_id":"UMbPi8RhYaXrYvND"}
{"$$deleted":true,"_id":"UsaThKoRnEygC466"}
{"$$deleted":true,"_id":"Uvkx47QpjyuZRMbI"}
{"$$deleted":true,"_id":"VX6G1LDpdIhWkSEh"}
{"$$deleted":true,"_id":"Wh47K6VD5pnt6MxO"}
{"$$deleted":true,"_id":"ZSNHljNc1R9l6NLb"}
{"$$deleted":true,"_id":"ZU8mT2RUHXtowfyE"}
{"$$deleted":true,"_id":"eCHCNzKqKrU9OI5T"}
{"$$deleted":true,"_id":"fEcQmWIQDx984VYq"}
{"$$deleted":true,"_id":"hg9G5ttBQCpWGb8B"}
{"$$deleted":true,"_id":"lBhGjMugBn7YjXW2"}
{"$$deleted":true,"_id":"tkWO9LYwKAwaNImH"}
{"$$deleted":true,"_id":"vBvY4zaJSq0wzqsn"}
{"$$deleted":true,"_id":"vhm3BoyvaI26BKjh"}
{"$$deleted":true,"_id":"vwaL1op6GOBs9wzU"}
{"$$deleted":true,"_id":"wWWH0lG15czNDBu2"}
{"$$deleted":true,"_id":"xeLJtQJV6eQ01x3R"}
{"$$deleted":true,"_id":"ybhT3uJ4UdBtIJbL"}
{"$$deleted":true,"_id":"yeUnkco9EH5W6LJe"}
{"$$deleted":true,"_id":"ylcv2v2B0uA15nWi"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"Wddb1ZtXMQTBws14"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"S9bnOr8sF1bKUtYq"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"Th0P0TxmA1ma6wMA"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"e4DxeR3XkQTt9ezm"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"2LLU0KcCle7p8JZ0"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"Rb3rqwieO9XwLX5X"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"gqhZWyHCCixDpabm"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"gdU9dAzcGqNsf0Ks"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"Lv2nZE6zOsNirKgI"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"jN9P7OlO7s6poEjW"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"iDWW0g8oB3dFJxEg"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"vUYZykFA7tC4rgfW"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"AhrDNyf30mR53fHy"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"MLUVnO9WMfO8CtAg"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"3qIbmCzVIImtF7aW"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n","type":"md","_id":"YzOlPosr46vPa6ul"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"0aQgiKHqmtGbUaap"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"ur70lRsVgLlwgzWh"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"SkVxhg72RyI2Qoic"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"a8AdG3s9csG8ijiO"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"m6ZAuT9T9XSGgvIt"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n","type":"md","_id":"wiuPCMgHc6StuCI3"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"SgRPQ82yEXXefBPI"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"ecpgb5yVq4TAM3Oz"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"ptUsOqVU9nGxibwx"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"THIAmj1v8aNoWlMD"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"wHkELcYf9hAO3kjQ"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"AqyXIIteyAERPYRZ"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"pi8nZf6g9szdMNy9"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"45OoaefUKy4SjIlu"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"sg9LAN30Ql4byq9w"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"JMGvqM5FB88RzT1b"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"11rvvMFSEFMjXgEf"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"YfDu5VRWUpXJy900"}
{"$$deleted":true,"_id":"0aQgiKHqmtGbUaap"}
{"$$deleted":true,"_id":"11rvvMFSEFMjXgEf"}
{"$$deleted":true,"_id":"2LLU0KcCle7p8JZ0"}
{"$$deleted":true,"_id":"3qIbmCzVIImtF7aW"}
{"$$deleted":true,"_id":"45OoaefUKy4SjIlu"}
{"$$deleted":true,"_id":"AhrDNyf30mR53fHy"}
{"$$deleted":true,"_id":"AqyXIIteyAERPYRZ"}
{"$$deleted":true,"_id":"JMGvqM5FB88RzT1b"}
{"$$deleted":true,"_id":"Lv2nZE6zOsNirKgI"}
{"$$deleted":true,"_id":"MLUVnO9WMfO8CtAg"}
{"$$deleted":true,"_id":"Rb3rqwieO9XwLX5X"}
{"$$deleted":true,"_id":"S9bnOr8sF1bKUtYq"}
{"$$deleted":true,"_id":"SgRPQ82yEXXefBPI"}
{"$$deleted":true,"_id":"SkVxhg72RyI2Qoic"}
{"$$deleted":true,"_id":"THIAmj1v8aNoWlMD"}
{"$$deleted":true,"_id":"Th0P0TxmA1ma6wMA"}
{"$$deleted":true,"_id":"Wddb1ZtXMQTBws14"}
{"$$deleted":true,"_id":"YfDu5VRWUpXJy900"}
{"$$deleted":true,"_id":"YzOlPosr46vPa6ul"}
{"$$deleted":true,"_id":"a8AdG3s9csG8ijiO"}
{"$$deleted":true,"_id":"e4DxeR3XkQTt9ezm"}
{"$$deleted":true,"_id":"ecpgb5yVq4TAM3Oz"}
{"$$deleted":true,"_id":"gdU9dAzcGqNsf0Ks"}
{"$$deleted":true,"_id":"gqhZWyHCCixDpabm"}
{"$$deleted":true,"_id":"iDWW0g8oB3dFJxEg"}
{"$$deleted":true,"_id":"jN9P7OlO7s6poEjW"}
{"$$deleted":true,"_id":"m6ZAuT9T9XSGgvIt"}
{"$$deleted":true,"_id":"pi8nZf6g9szdMNy9"}
{"$$deleted":true,"_id":"ptUsOqVU9nGxibwx"}
{"$$deleted":true,"_id":"sg9LAN30Ql4byq9w"}
{"$$deleted":true,"_id":"ur70lRsVgLlwgzWh"}
{"$$deleted":true,"_id":"vUYZykFA7tC4rgfW"}
{"$$deleted":true,"_id":"wHkELcYf9hAO3kjQ"}
{"$$deleted":true,"_id":"wiuPCMgHc6StuCI3"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"ljKYkdL4GeasL99X"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"bViYYeTMASlBoTq1"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"jJ0ViwEWrIgeYsjD"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"NjAleM7Ta2z8GwWE"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"V2myqbB8N0nalgmY"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"nswLUJx58KaXmOuT"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"hdQhE3S2ZGKOm8lU"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"sa0vf0IFf2YJT8tx"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"bhBCyW67V8Yn7fQV"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"ARNI7GESlG1sIRHz"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"4PSqADwb3kDDV5jy"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"HfdIPrOU3vlaLo3m"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"7gWnJCfHd5cde5As"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"KCsaf7sfvGLtw6NJ"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"JIDVlnlcawjzlj8H"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"zc4qBV2qGpHdxveE"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"XYPz0TQr0WVN4R8S"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"XWyOJcIShQLJQFUb"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"yUWT7VNbTqsYKtar"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"IWUaTy7eSet4ObpD"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"luS5q1TyG24qcWfv"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n","type":"md","_id":"Igvc9L9E0WuYAUsU"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"OxF0qU06N2IlYeOn"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"7gMEhCSKHksbTbGu"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"0SWyyFvvJtvUV677"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"UVzXls5QFQHWLU9u"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"wi00zzixAjDOvF4C"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"784NfFtsTTOsDEf6"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"X9FZuj1zXl4ueDGz"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"Q00XqqMee5qJ1eoW"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"4I2p9Z8gbZ1bla4Y"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"XNiTKPc2RJ0IGrGS"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"Y7aBP9R0ahsYr9uj"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"MBx6ZrawlZ172eNP"}
{"$$deleted":true,"_id":"0SWyyFvvJtvUV677"}
{"$$deleted":true,"_id":"4I2p9Z8gbZ1bla4Y"}
{"$$deleted":true,"_id":"4PSqADwb3kDDV5jy"}
{"$$deleted":true,"_id":"784NfFtsTTOsDEf6"}
{"$$deleted":true,"_id":"7gMEhCSKHksbTbGu"}
{"$$deleted":true,"_id":"7gWnJCfHd5cde5As"}
{"$$deleted":true,"_id":"ARNI7GESlG1sIRHz"}
{"$$deleted":true,"_id":"HfdIPrOU3vlaLo3m"}
{"$$deleted":true,"_id":"IWUaTy7eSet4ObpD"}
{"$$deleted":true,"_id":"Igvc9L9E0WuYAUsU"}
{"$$deleted":true,"_id":"JIDVlnlcawjzlj8H"}
{"$$deleted":true,"_id":"KCsaf7sfvGLtw6NJ"}
{"$$deleted":true,"_id":"MBx6ZrawlZ172eNP"}
{"$$deleted":true,"_id":"NjAleM7Ta2z8GwWE"}
{"$$deleted":true,"_id":"OxF0qU06N2IlYeOn"}
{"$$deleted":true,"_id":"Q00XqqMee5qJ1eoW"}
{"$$deleted":true,"_id":"UVzXls5QFQHWLU9u"}
{"$$deleted":true,"_id":"V2myqbB8N0nalgmY"}
{"$$deleted":true,"_id":"X9FZuj1zXl4ueDGz"}
{"$$deleted":true,"_id":"XNiTKPc2RJ0IGrGS"}
{"$$deleted":true,"_id":"XWyOJcIShQLJQFUb"}
{"$$deleted":true,"_id":"XYPz0TQr0WVN4R8S"}
{"$$deleted":true,"_id":"Y7aBP9R0ahsYr9uj"}
{"$$deleted":true,"_id":"bViYYeTMASlBoTq1"}
{"$$deleted":true,"_id":"bhBCyW67V8Yn7fQV"}
{"$$deleted":true,"_id":"hdQhE3S2ZGKOm8lU"}
{"$$deleted":true,"_id":"jJ0ViwEWrIgeYsjD"}
{"$$deleted":true,"_id":"ljKYkdL4GeasL99X"}
{"$$deleted":true,"_id":"luS5q1TyG24qcWfv"}
{"$$deleted":true,"_id":"nswLUJx58KaXmOuT"}
{"$$deleted":true,"_id":"sa0vf0IFf2YJT8tx"}
{"$$deleted":true,"_id":"wi00zzixAjDOvF4C"}
{"$$deleted":true,"_id":"yUWT7VNbTqsYKtar"}
{"$$deleted":true,"_id":"zc4qBV2qGpHdxveE"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"j0BfOyJEIMngm7Gg"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"PsuLWN3YhVyu5yyU"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"QLvl6TXSJ213cg3A"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"8QctRfEdh7vTG8Lh"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"vPvGb1ZMoXl9mhDa"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"QjjGKhLBrCdNVDtA"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"ejNGGwh9NZpwsq8q"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"UJM6ANw9wI8KJtTY"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"M9dHneNolOTFPDCP"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"AIr2DYGzVevmaCZD"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"Vui2Wa950WzsaTLA"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"6FfVasVndxyN3HA3"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"RTFbjv5pyQTxDfwB"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"NI8n1o6lldhxcqnD"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"ZivpWa6ZsU9UBeBj"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"BG4FgswxivQJ8b3X"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"55i9f4QMs3XjOfZU"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"VkEJlIluvOMHylmm"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"s8aAkS15gvQzBOyo"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"O1zYtggLpDTjAzqu"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"3B156FlzXuInh4Sh"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n","type":"md","_id":"h64HPHofarZ7QAKV"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"X0HAHo9RGWNhdzeQ"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"GazXZVdaELwLaw9r"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"nwjWIwUax8G16C7p"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"FWOT9mxT4Gy6WGoM"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"doUNzg3nxXCjKFzm"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"Quw029DZcmbn6ATE"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"zt4uXWOs3S0Ycj97"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"Yfvpb35LC5qxk3nn"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"qo1ve1pIp9lSHsB8"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"lEwomWjjWUU8GAUF"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"cNUVkFuHysKqirev"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"KPDjNnIPCK031BQ5"}
{"$$deleted":true,"_id":"3B156FlzXuInh4Sh"}
{"$$deleted":true,"_id":"55i9f4QMs3XjOfZU"}
{"$$deleted":true,"_id":"6FfVasVndxyN3HA3"}
{"$$deleted":true,"_id":"8QctRfEdh7vTG8Lh"}
{"$$deleted":true,"_id":"AIr2DYGzVevmaCZD"}
{"$$deleted":true,"_id":"BG4FgswxivQJ8b3X"}
{"$$deleted":true,"_id":"FWOT9mxT4Gy6WGoM"}
{"$$deleted":true,"_id":"GazXZVdaELwLaw9r"}
{"$$deleted":true,"_id":"KPDjNnIPCK031BQ5"}
{"$$deleted":true,"_id":"M9dHneNolOTFPDCP"}
{"$$deleted":true,"_id":"NI8n1o6lldhxcqnD"}
{"$$deleted":true,"_id":"O1zYtggLpDTjAzqu"}
{"$$deleted":true,"_id":"PsuLWN3YhVyu5yyU"}
{"$$deleted":true,"_id":"QLvl6TXSJ213cg3A"}
{"$$deleted":true,"_id":"QjjGKhLBrCdNVDtA"}
{"$$deleted":true,"_id":"Quw029DZcmbn6ATE"}
{"$$deleted":true,"_id":"RTFbjv5pyQTxDfwB"}
{"$$deleted":true,"_id":"UJM6ANw9wI8KJtTY"}
{"$$deleted":true,"_id":"VkEJlIluvOMHylmm"}
{"$$deleted":true,"_id":"Vui2Wa950WzsaTLA"}
{"$$deleted":true,"_id":"X0HAHo9RGWNhdzeQ"}
{"$$deleted":true,"_id":"Yfvpb35LC5qxk3nn"}
{"$$deleted":true,"_id":"ZivpWa6ZsU9UBeBj"}
{"$$deleted":true,"_id":"cNUVkFuHysKqirev"}
{"$$deleted":true,"_id":"doUNzg3nxXCjKFzm"}
{"$$deleted":true,"_id":"ejNGGwh9NZpwsq8q"}
{"$$deleted":true,"_id":"h64HPHofarZ7QAKV"}
{"$$deleted":true,"_id":"j0BfOyJEIMngm7Gg"}
{"$$deleted":true,"_id":"lEwomWjjWUU8GAUF"}
{"$$deleted":true,"_id":"nwjWIwUax8G16C7p"}
{"$$deleted":true,"_id":"qo1ve1pIp9lSHsB8"}
{"$$deleted":true,"_id":"s8aAkS15gvQzBOyo"}
{"$$deleted":true,"_id":"vPvGb1ZMoXl9mhDa"}
{"$$deleted":true,"_id":"zt4uXWOs3S0Ycj97"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"cq3nr7Pb0N0OXPTf"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"nSddotj9yTdytCnW"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"AIBelqWFIsvVxl2a"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"P1owpmI6wjttsLOq"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"brY5on8cvL6T1Q8W"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"zDviMTWrKGwfCMBV"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"fRmMIqQUcAlIL3cV"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"9KTdPjQAlu59LEAo"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"TPILfdysk7pHGA3j"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"amJ0mKlQsA6M744X"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"X5xckgb8xwm4fs0W"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"VDVzvLgB3XE3qTrS"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"y3IceSmGTcPmXD8Q"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"VpbW3yg59VoY4TnP"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"5PYeLFQumlBGPKlJ"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"0aFu7fsmV1GwD3wV"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"qqBRCibmQShUdcq5"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"ZEQAAkpAe3nOSJzG"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"4LhDf3khxPD5JSOO"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"V4msDeKOq2JB6y8h"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"70mjcXONZ1KhAbzd"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n","type":"md","_id":"p95A26SReHpCASLh"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"keLjIK5E3LQTRHEh"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"O3DqWetPXiSWyDZF"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"sECdcbz1pRCYJeid"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"AqjmsXDWMvTeFH4m"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"SGlOsY43euHWdvSY"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"OLD2t2c8xTFbyqzp"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"KexcYeipwKkFpnba"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"tuwoiKrCZZIKLXsK"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"KcBRCVwZN7KCRc5Q"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"9dKBO1nHJHM9UFeN"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"zEr5XM7zVqwNcu0Y"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"H9Vg3szWK4bEVfpW"}
{"$$deleted":true,"_id":"0aFu7fsmV1GwD3wV"}
{"$$deleted":true,"_id":"4LhDf3khxPD5JSOO"}
{"$$deleted":true,"_id":"5PYeLFQumlBGPKlJ"}
{"$$deleted":true,"_id":"70mjcXONZ1KhAbzd"}
{"$$deleted":true,"_id":"9KTdPjQAlu59LEAo"}
{"$$deleted":true,"_id":"9dKBO1nHJHM9UFeN"}
{"$$deleted":true,"_id":"AIBelqWFIsvVxl2a"}
{"$$deleted":true,"_id":"AqjmsXDWMvTeFH4m"}
{"$$deleted":true,"_id":"H9Vg3szWK4bEVfpW"}
{"$$deleted":true,"_id":"KcBRCVwZN7KCRc5Q"}
{"$$deleted":true,"_id":"KexcYeipwKkFpnba"}
{"$$deleted":true,"_id":"O3DqWetPXiSWyDZF"}
{"$$deleted":true,"_id":"OLD2t2c8xTFbyqzp"}
{"$$deleted":true,"_id":"P1owpmI6wjttsLOq"}
{"$$deleted":true,"_id":"SGlOsY43euHWdvSY"}
{"$$deleted":true,"_id":"TPILfdysk7pHGA3j"}
{"$$deleted":true,"_id":"V4msDeKOq2JB6y8h"}
{"$$deleted":true,"_id":"VDVzvLgB3XE3qTrS"}
{"$$deleted":true,"_id":"VpbW3yg59VoY4TnP"}
{"$$deleted":true,"_id":"X5xckgb8xwm4fs0W"}
{"$$deleted":true,"_id":"ZEQAAkpAe3nOSJzG"}
{"$$deleted":true,"_id":"amJ0mKlQsA6M744X"}
{"$$deleted":true,"_id":"brY5on8cvL6T1Q8W"}
{"$$deleted":true,"_id":"cq3nr7Pb0N0OXPTf"}
{"$$deleted":true,"_id":"fRmMIqQUcAlIL3cV"}
{"$$deleted":true,"_id":"keLjIK5E3LQTRHEh"}
{"$$deleted":true,"_id":"nSddotj9yTdytCnW"}
{"$$deleted":true,"_id":"p95A26SReHpCASLh"}
{"$$deleted":true,"_id":"qqBRCibmQShUdcq5"}
{"$$deleted":true,"_id":"sECdcbz1pRCYJeid"}
{"$$deleted":true,"_id":"tuwoiKrCZZIKLXsK"}
{"$$deleted":true,"_id":"y3IceSmGTcPmXD8Q"}
{"$$deleted":true,"_id":"zDviMTWrKGwfCMBV"}
{"$$deleted":true,"_id":"zEr5XM7zVqwNcu0Y"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"v7bcCev1J3YTk1UH"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"4nig8kS9JRxercEn"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"zMri9orROmJy6qQA"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"RBYDqar0mK3d1Gwo"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"P3Ru7eLGPdyJ2qwy"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"yf2cyWGua4jhxRWz"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"5UrvdsMjUeIPe2aB"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"vU60p0CEn0apCg3k"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"gZE4r3vK7RFMGEOB"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"lgnqRVfGseq49HXg"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"BYQRX7D3kSyeDyf9"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"ghHeUqmBMtqP7PYL"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"OKPuEa4IjsmE0yFd"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"rqkbQBj98GaGImRX"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"Exu7HGOCQmlPeBfr"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"9SudBNBsmu4EMF4X"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"5YHxwTCM37rVcWGj"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"jAwIh4MqNZnS3mOo"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"HuL5Umgy2x6kL1LG"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"dXrf8FhW2UI5NiNI"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"itokeH4DcdE93v5J"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\n\n```\n","type":"md","_id":"0Qf5TNmUKI3XVlmX"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"gNNrk7KKJf51zklo"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"1lXfrkRr7OtRD6F8"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"iOzgjJmyK2bd27mg"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"3ZKFlTSdrz0E7K7n"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"kqB2TevgyrFB5weZ"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"eGJOsLwTIGVAAHxt"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"3Qw95r9PD26NQBTU"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"eQwQ49BCE1F9lexA"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"oLz92TffB27DmJjW"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"lFU9BLCveMszjRSj"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"OjlKFMniwFWrfnQK"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"DC1XbPsRSQWcsX2s"}
{"$$deleted":true,"_id":"0Qf5TNmUKI3XVlmX"}
{"$$deleted":true,"_id":"1lXfrkRr7OtRD6F8"}
{"$$deleted":true,"_id":"3Qw95r9PD26NQBTU"}
{"$$deleted":true,"_id":"3ZKFlTSdrz0E7K7n"}
{"$$deleted":true,"_id":"4nig8kS9JRxercEn"}
{"$$deleted":true,"_id":"5UrvdsMjUeIPe2aB"}
{"$$deleted":true,"_id":"5YHxwTCM37rVcWGj"}
{"$$deleted":true,"_id":"9SudBNBsmu4EMF4X"}
{"$$deleted":true,"_id":"BYQRX7D3kSyeDyf9"}
{"$$deleted":true,"_id":"DC1XbPsRSQWcsX2s"}
{"$$deleted":true,"_id":"Exu7HGOCQmlPeBfr"}
{"$$deleted":true,"_id":"HuL5Umgy2x6kL1LG"}
{"$$deleted":true,"_id":"OKPuEa4IjsmE0yFd"}
{"$$deleted":true,"_id":"OjlKFMniwFWrfnQK"}
{"$$deleted":true,"_id":"P3Ru7eLGPdyJ2qwy"}
{"$$deleted":true,"_id":"RBYDqar0mK3d1Gwo"}
{"$$deleted":true,"_id":"dXrf8FhW2UI5NiNI"}
{"$$deleted":true,"_id":"eGJOsLwTIGVAAHxt"}
{"$$deleted":true,"_id":"eQwQ49BCE1F9lexA"}
{"$$deleted":true,"_id":"gNNrk7KKJf51zklo"}
{"$$deleted":true,"_id":"gZE4r3vK7RFMGEOB"}
{"$$deleted":true,"_id":"ghHeUqmBMtqP7PYL"}
{"$$deleted":true,"_id":"iOzgjJmyK2bd27mg"}
{"$$deleted":true,"_id":"itokeH4DcdE93v5J"}
{"$$deleted":true,"_id":"jAwIh4MqNZnS3mOo"}
{"$$deleted":true,"_id":"kqB2TevgyrFB5weZ"}
{"$$deleted":true,"_id":"lFU9BLCveMszjRSj"}
{"$$deleted":true,"_id":"lgnqRVfGseq49HXg"}
{"$$deleted":true,"_id":"oLz92TffB27DmJjW"}
{"$$deleted":true,"_id":"rqkbQBj98GaGImRX"}
{"$$deleted":true,"_id":"v7bcCev1J3YTk1UH"}
{"$$deleted":true,"_id":"vU60p0CEn0apCg3k"}
{"$$deleted":true,"_id":"yf2cyWGua4jhxRWz"}
{"$$deleted":true,"_id":"zMri9orROmJy6qQA"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"wEeulREiDXntTzcc"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"2Pa8jIgsOapFCGFT"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"Lb8hV0WNaBDypEva"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"fluBLt0v3ay7itVQ"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"oy1mtNQTUzhQRzY5"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"kyD7cQKf1YBS6zS0"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"ASUSxqywLX05g5F1"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"xlrqDi9swK2Uams2"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"HzxCJSsl9Gyw7OkD"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"ibE3W7VUABVFWTmu"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"b1iUDkmPsrpGqrl0"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"qTazgwLZ3O74b1Rj"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"I5RVMaTzs87Fro6q"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"UB7bkADSEEtnR5MV"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"vTpPMPlULuKisXvR"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"Pk4e78vVLA5O3xNC"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"gItO6rI8cUS6bDag"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"MgvnqMd06fyugfDu"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"g9EU1uDzEQhhXTx9"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"H4vlz4UgVofg0dvM"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"ep0UuyFYRpBJVC30"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\n<Form>\n  <Form.Text />\n</Form>\n\n\n```\n","type":"md","_id":"mU0nEKoOfE1nwiyi"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"WpFa0eF8lxmP7iBL"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"jcJRPWN2R5kF5tCq"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"iDnTXL1hqFgmBHif"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"ZPUt1V5HV3MUkLBm"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"72U3YMftkaFHRIX6"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"CXkJCoCCJCjUtx7v"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"uxngLLf7qFQZ0CHi"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"HGaaUuzV7p5Fjo4J"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"NmjcI4CtgowuYOjB"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"vvZ3SBv9ToWMBcHC"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"YNFZE9omgrAjTdO3"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"6t1e3r903wnKZBWO"}
{"$$deleted":true,"_id":"2Pa8jIgsOapFCGFT"}
{"$$deleted":true,"_id":"6t1e3r903wnKZBWO"}
{"$$deleted":true,"_id":"72U3YMftkaFHRIX6"}
{"$$deleted":true,"_id":"ASUSxqywLX05g5F1"}
{"$$deleted":true,"_id":"CXkJCoCCJCjUtx7v"}
{"$$deleted":true,"_id":"H4vlz4UgVofg0dvM"}
{"$$deleted":true,"_id":"HGaaUuzV7p5Fjo4J"}
{"$$deleted":true,"_id":"HzxCJSsl9Gyw7OkD"}
{"$$deleted":true,"_id":"I5RVMaTzs87Fro6q"}
{"$$deleted":true,"_id":"Lb8hV0WNaBDypEva"}
{"$$deleted":true,"_id":"MgvnqMd06fyugfDu"}
{"$$deleted":true,"_id":"NmjcI4CtgowuYOjB"}
{"$$deleted":true,"_id":"Pk4e78vVLA5O3xNC"}
{"$$deleted":true,"_id":"UB7bkADSEEtnR5MV"}
{"$$deleted":true,"_id":"WpFa0eF8lxmP7iBL"}
{"$$deleted":true,"_id":"YNFZE9omgrAjTdO3"}
{"$$deleted":true,"_id":"ZPUt1V5HV3MUkLBm"}
{"$$deleted":true,"_id":"b1iUDkmPsrpGqrl0"}
{"$$deleted":true,"_id":"ep0UuyFYRpBJVC30"}
{"$$deleted":true,"_id":"fluBLt0v3ay7itVQ"}
{"$$deleted":true,"_id":"g9EU1uDzEQhhXTx9"}
{"$$deleted":true,"_id":"gItO6rI8cUS6bDag"}
{"$$deleted":true,"_id":"iDnTXL1hqFgmBHif"}
{"$$deleted":true,"_id":"ibE3W7VUABVFWTmu"}
{"$$deleted":true,"_id":"jcJRPWN2R5kF5tCq"}
{"$$deleted":true,"_id":"kyD7cQKf1YBS6zS0"}
{"$$deleted":true,"_id":"mU0nEKoOfE1nwiyi"}
{"$$deleted":true,"_id":"oy1mtNQTUzhQRzY5"}
{"$$deleted":true,"_id":"qTazgwLZ3O74b1Rj"}
{"$$deleted":true,"_id":"uxngLLf7qFQZ0CHi"}
{"$$deleted":true,"_id":"vTpPMPlULuKisXvR"}
{"$$deleted":true,"_id":"vvZ3SBv9ToWMBcHC"}
{"$$deleted":true,"_id":"wEeulREiDXntTzcc"}
{"$$deleted":true,"_id":"xlrqDi9swK2Uams2"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"5TBaUoWjSsS4GeKT"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"oY1KxGQ6klaPxoaj"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"id20GVu6o7sE8yZI"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"VfxszZnqdkvIIhYR"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"MzOoCmoMWd7ynb0W"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"lwS68Xumf70V1L6A"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"dbn85FIx5oKPJK3W"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"Kgfw05WIOXLOc12M"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"Mlzgp1l5IXGChqYm"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"HQbYTM8dzFhqflC1"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"1xkq0u4t6X4TXJ6e"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"JSRZo3vTDsnd00ck"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"l9Ehio5vw04BgbVE"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"Y35d0X7cLCXBG7in"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"LCYcMiI7hjJaCNQW"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"8nqgfix08ClVC6Oo"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"sWaRamjGuqviE5aL"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"dwMxjbwpMznxf3wd"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"nhDDGXzEVVOAkoqz"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"AjMEFOh5IsIvOaUc"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"X0kPm8XTcb0QJu1M"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.Text />\n</Form>\n\n\n```\n","type":"md","_id":"0XUvzevsnoaps5n8"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"QDFfdyWHmQtf5kwQ"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"IlsxlvH903OSMwZ2"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"BzWP7aGLv3pYUNWO"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"eiU9jWhUE1uz5fbc"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"qp619Glnx5Gna2UU"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"J5xQDwafq7KEBEuK"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"YUHlLQTUWTrrqEm0"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"4cpPYLQ01hao89hl"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"cRyeozbtZ6h6oHSG"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"VlqP78A8XbfV4B2U"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"HIlu5WPF7Pe6lSJt"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"LprUv3NjU9oVsu61"}
{"$$deleted":true,"_id":"0XUvzevsnoaps5n8"}
{"$$deleted":true,"_id":"1xkq0u4t6X4TXJ6e"}
{"$$deleted":true,"_id":"4cpPYLQ01hao89hl"}
{"$$deleted":true,"_id":"5TBaUoWjSsS4GeKT"}
{"$$deleted":true,"_id":"8nqgfix08ClVC6Oo"}
{"$$deleted":true,"_id":"AjMEFOh5IsIvOaUc"}
{"$$deleted":true,"_id":"BzWP7aGLv3pYUNWO"}
{"$$deleted":true,"_id":"HIlu5WPF7Pe6lSJt"}
{"$$deleted":true,"_id":"HQbYTM8dzFhqflC1"}
{"$$deleted":true,"_id":"IlsxlvH903OSMwZ2"}
{"$$deleted":true,"_id":"J5xQDwafq7KEBEuK"}
{"$$deleted":true,"_id":"JSRZo3vTDsnd00ck"}
{"$$deleted":true,"_id":"Kgfw05WIOXLOc12M"}
{"$$deleted":true,"_id":"LCYcMiI7hjJaCNQW"}
{"$$deleted":true,"_id":"LprUv3NjU9oVsu61"}
{"$$deleted":true,"_id":"Mlzgp1l5IXGChqYm"}
{"$$deleted":true,"_id":"MzOoCmoMWd7ynb0W"}
{"$$deleted":true,"_id":"QDFfdyWHmQtf5kwQ"}
{"$$deleted":true,"_id":"VfxszZnqdkvIIhYR"}
{"$$deleted":true,"_id":"VlqP78A8XbfV4B2U"}
{"$$deleted":true,"_id":"X0kPm8XTcb0QJu1M"}
{"$$deleted":true,"_id":"Y35d0X7cLCXBG7in"}
{"$$deleted":true,"_id":"YUHlLQTUWTrrqEm0"}
{"$$deleted":true,"_id":"cRyeozbtZ6h6oHSG"}
{"$$deleted":true,"_id":"dbn85FIx5oKPJK3W"}
{"$$deleted":true,"_id":"dwMxjbwpMznxf3wd"}
{"$$deleted":true,"_id":"eiU9jWhUE1uz5fbc"}
{"$$deleted":true,"_id":"id20GVu6o7sE8yZI"}
{"$$deleted":true,"_id":"l9Ehio5vw04BgbVE"}
{"$$deleted":true,"_id":"lwS68Xumf70V1L6A"}
{"$$deleted":true,"_id":"nhDDGXzEVVOAkoqz"}
{"$$deleted":true,"_id":"oY1KxGQ6klaPxoaj"}
{"$$deleted":true,"_id":"qp619Glnx5Gna2UU"}
{"$$deleted":true,"_id":"sWaRamjGuqviE5aL"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"8YiOuvF5Ihus5J0w"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"Z6UKV7ZfywqVZSv8"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"GJ03U6XkT58ViU80"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"RBEXhIWL7goVvaCs"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"lpiFdbmRMkKSQ3fA"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"Sga9lY0rqbOjRfGw"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"EDOpLU1CH78EPUpx"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"OgxZYnj80DdA67z2"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"nnz6WJlP3C4enHNW"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"JugMoE5wAXeHPsMj"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"kdCqSph5OmnZKW7C"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"UOZiXPeK7Ywtx0cs"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"VEdZoKj3dctu0IFA"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"Lbd7CbHfqgxLsrGg"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"hlFrsRZ4HKoVuOZv"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"2YDlrbUMDnJSRlXj"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"D8QeI8t5DrB1ORIm"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"0wVMqyE7XvxUnnsi"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"A4TnAX1vwUSS4lwY"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"skFU0zgpHn9mRHpS"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"DGgfyERD7LTHrLfu"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\n\nconst form = <Form onSubmit={() => {}}>\n  <Form.Text value={value} onChange={onChange} />\n</Form>\n\n\n\n```\n","type":"md","_id":"8Vde83Oj4QXB8WNL"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"gnJMSmfJBt1EPqPd"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"CY3jn2hK6IiRBSRy"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"gAq0Pie7rMXiRJwd"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"bP3GWFtsOtQ5AxLR"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"QzNjH4ZTBT4wpsFI"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"sioOBt1GSzVylrO3"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"1cQE705qIfePuCaV"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"l1yPk2QF4BgHLr3F"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"wgUpEhn20Q8mpwJj"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"ubmToychAm2Ny6as"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"1aPIYiNGV3AVIItz"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"KDgegeh5UpFU3Ybn"}
{"$$deleted":true,"_id":"0wVMqyE7XvxUnnsi"}
{"$$deleted":true,"_id":"1aPIYiNGV3AVIItz"}
{"$$deleted":true,"_id":"1cQE705qIfePuCaV"}
{"$$deleted":true,"_id":"2YDlrbUMDnJSRlXj"}
{"$$deleted":true,"_id":"8Vde83Oj4QXB8WNL"}
{"$$deleted":true,"_id":"8YiOuvF5Ihus5J0w"}
{"$$deleted":true,"_id":"A4TnAX1vwUSS4lwY"}
{"$$deleted":true,"_id":"CY3jn2hK6IiRBSRy"}
{"$$deleted":true,"_id":"D8QeI8t5DrB1ORIm"}
{"$$deleted":true,"_id":"DGgfyERD7LTHrLfu"}
{"$$deleted":true,"_id":"EDOpLU1CH78EPUpx"}
{"$$deleted":true,"_id":"GJ03U6XkT58ViU80"}
{"$$deleted":true,"_id":"JugMoE5wAXeHPsMj"}
{"$$deleted":true,"_id":"KDgegeh5UpFU3Ybn"}
{"$$deleted":true,"_id":"Lbd7CbHfqgxLsrGg"}
{"$$deleted":true,"_id":"OgxZYnj80DdA67z2"}
{"$$deleted":true,"_id":"QzNjH4ZTBT4wpsFI"}
{"$$deleted":true,"_id":"RBEXhIWL7goVvaCs"}
{"$$deleted":true,"_id":"Sga9lY0rqbOjRfGw"}
{"$$deleted":true,"_id":"UOZiXPeK7Ywtx0cs"}
{"$$deleted":true,"_id":"VEdZoKj3dctu0IFA"}
{"$$deleted":true,"_id":"Z6UKV7ZfywqVZSv8"}
{"$$deleted":true,"_id":"bP3GWFtsOtQ5AxLR"}
{"$$deleted":true,"_id":"gAq0Pie7rMXiRJwd"}
{"$$deleted":true,"_id":"gnJMSmfJBt1EPqPd"}
{"$$deleted":true,"_id":"hlFrsRZ4HKoVuOZv"}
{"$$deleted":true,"_id":"kdCqSph5OmnZKW7C"}
{"$$deleted":true,"_id":"l1yPk2QF4BgHLr3F"}
{"$$deleted":true,"_id":"lpiFdbmRMkKSQ3fA"}
{"$$deleted":true,"_id":"nnz6WJlP3C4enHNW"}
{"$$deleted":true,"_id":"sioOBt1GSzVylrO3"}
{"$$deleted":true,"_id":"skFU0zgpHn9mRHpS"}
{"$$deleted":true,"_id":"ubmToychAm2Ny6as"}
{"$$deleted":true,"_id":"wgUpEhn20Q8mpwJj"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"8it8t4CJp2FtWM4j"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"XLGCPG4gUNxgV6Qp"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"rWcz0mgpUmxZjtL5"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"S63Jiyxa6k5y4DnM"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"i42alTxmSpNzFDAB"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"8KcauOBctRTgoDCV"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"hoy31yXwygaXQzJw"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"lOMS9mjl0S4uhJli"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"j8V2JWg5ActxeCQk"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"44LzNBnawEgBnQhI"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"mfOqfhD0m68fK2sw"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"iuoeTFzceq1MDzD7"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"e4AYj0uz1G9SXjOZ"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"T8kLC8keAaZh0sS3"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"23NRyEItBa1lQLWt"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"AjvVo502GgFVuGP8"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"yjlXqwXoqjhNBHGZ"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"FxTPcQZR7Li4o975"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"ovnTHytoi9nDkIBh"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"mdQW8jMSMzJanblY"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"YQO2QiOgitemVeWi"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\n\nconst form = <Form onSubmit={() => {\n  \n}}>\n  <Form.Text value={value} onChange={onChange} />\n</Form>\n\n\n\n```\n","type":"md","_id":"yLldlmfoDbadCkPp"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"Nyza46chuDGINeS0"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"nnUIxjAt43wM54xR"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"ge1ZaJyMKHQORt5R"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"TYfS0sqVYnHld52g"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"UnqkJNzs6cCzOE6b"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"AKgQtooUjNeGvhIj"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"oC6KVThl2JlIrQST"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"nJ4v5uuOiG9msmGY"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"erVsoZ5L9ZdoBT6G"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"07xQYLurtxnIqqJg"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"SGnVLjXXWqA23j4i"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"LpTeY2PU8UdOsdLO"}
{"$$deleted":true,"_id":"07xQYLurtxnIqqJg"}
{"$$deleted":true,"_id":"23NRyEItBa1lQLWt"}
{"$$deleted":true,"_id":"44LzNBnawEgBnQhI"}
{"$$deleted":true,"_id":"8KcauOBctRTgoDCV"}
{"$$deleted":true,"_id":"8it8t4CJp2FtWM4j"}
{"$$deleted":true,"_id":"AKgQtooUjNeGvhIj"}
{"$$deleted":true,"_id":"AjvVo502GgFVuGP8"}
{"$$deleted":true,"_id":"FxTPcQZR7Li4o975"}
{"$$deleted":true,"_id":"LpTeY2PU8UdOsdLO"}
{"$$deleted":true,"_id":"Nyza46chuDGINeS0"}
{"$$deleted":true,"_id":"S63Jiyxa6k5y4DnM"}
{"$$deleted":true,"_id":"SGnVLjXXWqA23j4i"}
{"$$deleted":true,"_id":"T8kLC8keAaZh0sS3"}
{"$$deleted":true,"_id":"TYfS0sqVYnHld52g"}
{"$$deleted":true,"_id":"UnqkJNzs6cCzOE6b"}
{"$$deleted":true,"_id":"XLGCPG4gUNxgV6Qp"}
{"$$deleted":true,"_id":"YQO2QiOgitemVeWi"}
{"$$deleted":true,"_id":"e4AYj0uz1G9SXjOZ"}
{"$$deleted":true,"_id":"erVsoZ5L9ZdoBT6G"}
{"$$deleted":true,"_id":"ge1ZaJyMKHQORt5R"}
{"$$deleted":true,"_id":"hoy31yXwygaXQzJw"}
{"$$deleted":true,"_id":"i42alTxmSpNzFDAB"}
{"$$deleted":true,"_id":"iuoeTFzceq1MDzD7"}
{"$$deleted":true,"_id":"j8V2JWg5ActxeCQk"}
{"$$deleted":true,"_id":"lOMS9mjl0S4uhJli"}
{"$$deleted":true,"_id":"mdQW8jMSMzJanblY"}
{"$$deleted":true,"_id":"mfOqfhD0m68fK2sw"}
{"$$deleted":true,"_id":"nJ4v5uuOiG9msmGY"}
{"$$deleted":true,"_id":"nnUIxjAt43wM54xR"}
{"$$deleted":true,"_id":"oC6KVThl2JlIrQST"}
{"$$deleted":true,"_id":"ovnTHytoi9nDkIBh"}
{"$$deleted":true,"_id":"rWcz0mgpUmxZjtL5"}
{"$$deleted":true,"_id":"yLldlmfoDbadCkPp"}
{"$$deleted":true,"_id":"yjlXqwXoqjhNBHGZ"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"XTtlCYTILb4WOLt4"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"Xl4fJVeUZ4BL6Gw2"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"2Ch7i2ij9weumAT7"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"sHZyuR6Y29YcMHSv"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"JeJsxHrkj8lA32li"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"mZ4Z6INo7xSwIJkG"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"PJfnOGyzSfsvtUXx"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"odc0RbR8U1h25TOA"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"I5cDWTSsKBjjCiu0"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"tO5ZTtvrcfQRieYB"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"27lSOgdQLJ8aoXl7"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"gZYGmE58tfHJ8YCs"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"oQZzIdogsP2yQPkA"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"jkOkaOrMPa5RUiwU"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"6M8bafex39KGu0vk"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"fZVeQbekrXLHumvO"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"3VvFtjJi8PL935W5"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"qBDLjBFv61RDJlg5"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"Lg769EW65TpCI9Bp"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"Vw113zDiRDMnA7E9"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"X7BkcdwTyEYA851j"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\n/******************************************************************************/\n// \n/******************************************************************************/\n\nconst form = <Form onSubmit={() => {\n\n}}>\n  <Form.Text value={value} onChange={onChange} />\n</Form>\n\n\n\n```\n","type":"md","_id":"puV6fnuM2uTYKyPR"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"zC3HudGPqySpak4J"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"OWix76dPmNvJo2Ah"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"ESEd3b9wMI4mLIIw"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"VerfYBQKYgUvSoT2"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"1kQvlsdtA5Nfp7LR"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"X8eVCpeWzn2538SN"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"Vf4Wkd9qQslMIXL7"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"EXBkxnYnxe1cofk1"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"QufZBuXpXmgGKEBY"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"CAgO1eKszZ4FMNlx"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"5bHJ6fFFbVLku7cA"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"nnJuZuDXW52qH47r"}
{"$$deleted":true,"_id":"1kQvlsdtA5Nfp7LR"}
{"$$deleted":true,"_id":"27lSOgdQLJ8aoXl7"}
{"$$deleted":true,"_id":"2Ch7i2ij9weumAT7"}
{"$$deleted":true,"_id":"3VvFtjJi8PL935W5"}
{"$$deleted":true,"_id":"5bHJ6fFFbVLku7cA"}
{"$$deleted":true,"_id":"6M8bafex39KGu0vk"}
{"$$deleted":true,"_id":"CAgO1eKszZ4FMNlx"}
{"$$deleted":true,"_id":"ESEd3b9wMI4mLIIw"}
{"$$deleted":true,"_id":"EXBkxnYnxe1cofk1"}
{"$$deleted":true,"_id":"I5cDWTSsKBjjCiu0"}
{"$$deleted":true,"_id":"JeJsxHrkj8lA32li"}
{"$$deleted":true,"_id":"Lg769EW65TpCI9Bp"}
{"$$deleted":true,"_id":"OWix76dPmNvJo2Ah"}
{"$$deleted":true,"_id":"PJfnOGyzSfsvtUXx"}
{"$$deleted":true,"_id":"QufZBuXpXmgGKEBY"}
{"$$deleted":true,"_id":"VerfYBQKYgUvSoT2"}
{"$$deleted":true,"_id":"Vf4Wkd9qQslMIXL7"}
{"$$deleted":true,"_id":"Vw113zDiRDMnA7E9"}
{"$$deleted":true,"_id":"X7BkcdwTyEYA851j"}
{"$$deleted":true,"_id":"X8eVCpeWzn2538SN"}
{"$$deleted":true,"_id":"XTtlCYTILb4WOLt4"}
{"$$deleted":true,"_id":"Xl4fJVeUZ4BL6Gw2"}
{"$$deleted":true,"_id":"fZVeQbekrXLHumvO"}
{"$$deleted":true,"_id":"gZYGmE58tfHJ8YCs"}
{"$$deleted":true,"_id":"jkOkaOrMPa5RUiwU"}
{"$$deleted":true,"_id":"mZ4Z6INo7xSwIJkG"}
{"$$deleted":true,"_id":"nnJuZuDXW52qH47r"}
{"$$deleted":true,"_id":"oQZzIdogsP2yQPkA"}
{"$$deleted":true,"_id":"odc0RbR8U1h25TOA"}
{"$$deleted":true,"_id":"puV6fnuM2uTYKyPR"}
{"$$deleted":true,"_id":"qBDLjBFv61RDJlg5"}
{"$$deleted":true,"_id":"sHZyuR6Y29YcMHSv"}
{"$$deleted":true,"_id":"tO5ZTtvrcfQRieYB"}
{"$$deleted":true,"_id":"zC3HudGPqySpak4J"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"mamY08VEXk98NpyH"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"eDmQnPfhi27URmH9"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"m3Ub1P2Edf8T582J"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"FouQ9iFmBsEXIF3x"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"RP2uc7g2iKYD3cPg"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"lHX05VM7be0RaP0A"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"kgBiFVGx1BS0Xxlk"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"t7WlNoxdGpwwIgfL"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"uHlZ0B2zclW6ktaV"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"Ef8bdbhxO8Ki6v4e"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"dbGev7Ni9gDSfzYz"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"YUvemCTSsTwRQOoG"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"O9MLABOxP2Unc9MS"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"PzS7aCoXtGFnZ80b"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"OQ4skdW2H19ORqLi"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"NHYXGgr3yUlAAGMg"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"Y8hEw5C3mjvjpwrw"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"d7KuJbCkoT7mYldy"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"SCN6CkIZwPq5KmJr"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"Fsg72kwBtEfvfoBi"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"ggv8wM7msmDEf2T0"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form onSubmit={() => {\n\n}}>\n  <Form.Text value={value} onChange={onChange} />\n</Form>\n\n\n\n```\n","type":"md","_id":"CUG1JTpECj27Q3YC"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"PA4HbGmO6DtZ9Tzj"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"Sp40EH628NI37KTm"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"huSteGA6hurgVjhq"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"8sMIefifmbG73iT4"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"CF1EFVrvBXvDbXuZ"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"lKJyt0TSOCu3OxuP"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"eGMaQS75CVUNZM1L"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"cvEczM53sdp8ChAe"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"U25ibl1hzEdWhqR6"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"6971gUsQ7M99eUNi"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"Pz15Fh5bXKDMheC3"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"psmGOPjgaBQASiiY"}
{"$$deleted":true,"_id":"6971gUsQ7M99eUNi"}
{"$$deleted":true,"_id":"8sMIefifmbG73iT4"}
{"$$deleted":true,"_id":"CF1EFVrvBXvDbXuZ"}
{"$$deleted":true,"_id":"CUG1JTpECj27Q3YC"}
{"$$deleted":true,"_id":"Ef8bdbhxO8Ki6v4e"}
{"$$deleted":true,"_id":"FouQ9iFmBsEXIF3x"}
{"$$deleted":true,"_id":"Fsg72kwBtEfvfoBi"}
{"$$deleted":true,"_id":"NHYXGgr3yUlAAGMg"}
{"$$deleted":true,"_id":"O9MLABOxP2Unc9MS"}
{"$$deleted":true,"_id":"OQ4skdW2H19ORqLi"}
{"$$deleted":true,"_id":"PA4HbGmO6DtZ9Tzj"}
{"$$deleted":true,"_id":"Pz15Fh5bXKDMheC3"}
{"$$deleted":true,"_id":"PzS7aCoXtGFnZ80b"}
{"$$deleted":true,"_id":"RP2uc7g2iKYD3cPg"}
{"$$deleted":true,"_id":"SCN6CkIZwPq5KmJr"}
{"$$deleted":true,"_id":"Sp40EH628NI37KTm"}
{"$$deleted":true,"_id":"U25ibl1hzEdWhqR6"}
{"$$deleted":true,"_id":"Y8hEw5C3mjvjpwrw"}
{"$$deleted":true,"_id":"YUvemCTSsTwRQOoG"}
{"$$deleted":true,"_id":"cvEczM53sdp8ChAe"}
{"$$deleted":true,"_id":"d7KuJbCkoT7mYldy"}
{"$$deleted":true,"_id":"dbGev7Ni9gDSfzYz"}
{"$$deleted":true,"_id":"eDmQnPfhi27URmH9"}
{"$$deleted":true,"_id":"eGMaQS75CVUNZM1L"}
{"$$deleted":true,"_id":"ggv8wM7msmDEf2T0"}
{"$$deleted":true,"_id":"huSteGA6hurgVjhq"}
{"$$deleted":true,"_id":"kgBiFVGx1BS0Xxlk"}
{"$$deleted":true,"_id":"lHX05VM7be0RaP0A"}
{"$$deleted":true,"_id":"lKJyt0TSOCu3OxuP"}
{"$$deleted":true,"_id":"m3Ub1P2Edf8T582J"}
{"$$deleted":true,"_id":"mamY08VEXk98NpyH"}
{"$$deleted":true,"_id":"psmGOPjgaBQASiiY"}
{"$$deleted":true,"_id":"t7WlNoxdGpwwIgfL"}
{"$$deleted":true,"_id":"uHlZ0B2zclW6ktaV"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"FqQ3yCSFJURaNr43"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"P9ULquEDF10mDP1o"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"P8xo8EIzjkUY3PQi"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"JRd31ufynHvSafRU"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"Y6Ly7H5NDYH7ydPc"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"63wifV63vSWQ557j"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"YIs2zVTTkkaFnXje"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"pojMiWW4H7WgWh9x"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"xfqnaW2FQcLGhQTa"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"f0HR7ChZrUQB0E4t"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"MqBtK71BwS0ncqdW"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"H84yJwN6Z3HBwZzn"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"T5KcIa98R9PKer7Z"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"ODcvseZfQqGvNJvC"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"RSozzr0IF8o15YC3"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"rWldsHdDZWg3GlOP"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"Uccwq4YmBMTe5aK6"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"k20gkLiGIP1CP0sp"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"FmqHtmfgtBRff7dI"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"enWBXFiWygHc9Fbr"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"85pn1l7RvGho5Tfh"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form onSubmit={}>\n  <Form.Text value={value} onChange={onChange} />\n</Form>\n\n\n\n```\n","type":"md","_id":"ZF0ZHY3LBefbMTd8"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"gLO5b6k95iCBpC9h"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"m9taVxkFBIedzYvL"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"OowAobml0NmgGgQo"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"puVYJR56qIfIBlYN"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"uOd8L0JtlOOyapaD"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"62qeGtLrK7ZeQMw4"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"PKz9vzwAcuzgPqmn"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"bIVsSo2QFlpIFL4k"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"tgtnYPcby7Vzq8nx"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"qfFH24dpjBi0DAYU"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"uCMOBlWngyk6qDlP"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"sGmscSBjgvGXM9x1"}
{"$$deleted":true,"_id":"62qeGtLrK7ZeQMw4"}
{"$$deleted":true,"_id":"63wifV63vSWQ557j"}
{"$$deleted":true,"_id":"85pn1l7RvGho5Tfh"}
{"$$deleted":true,"_id":"FmqHtmfgtBRff7dI"}
{"$$deleted":true,"_id":"FqQ3yCSFJURaNr43"}
{"$$deleted":true,"_id":"H84yJwN6Z3HBwZzn"}
{"$$deleted":true,"_id":"JRd31ufynHvSafRU"}
{"$$deleted":true,"_id":"MqBtK71BwS0ncqdW"}
{"$$deleted":true,"_id":"ODcvseZfQqGvNJvC"}
{"$$deleted":true,"_id":"OowAobml0NmgGgQo"}
{"$$deleted":true,"_id":"P8xo8EIzjkUY3PQi"}
{"$$deleted":true,"_id":"P9ULquEDF10mDP1o"}
{"$$deleted":true,"_id":"PKz9vzwAcuzgPqmn"}
{"$$deleted":true,"_id":"RSozzr0IF8o15YC3"}
{"$$deleted":true,"_id":"T5KcIa98R9PKer7Z"}
{"$$deleted":true,"_id":"Uccwq4YmBMTe5aK6"}
{"$$deleted":true,"_id":"Y6Ly7H5NDYH7ydPc"}
{"$$deleted":true,"_id":"YIs2zVTTkkaFnXje"}
{"$$deleted":true,"_id":"ZF0ZHY3LBefbMTd8"}
{"$$deleted":true,"_id":"bIVsSo2QFlpIFL4k"}
{"$$deleted":true,"_id":"enWBXFiWygHc9Fbr"}
{"$$deleted":true,"_id":"f0HR7ChZrUQB0E4t"}
{"$$deleted":true,"_id":"gLO5b6k95iCBpC9h"}
{"$$deleted":true,"_id":"k20gkLiGIP1CP0sp"}
{"$$deleted":true,"_id":"m9taVxkFBIedzYvL"}
{"$$deleted":true,"_id":"pojMiWW4H7WgWh9x"}
{"$$deleted":true,"_id":"puVYJR56qIfIBlYN"}
{"$$deleted":true,"_id":"qfFH24dpjBi0DAYU"}
{"$$deleted":true,"_id":"rWldsHdDZWg3GlOP"}
{"$$deleted":true,"_id":"sGmscSBjgvGXM9x1"}
{"$$deleted":true,"_id":"tgtnYPcby7Vzq8nx"}
{"$$deleted":true,"_id":"uCMOBlWngyk6qDlP"}
{"$$deleted":true,"_id":"uOd8L0JtlOOyapaD"}
{"$$deleted":true,"_id":"xfqnaW2FQcLGhQTa"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"1ADyLbHJLu4qWxOL"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"XCCvHGfSDEHR2NFM"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"WwCuNCAdQJnnSQgr"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"II8hEDh0wH6FY9vh"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"LXoPkuGZUQJ1hqub"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"OAuaAwRzhwKISW6L"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"djhqCypqPI6l8hDF"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"1rANyWG6MaYjafWV"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"TRleWRcvBDnrITkB"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"2AJOLv1BR6uRE54J"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"ocTkogBgEszTAJD9"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"kQxVL0TESWDPsVp9"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"VcRNZMCYpuIs3ySR"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"ackkvFmJLC3bREzd"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"mIg9TB8guS7aX6Lm"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"SnoLbM31V0gwMdFo"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"7ESnzG5uANQIPA6A"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"GVsCBGWJOBXsM1aE"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"kDKPr51hl5BZcIkm"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"PzpRotlnuwa7iUfN"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"NVMlQIU1x20l5ZQS"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.Text value={value} onChange={onChange} />\n</Form>\n\n\n\n```\n","type":"md","_id":"TK1xxA6MEFOR6nvS"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"nyE7NPKkforA0GQo"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"PrHUpRbaIpjGHNaV"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"D47HhCZBOZOMdE7F"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"j4zDhv8TtClfotjj"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"YTQ70NYnTV8e0bkD"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"XtmPFRsnaJS6Q91D"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"rzS6DnCSevwokfsp"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"xhdnuJTFYvQOX00x"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"7bfgpwC81cBghhpn"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"0hO8A6s6qOp9YJ9a"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"8QmxSMnArKtiJjeH"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"U5dhQscSuFytGB1v"}
{"$$deleted":true,"_id":"0hO8A6s6qOp9YJ9a"}
{"$$deleted":true,"_id":"1ADyLbHJLu4qWxOL"}
{"$$deleted":true,"_id":"1rANyWG6MaYjafWV"}
{"$$deleted":true,"_id":"2AJOLv1BR6uRE54J"}
{"$$deleted":true,"_id":"7ESnzG5uANQIPA6A"}
{"$$deleted":true,"_id":"7bfgpwC81cBghhpn"}
{"$$deleted":true,"_id":"8QmxSMnArKtiJjeH"}
{"$$deleted":true,"_id":"D47HhCZBOZOMdE7F"}
{"$$deleted":true,"_id":"GVsCBGWJOBXsM1aE"}
{"$$deleted":true,"_id":"II8hEDh0wH6FY9vh"}
{"$$deleted":true,"_id":"LXoPkuGZUQJ1hqub"}
{"$$deleted":true,"_id":"NVMlQIU1x20l5ZQS"}
{"$$deleted":true,"_id":"OAuaAwRzhwKISW6L"}
{"$$deleted":true,"_id":"PrHUpRbaIpjGHNaV"}
{"$$deleted":true,"_id":"PzpRotlnuwa7iUfN"}
{"$$deleted":true,"_id":"SnoLbM31V0gwMdFo"}
{"$$deleted":true,"_id":"TK1xxA6MEFOR6nvS"}
{"$$deleted":true,"_id":"TRleWRcvBDnrITkB"}
{"$$deleted":true,"_id":"U5dhQscSuFytGB1v"}
{"$$deleted":true,"_id":"VcRNZMCYpuIs3ySR"}
{"$$deleted":true,"_id":"WwCuNCAdQJnnSQgr"}
{"$$deleted":true,"_id":"XCCvHGfSDEHR2NFM"}
{"$$deleted":true,"_id":"XtmPFRsnaJS6Q91D"}
{"$$deleted":true,"_id":"YTQ70NYnTV8e0bkD"}
{"$$deleted":true,"_id":"ackkvFmJLC3bREzd"}
{"$$deleted":true,"_id":"djhqCypqPI6l8hDF"}
{"$$deleted":true,"_id":"j4zDhv8TtClfotjj"}
{"$$deleted":true,"_id":"kDKPr51hl5BZcIkm"}
{"$$deleted":true,"_id":"kQxVL0TESWDPsVp9"}
{"$$deleted":true,"_id":"mIg9TB8guS7aX6Lm"}
{"$$deleted":true,"_id":"nyE7NPKkforA0GQo"}
{"$$deleted":true,"_id":"ocTkogBgEszTAJD9"}
{"$$deleted":true,"_id":"rzS6DnCSevwokfsp"}
{"$$deleted":true,"_id":"xhdnuJTFYvQOX00x"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"Gi9x7bXgsjZzYKsi"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"PSazovoOfWkEFYbV"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"tKe3rFnU6LvjPkn9"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"Idp9jWJ4tsS8JVS6"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"6UuxcKPYESBzWvJH"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"kJNffqmGkd7SCXyW"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"tb97ORu1ssmuzFgY"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"R6RnM4A6Vx2zU7kS"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"P5Lkl6s9Zw0yrrRl"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"taCe0e74vXoKlmcD"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"ejpO7zLJVQK14dQR"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"u2sgDNNWuVJcEZiZ"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"4QbLVL85UzEH8ZJx"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"YWvwQBZELBr04jw8"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"DuFkkvExmSvchjC4"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"hGdqFA8dy6tWmG4x"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"tGXPhudnHuSJvl2M"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"g3PHgVGJwEsW8CDF"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"1bJTjasusYsZ2c1x"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"B27flERUVQB2rk68"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"edqWDiCdGbBzkq2K"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.Text value={value} onChange={onChange} placeholder='age' />\n</Form>\n\n\n\n```\n","type":"md","_id":"xIKT9kXJJSurHC99"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"n0IxZLzeJg1fOaDM"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"Lrk4mYklyGYHqrff"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"LiLfkImeBIA6QhZb"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"fJ0pHQrfZIeTXF0Z"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"XCZBg14WXRnObv5F"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"XE1klFHe9GKwASiT"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"RIfXgw49FH1w5vTz"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"YDSEmdUN3zsbnVT5"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"KaKfdWWNz9n36NFu"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"AEpNnrZWBImoK76o"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"7128ObqCdNFtns7y"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"myzJXljiDXuQfydf"}
{"$$deleted":true,"_id":"1bJTjasusYsZ2c1x"}
{"$$deleted":true,"_id":"4QbLVL85UzEH8ZJx"}
{"$$deleted":true,"_id":"6UuxcKPYESBzWvJH"}
{"$$deleted":true,"_id":"7128ObqCdNFtns7y"}
{"$$deleted":true,"_id":"AEpNnrZWBImoK76o"}
{"$$deleted":true,"_id":"B27flERUVQB2rk68"}
{"$$deleted":true,"_id":"DuFkkvExmSvchjC4"}
{"$$deleted":true,"_id":"Gi9x7bXgsjZzYKsi"}
{"$$deleted":true,"_id":"Idp9jWJ4tsS8JVS6"}
{"$$deleted":true,"_id":"KaKfdWWNz9n36NFu"}
{"$$deleted":true,"_id":"LiLfkImeBIA6QhZb"}
{"$$deleted":true,"_id":"Lrk4mYklyGYHqrff"}
{"$$deleted":true,"_id":"P5Lkl6s9Zw0yrrRl"}
{"$$deleted":true,"_id":"PSazovoOfWkEFYbV"}
{"$$deleted":true,"_id":"R6RnM4A6Vx2zU7kS"}
{"$$deleted":true,"_id":"RIfXgw49FH1w5vTz"}
{"$$deleted":true,"_id":"XCZBg14WXRnObv5F"}
{"$$deleted":true,"_id":"XE1klFHe9GKwASiT"}
{"$$deleted":true,"_id":"YDSEmdUN3zsbnVT5"}
{"$$deleted":true,"_id":"YWvwQBZELBr04jw8"}
{"$$deleted":true,"_id":"edqWDiCdGbBzkq2K"}
{"$$deleted":true,"_id":"ejpO7zLJVQK14dQR"}
{"$$deleted":true,"_id":"fJ0pHQrfZIeTXF0Z"}
{"$$deleted":true,"_id":"g3PHgVGJwEsW8CDF"}
{"$$deleted":true,"_id":"hGdqFA8dy6tWmG4x"}
{"$$deleted":true,"_id":"kJNffqmGkd7SCXyW"}
{"$$deleted":true,"_id":"myzJXljiDXuQfydf"}
{"$$deleted":true,"_id":"n0IxZLzeJg1fOaDM"}
{"$$deleted":true,"_id":"tGXPhudnHuSJvl2M"}
{"$$deleted":true,"_id":"tKe3rFnU6LvjPkn9"}
{"$$deleted":true,"_id":"taCe0e74vXoKlmcD"}
{"$$deleted":true,"_id":"tb97ORu1ssmuzFgY"}
{"$$deleted":true,"_id":"u2sgDNNWuVJcEZiZ"}
{"$$deleted":true,"_id":"xIKT9kXJJSurHC99"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"sJqeeSv9VguqV4H4"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"BFDcqb1PCDZTQIic"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"LwiAnNrflgHj9Tao"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"FA5SHF63wNirlfmp"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"yMbWI6Ei0gvlqpqm"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"p5bK122GRLZhRgzc"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"NFaOBd1Bk0gLvtui"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"RZ32ErhZnpP8ItlZ"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"oXG8WWWrIuWmWCD7"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"y5P1MOiVH6R86Rg0"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"ljUhmkrb4xepxErM"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"uqC7go6coAjJl2NB"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"Uok9n6HTjF1keonz"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"4mbYr6a09LtQHLJs"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"NJ7oPWuu25D2ZiH5"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"6XFZXsV9baVjXavC"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"48IeraHwLueXKcax"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"5OdKZTsTNov6f0Uw"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"DXCAH3MufVwroaZo"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"Dv7xCa32I7eqko2i"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"xlhxJRQVHTOKZPQL"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n\n\n```\n","type":"md","_id":"cfbsYw1eZ7YZyiMt"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"GRsQsbhjQD6yzHyb"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"ybOSRPyc7cukl3UT"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"vf4mezXEmJubg26l"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"4S80gZNgLshaWXXw"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"UfZ3k4CDXvT9OacK"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"S5bKSM4xoJHQI99A"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"0cS6dXAnmI0CIcMG"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"zppLh5ELRa9oRJT4"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"x59mx42tuldjMECY"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"P7nVjZ9bInWfFCPu"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"FruIE9FwMvBujrlW"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"oKWdm9jspH45hn8C"}
{"$$deleted":true,"_id":"0cS6dXAnmI0CIcMG"}
{"$$deleted":true,"_id":"48IeraHwLueXKcax"}
{"$$deleted":true,"_id":"4S80gZNgLshaWXXw"}
{"$$deleted":true,"_id":"4mbYr6a09LtQHLJs"}
{"$$deleted":true,"_id":"5OdKZTsTNov6f0Uw"}
{"$$deleted":true,"_id":"6XFZXsV9baVjXavC"}
{"$$deleted":true,"_id":"BFDcqb1PCDZTQIic"}
{"$$deleted":true,"_id":"DXCAH3MufVwroaZo"}
{"$$deleted":true,"_id":"Dv7xCa32I7eqko2i"}
{"$$deleted":true,"_id":"FA5SHF63wNirlfmp"}
{"$$deleted":true,"_id":"FruIE9FwMvBujrlW"}
{"$$deleted":true,"_id":"GRsQsbhjQD6yzHyb"}
{"$$deleted":true,"_id":"LwiAnNrflgHj9Tao"}
{"$$deleted":true,"_id":"NFaOBd1Bk0gLvtui"}
{"$$deleted":true,"_id":"NJ7oPWuu25D2ZiH5"}
{"$$deleted":true,"_id":"P7nVjZ9bInWfFCPu"}
{"$$deleted":true,"_id":"RZ32ErhZnpP8ItlZ"}
{"$$deleted":true,"_id":"S5bKSM4xoJHQI99A"}
{"$$deleted":true,"_id":"UfZ3k4CDXvT9OacK"}
{"$$deleted":true,"_id":"Uok9n6HTjF1keonz"}
{"$$deleted":true,"_id":"cfbsYw1eZ7YZyiMt"}
{"$$deleted":true,"_id":"ljUhmkrb4xepxErM"}
{"$$deleted":true,"_id":"oKWdm9jspH45hn8C"}
{"$$deleted":true,"_id":"oXG8WWWrIuWmWCD7"}
{"$$deleted":true,"_id":"p5bK122GRLZhRgzc"}
{"$$deleted":true,"_id":"sJqeeSv9VguqV4H4"}
{"$$deleted":true,"_id":"uqC7go6coAjJl2NB"}
{"$$deleted":true,"_id":"vf4mezXEmJubg26l"}
{"$$deleted":true,"_id":"x59mx42tuldjMECY"}
{"$$deleted":true,"_id":"xlhxJRQVHTOKZPQL"}
{"$$deleted":true,"_id":"y5P1MOiVH6R86Rg0"}
{"$$deleted":true,"_id":"yMbWI6Ei0gvlqpqm"}
{"$$deleted":true,"_id":"ybOSRPyc7cukl3UT"}
{"$$deleted":true,"_id":"zppLh5ELRa9oRJT4"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"gB51480VJ4oIqZuL"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"qEPytKG50vtdRJAx"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"eEfquUzHmTb9FT2j"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"30VSU6g1acnLII3U"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"TofwdBGrrEI0SF8s"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"5g3Al3iED9DTMsLu"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"ewaMLpsD3NH6TZOt"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"bxRDZdQT35bDzzwt"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"ZFXXimjijOgUCD1I"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"viPc1qAcOd6PuftK"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"wrYQuTpMynC2twPT"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"esEK0lOkphu4tjXt"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"VN6LQSBtlUY40CDw"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"SI21qtHBrOo5p4CV"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"S49P50FoTyFiov8N"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"RiRsK5Hr9G1lQ77n"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"xPZYZTAdaExFNQr3"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"amzy7lqRnUPE0w5y"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"nXWFa8pxum2otM37"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"mdYZchCPt1j2xDTr"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"zrSCWNNGBP8gdzw7"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"iyQggIkNxNvA1wjq"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"20WHSZ2NAGwWjlO6"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"bGcsL4uNX9hMFVfj"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"CZYl0W06zF99v2e0"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"OllhGZ5sj1unAeoO"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"sDIWnJkauGHS3vWH"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"L8MmWuOQ7z7bIE3T"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"9bbr1lUPKMY1umjP"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"uEk3jqLBxKdjckgy"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"rVLEiz9P7pOTum5J"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"umcOufP1oFRsLTMK"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"83gGu6cdo775pQkZ"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"aDDK6Dja7grnX9QS"}
{"$$deleted":true,"_id":"20WHSZ2NAGwWjlO6"}
{"$$deleted":true,"_id":"30VSU6g1acnLII3U"}
{"$$deleted":true,"_id":"5g3Al3iED9DTMsLu"}
{"$$deleted":true,"_id":"83gGu6cdo775pQkZ"}
{"$$deleted":true,"_id":"9bbr1lUPKMY1umjP"}
{"$$deleted":true,"_id":"CZYl0W06zF99v2e0"}
{"$$deleted":true,"_id":"L8MmWuOQ7z7bIE3T"}
{"$$deleted":true,"_id":"OllhGZ5sj1unAeoO"}
{"$$deleted":true,"_id":"RiRsK5Hr9G1lQ77n"}
{"$$deleted":true,"_id":"S49P50FoTyFiov8N"}
{"$$deleted":true,"_id":"SI21qtHBrOo5p4CV"}
{"$$deleted":true,"_id":"TofwdBGrrEI0SF8s"}
{"$$deleted":true,"_id":"VN6LQSBtlUY40CDw"}
{"$$deleted":true,"_id":"ZFXXimjijOgUCD1I"}
{"$$deleted":true,"_id":"aDDK6Dja7grnX9QS"}
{"$$deleted":true,"_id":"amzy7lqRnUPE0w5y"}
{"$$deleted":true,"_id":"bGcsL4uNX9hMFVfj"}
{"$$deleted":true,"_id":"bxRDZdQT35bDzzwt"}
{"$$deleted":true,"_id":"eEfquUzHmTb9FT2j"}
{"$$deleted":true,"_id":"esEK0lOkphu4tjXt"}
{"$$deleted":true,"_id":"ewaMLpsD3NH6TZOt"}
{"$$deleted":true,"_id":"gB51480VJ4oIqZuL"}
{"$$deleted":true,"_id":"iyQggIkNxNvA1wjq"}
{"$$deleted":true,"_id":"mdYZchCPt1j2xDTr"}
{"$$deleted":true,"_id":"nXWFa8pxum2otM37"}
{"$$deleted":true,"_id":"qEPytKG50vtdRJAx"}
{"$$deleted":true,"_id":"rVLEiz9P7pOTum5J"}
{"$$deleted":true,"_id":"sDIWnJkauGHS3vWH"}
{"$$deleted":true,"_id":"uEk3jqLBxKdjckgy"}
{"$$deleted":true,"_id":"umcOufP1oFRsLTMK"}
{"$$deleted":true,"_id":"viPc1qAcOd6PuftK"}
{"$$deleted":true,"_id":"wrYQuTpMynC2twPT"}
{"$$deleted":true,"_id":"xPZYZTAdaExFNQr3"}
{"$$deleted":true,"_id":"zrSCWNNGBP8gdzw7"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"voGtzxkn3QcFREQW"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"IGpr8gpfP9KLBCy9"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"M7YrYfxA5Gfs5C5E"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"k48qWMbfpqfblApk"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"RJz6xPiyCuRHY588"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"2PJGDrfnFeyLsvSr"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"NsNUE7jbdRQeuWEn"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"E4ueHhVRcF6RPQM4"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"DgX3WMUaJOVEqwXq"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"y2moh5UnvjFsb5kz"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"9n2sMbZLzSOFrkmO"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"Pacans0p4CZuVtdh"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"r3Nfv7ud1HVXL1Up"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"6bvnjqcwk5DmFn9r"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"mWrWwDcqxGy52iYR"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"652uR4TSNuXhBTun"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"ut3QwQxMdMOgTnjx"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"5CRb8GE5RZR4JJy0"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"YyIxAzAMujswjWCC"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"lbZnZ1hIFdfpWFci"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"x7GguNjwthiXOsHr"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"L59pLuEx3FcSytdR"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"o4InDgsSv6W14URg"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"PSbrScVqYqi5qBh8"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"HdLKoPWiVeq2ukZ3"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"JGuBeZvZ6eoGBlBl"}
{"name":"state-tree","path":["react","state-tree"],"data":"","type":"md","_id":"Gsbyfs5KMunsxa2x"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"ZOSyoyoCPRFuYjec"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"uxZODWsJJmOyRzFO"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"r8TVB52XBRSrVLpQ"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"LO36VXgPiMNpHKIh"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"AQAwa8fHE3SDg40Z"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"wO8Hh8RtO2zHDtUr"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"BjGwMGn9qIC1L3B2"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"HC3Sjcf14EOwWZEP"}
{"$$deleted":true,"_id":"2PJGDrfnFeyLsvSr"}
{"$$deleted":true,"_id":"5CRb8GE5RZR4JJy0"}
{"$$deleted":true,"_id":"652uR4TSNuXhBTun"}
{"$$deleted":true,"_id":"6bvnjqcwk5DmFn9r"}
{"$$deleted":true,"_id":"9n2sMbZLzSOFrkmO"}
{"$$deleted":true,"_id":"AQAwa8fHE3SDg40Z"}
{"$$deleted":true,"_id":"BjGwMGn9qIC1L3B2"}
{"$$deleted":true,"_id":"DgX3WMUaJOVEqwXq"}
{"$$deleted":true,"_id":"E4ueHhVRcF6RPQM4"}
{"$$deleted":true,"_id":"Gsbyfs5KMunsxa2x"}
{"$$deleted":true,"_id":"HC3Sjcf14EOwWZEP"}
{"$$deleted":true,"_id":"HdLKoPWiVeq2ukZ3"}
{"$$deleted":true,"_id":"IGpr8gpfP9KLBCy9"}
{"$$deleted":true,"_id":"JGuBeZvZ6eoGBlBl"}
{"$$deleted":true,"_id":"L59pLuEx3FcSytdR"}
{"$$deleted":true,"_id":"LO36VXgPiMNpHKIh"}
{"$$deleted":true,"_id":"M7YrYfxA5Gfs5C5E"}
{"$$deleted":true,"_id":"NsNUE7jbdRQeuWEn"}
{"$$deleted":true,"_id":"PSbrScVqYqi5qBh8"}
{"$$deleted":true,"_id":"Pacans0p4CZuVtdh"}
{"$$deleted":true,"_id":"RJz6xPiyCuRHY588"}
{"$$deleted":true,"_id":"YyIxAzAMujswjWCC"}
{"$$deleted":true,"_id":"ZOSyoyoCPRFuYjec"}
{"$$deleted":true,"_id":"k48qWMbfpqfblApk"}
{"$$deleted":true,"_id":"lbZnZ1hIFdfpWFci"}
{"$$deleted":true,"_id":"mWrWwDcqxGy52iYR"}
{"$$deleted":true,"_id":"o4InDgsSv6W14URg"}
{"$$deleted":true,"_id":"r3Nfv7ud1HVXL1Up"}
{"$$deleted":true,"_id":"r8TVB52XBRSrVLpQ"}
{"$$deleted":true,"_id":"ut3QwQxMdMOgTnjx"}
{"$$deleted":true,"_id":"uxZODWsJJmOyRzFO"}
{"$$deleted":true,"_id":"voGtzxkn3QcFREQW"}
{"$$deleted":true,"_id":"wO8Hh8RtO2zHDtUr"}
{"$$deleted":true,"_id":"x7GguNjwthiXOsHr"}
{"$$deleted":true,"_id":"y2moh5UnvjFsb5kz"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"nvRDAbpVYOnT6wd1"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"kSKdhL5I9cp7KB3g"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"nrh2o6uXpqoTUHzM"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"YKlwm8KEsFVqf6AP"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"JI9X9P7zmp6yhAzH"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"xzEci9EoeNCv1kFv"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"MbXRTzvbWIQPCRoi"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"ms9XhI8c80rhJRDU"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"mr51wYcrh6cYYYdC"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"4ePqTAGKX1DWPD9W"}
{"name":"Services","path":["dev","documentation","api","Services"],"data":"\n# Documentation Services\n\n---\n\n```js\nimport fs from 'fs'\n```\n","type":"md","_id":"Q3SaKp2kfMVGh2AE"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"tkR3vta0hIqIEDT7"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"cSbAK4WN5rJdFJPp"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"v19TjFdDqHDpVH4q"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"1XV3E0cF4BNmIXLQ"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"7EMHFP7GxyFDjVID"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"y0HWK6qUp5x408wj"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"pLlFQhOFE3TwRBUj"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"kgerS7QtdIpPYzQs"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"T93TAnhtZpvc3hKC"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"A5bxFRS3x1IYtmHk"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"GncS9jVPV5nFRHlB"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"frH1zOgSQrpJRs3p"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"pGH4WAoLVCSvpzEU"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"WpmFhHzVNwkecLNG"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"50t6zrbKpGTs2pqj"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"4gcGIz28WQYVWj66"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"RQysm59vhsOQJ0t4"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"anVaJjtQdS1EdmZx"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"56qI6kQvJtU5aGxI"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"ozAEn4mB7OVskgtT"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"EqKPdDUyIano4A2w"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"Vk1y2YiRnkiVqpl3"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"XHmkbcfs5GaHgOJK"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"bVkjyvgcFW9BW0Rh"}
{"$$deleted":true,"_id":"1XV3E0cF4BNmIXLQ"}
{"$$deleted":true,"_id":"4ePqTAGKX1DWPD9W"}
{"$$deleted":true,"_id":"4gcGIz28WQYVWj66"}
{"$$deleted":true,"_id":"50t6zrbKpGTs2pqj"}
{"$$deleted":true,"_id":"56qI6kQvJtU5aGxI"}
{"$$deleted":true,"_id":"7EMHFP7GxyFDjVID"}
{"$$deleted":true,"_id":"A5bxFRS3x1IYtmHk"}
{"$$deleted":true,"_id":"EqKPdDUyIano4A2w"}
{"$$deleted":true,"_id":"GncS9jVPV5nFRHlB"}
{"$$deleted":true,"_id":"JI9X9P7zmp6yhAzH"}
{"$$deleted":true,"_id":"MbXRTzvbWIQPCRoi"}
{"$$deleted":true,"_id":"Q3SaKp2kfMVGh2AE"}
{"$$deleted":true,"_id":"RQysm59vhsOQJ0t4"}
{"$$deleted":true,"_id":"T93TAnhtZpvc3hKC"}
{"$$deleted":true,"_id":"Vk1y2YiRnkiVqpl3"}
{"$$deleted":true,"_id":"WpmFhHzVNwkecLNG"}
{"$$deleted":true,"_id":"XHmkbcfs5GaHgOJK"}
{"$$deleted":true,"_id":"YKlwm8KEsFVqf6AP"}
{"$$deleted":true,"_id":"anVaJjtQdS1EdmZx"}
{"$$deleted":true,"_id":"bVkjyvgcFW9BW0Rh"}
{"$$deleted":true,"_id":"cSbAK4WN5rJdFJPp"}
{"$$deleted":true,"_id":"frH1zOgSQrpJRs3p"}
{"$$deleted":true,"_id":"kSKdhL5I9cp7KB3g"}
{"$$deleted":true,"_id":"kgerS7QtdIpPYzQs"}
{"$$deleted":true,"_id":"mr51wYcrh6cYYYdC"}
{"$$deleted":true,"_id":"ms9XhI8c80rhJRDU"}
{"$$deleted":true,"_id":"nrh2o6uXpqoTUHzM"}
{"$$deleted":true,"_id":"nvRDAbpVYOnT6wd1"}
{"$$deleted":true,"_id":"ozAEn4mB7OVskgtT"}
{"$$deleted":true,"_id":"pGH4WAoLVCSvpzEU"}
{"$$deleted":true,"_id":"pLlFQhOFE3TwRBUj"}
{"$$deleted":true,"_id":"tkR3vta0hIqIEDT7"}
{"$$deleted":true,"_id":"v19TjFdDqHDpVH4q"}
{"$$deleted":true,"_id":"xzEci9EoeNCv1kFv"}
{"$$deleted":true,"_id":"y0HWK6qUp5x408wj"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"tA8wqK8R53cUGOBh"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"Rxabwi4C9RkiaDJA"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"fusL8cAZ4Javh7Mu"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"m9si4PU1zIW6qkCD"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"eUzUj0RI7A5wUsId"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"G65Pdr33sR0fBNW8"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"u8WrbI2UnCswSFZc"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"N6NqiITJ7lL5OnBB"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"PJdWE96yNxPYpqMw"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"8EOULduOYCLadjLM"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"mbToWfR9gtNAH9C2"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"AI6XL0hyWrZAkVIJ"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"iWikREJrCrR73qhY"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"hpzxpNPNLcMyYpKp"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"4CBjUawjGD6XScEG"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"Vr1sj0Ak4FO5TZ0l"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"81zsE2w0zcf5PjtA"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"5mH4l5XsuVEo7Fzo"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"4zPMnDsA6JhfyYqr"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"KZmxnbbvfbrYNCEE"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"r6gAq3m7pMWXsIje"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"JL3kFJSPp2BnKfzn"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"drQY870jnU0nh4ET"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"bbEEFTcoXLVoKE1F"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"bkQI4ptXq1QDMfY0"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"dpQsb488OWvxOOUw"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"V8jJg8vvQHg1vK0w"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"QZWxAdWBEg7FfOkm"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"aX9QTh9kYlX8BMqy"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"qYpxBZGdwok60EhH"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"BLToBsVcYZHAAD4P"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"1r90Rj7hYmm4sJse"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"P5oVbBRKPbeSqhZH"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"toDgLB4dyghUUBP7"}
{"$$deleted":true,"_id":"1r90Rj7hYmm4sJse"}
{"$$deleted":true,"_id":"4CBjUawjGD6XScEG"}
{"$$deleted":true,"_id":"4zPMnDsA6JhfyYqr"}
{"$$deleted":true,"_id":"5mH4l5XsuVEo7Fzo"}
{"$$deleted":true,"_id":"81zsE2w0zcf5PjtA"}
{"$$deleted":true,"_id":"8EOULduOYCLadjLM"}
{"$$deleted":true,"_id":"AI6XL0hyWrZAkVIJ"}
{"$$deleted":true,"_id":"BLToBsVcYZHAAD4P"}
{"$$deleted":true,"_id":"G65Pdr33sR0fBNW8"}
{"$$deleted":true,"_id":"JL3kFJSPp2BnKfzn"}
{"$$deleted":true,"_id":"KZmxnbbvfbrYNCEE"}
{"$$deleted":true,"_id":"N6NqiITJ7lL5OnBB"}
{"$$deleted":true,"_id":"P5oVbBRKPbeSqhZH"}
{"$$deleted":true,"_id":"PJdWE96yNxPYpqMw"}
{"$$deleted":true,"_id":"QZWxAdWBEg7FfOkm"}
{"$$deleted":true,"_id":"Rxabwi4C9RkiaDJA"}
{"$$deleted":true,"_id":"V8jJg8vvQHg1vK0w"}
{"$$deleted":true,"_id":"Vr1sj0Ak4FO5TZ0l"}
{"$$deleted":true,"_id":"aX9QTh9kYlX8BMqy"}
{"$$deleted":true,"_id":"bbEEFTcoXLVoKE1F"}
{"$$deleted":true,"_id":"bkQI4ptXq1QDMfY0"}
{"$$deleted":true,"_id":"dpQsb488OWvxOOUw"}
{"$$deleted":true,"_id":"drQY870jnU0nh4ET"}
{"$$deleted":true,"_id":"eUzUj0RI7A5wUsId"}
{"$$deleted":true,"_id":"fusL8cAZ4Javh7Mu"}
{"$$deleted":true,"_id":"hpzxpNPNLcMyYpKp"}
{"$$deleted":true,"_id":"iWikREJrCrR73qhY"}
{"$$deleted":true,"_id":"m9si4PU1zIW6qkCD"}
{"$$deleted":true,"_id":"mbToWfR9gtNAH9C2"}
{"$$deleted":true,"_id":"qYpxBZGdwok60EhH"}
{"$$deleted":true,"_id":"r6gAq3m7pMWXsIje"}
{"$$deleted":true,"_id":"tA8wqK8R53cUGOBh"}
{"$$deleted":true,"_id":"toDgLB4dyghUUBP7"}
{"$$deleted":true,"_id":"u8WrbI2UnCswSFZc"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"Owdic0BNK8xPYrQT"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"kwW4Az9KCpc0U2yu"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"nBZAb9DKYjmNzCqS"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"fxexdnlYUUEPqORv"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"cF5kAMT3uMgr7CG5"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"NbmqqWAiHPLLky3v"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"jv7WWVt2FbuRNhet"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"UkZyUDosTxwMm3hh"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"eeOYtF0mJ2teRxYU"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"g52LaeaEW1FKAPqz"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"ObKhsT0xNfPLY14c"}
{"name":"service-view","path":["react","app","service-view"],"data":"","type":"md","_id":"ozMVlEpGWR7MNvMA"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"J5BtPQDFHKpsS9uj"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"IVeqEClrQNA1KNvD"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"BO3Gwp8oKKGJX3l0"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"6Vm6AtAtV1gZ30nR"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"vXkMhiRbQsfKzHx9"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"C6MH4LqDqVf3NSau"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"8OV25vPZNSB4vfDJ"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"XRQclomCGcXFMM7s"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"XNW4cRhNTL6blpcN"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"q8zM47LbKBLpWI8B"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"Ex1kI0RD0eFJjU3W"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"3ZydU5hkSWyvgLCD"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"8WOItMy77uaLshr2"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"p2PnKndcqtKERH6L"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"EG31QHVp1B4uC5qo"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"NpmF2wlkbDg8o4dr"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"KmpCc0TSlZ7nTTHI"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"iNAAqNtfyyiJpQGC"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"7p0K7W5JaQThIC8f"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"3LsqSiuYV2k7SoF5"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"zAYh5oquBV9nfUX6"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"8UQiDQGhKCVkVega"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"iXsfmfhyQ9M1peea"}
{"$$deleted":true,"_id":"3LsqSiuYV2k7SoF5"}
{"$$deleted":true,"_id":"3ZydU5hkSWyvgLCD"}
{"$$deleted":true,"_id":"6Vm6AtAtV1gZ30nR"}
{"$$deleted":true,"_id":"7p0K7W5JaQThIC8f"}
{"$$deleted":true,"_id":"8OV25vPZNSB4vfDJ"}
{"$$deleted":true,"_id":"8UQiDQGhKCVkVega"}
{"$$deleted":true,"_id":"8WOItMy77uaLshr2"}
{"$$deleted":true,"_id":"BO3Gwp8oKKGJX3l0"}
{"$$deleted":true,"_id":"C6MH4LqDqVf3NSau"}
{"$$deleted":true,"_id":"EG31QHVp1B4uC5qo"}
{"$$deleted":true,"_id":"Ex1kI0RD0eFJjU3W"}
{"$$deleted":true,"_id":"IVeqEClrQNA1KNvD"}
{"$$deleted":true,"_id":"J5BtPQDFHKpsS9uj"}
{"$$deleted":true,"_id":"KmpCc0TSlZ7nTTHI"}
{"$$deleted":true,"_id":"NbmqqWAiHPLLky3v"}
{"$$deleted":true,"_id":"NpmF2wlkbDg8o4dr"}
{"$$deleted":true,"_id":"ObKhsT0xNfPLY14c"}
{"$$deleted":true,"_id":"Owdic0BNK8xPYrQT"}
{"$$deleted":true,"_id":"UkZyUDosTxwMm3hh"}
{"$$deleted":true,"_id":"XNW4cRhNTL6blpcN"}
{"$$deleted":true,"_id":"XRQclomCGcXFMM7s"}
{"$$deleted":true,"_id":"cF5kAMT3uMgr7CG5"}
{"$$deleted":true,"_id":"eeOYtF0mJ2teRxYU"}
{"$$deleted":true,"_id":"fxexdnlYUUEPqORv"}
{"$$deleted":true,"_id":"g52LaeaEW1FKAPqz"}
{"$$deleted":true,"_id":"iNAAqNtfyyiJpQGC"}
{"$$deleted":true,"_id":"iXsfmfhyQ9M1peea"}
{"$$deleted":true,"_id":"jv7WWVt2FbuRNhet"}
{"$$deleted":true,"_id":"kwW4Az9KCpc0U2yu"}
{"$$deleted":true,"_id":"nBZAb9DKYjmNzCqS"}
{"$$deleted":true,"_id":"ozMVlEpGWR7MNvMA"}
{"$$deleted":true,"_id":"p2PnKndcqtKERH6L"}
{"$$deleted":true,"_id":"q8zM47LbKBLpWI8B"}
{"$$deleted":true,"_id":"vXkMhiRbQsfKzHx9"}
{"$$deleted":true,"_id":"zAYh5oquBV9nfUX6"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"GWnG3hbA4awDeKyv"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"D68WTuyZBOjGvci4"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"9YCFR8B6Mj3qLWHl"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"pUeJybfe177OUVN7"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"m3uFHfNH1R5XHcXg"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"pAGtWLex447p1vsL"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"rDPCPdZEGrzr8N4j"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"7axjGhRncss10ABc"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"3GRPuBQ901Vg6YG2"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"pmyf9qfMsDaY6POv"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"k3j1wT2eOU1NgMkE"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n","type":"md","_id":"WI5AnKymSEZgTM2V"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"5shMeeCxAbvck5RC"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"iYn6RWPBrVdj7ifh"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"JbfIVNALKpibOndG"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"WUZr2w4BhhpxCFrZ"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"lcuI6e5Kzlh7oenq"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"JZuWop8KBmBUV5UZ"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"H67ykoVtoTKkkL2W"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"xyjTkrVAJYmfsTNU"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"VXSVef1GWiVPejJW"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"rnNqoxWuN6p3ASDJ"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"WDn7EXCOT4PdBFSO"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"A83TDnbOsAo0VjmE"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"c9iC9ss0Oj7NUCOW"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"u4aziVbdNRzYQtxU"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"zWyaJB8XmteJoqDW"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"CNIBmDyUiE5tsXi6"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"NyUmG6LC8gDzzKN8"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"BDnFgyLLKcG2QjqE"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"tFEbA3LcGvSLHtCD"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"ZyCdT5blY9GlA6kQ"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"ORnfckcoKOLxxN21"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"6P0jn3pzv1v0ckzp"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"KvyJvV8Gwf8ZyR7b"}
{"$$deleted":true,"_id":"3GRPuBQ901Vg6YG2"}
{"$$deleted":true,"_id":"5shMeeCxAbvck5RC"}
{"$$deleted":true,"_id":"6P0jn3pzv1v0ckzp"}
{"$$deleted":true,"_id":"7axjGhRncss10ABc"}
{"$$deleted":true,"_id":"9YCFR8B6Mj3qLWHl"}
{"$$deleted":true,"_id":"A83TDnbOsAo0VjmE"}
{"$$deleted":true,"_id":"BDnFgyLLKcG2QjqE"}
{"$$deleted":true,"_id":"CNIBmDyUiE5tsXi6"}
{"$$deleted":true,"_id":"D68WTuyZBOjGvci4"}
{"$$deleted":true,"_id":"GWnG3hbA4awDeKyv"}
{"$$deleted":true,"_id":"H67ykoVtoTKkkL2W"}
{"$$deleted":true,"_id":"JZuWop8KBmBUV5UZ"}
{"$$deleted":true,"_id":"JbfIVNALKpibOndG"}
{"$$deleted":true,"_id":"KvyJvV8Gwf8ZyR7b"}
{"$$deleted":true,"_id":"NyUmG6LC8gDzzKN8"}
{"$$deleted":true,"_id":"ORnfckcoKOLxxN21"}
{"$$deleted":true,"_id":"VXSVef1GWiVPejJW"}
{"$$deleted":true,"_id":"WDn7EXCOT4PdBFSO"}
{"$$deleted":true,"_id":"WI5AnKymSEZgTM2V"}
{"$$deleted":true,"_id":"WUZr2w4BhhpxCFrZ"}
{"$$deleted":true,"_id":"ZyCdT5blY9GlA6kQ"}
{"$$deleted":true,"_id":"c9iC9ss0Oj7NUCOW"}
{"$$deleted":true,"_id":"iYn6RWPBrVdj7ifh"}
{"$$deleted":true,"_id":"k3j1wT2eOU1NgMkE"}
{"$$deleted":true,"_id":"lcuI6e5Kzlh7oenq"}
{"$$deleted":true,"_id":"m3uFHfNH1R5XHcXg"}
{"$$deleted":true,"_id":"pAGtWLex447p1vsL"}
{"$$deleted":true,"_id":"pUeJybfe177OUVN7"}
{"$$deleted":true,"_id":"pmyf9qfMsDaY6POv"}
{"$$deleted":true,"_id":"rDPCPdZEGrzr8N4j"}
{"$$deleted":true,"_id":"rnNqoxWuN6p3ASDJ"}
{"$$deleted":true,"_id":"tFEbA3LcGvSLHtCD"}
{"$$deleted":true,"_id":"u4aziVbdNRzYQtxU"}
{"$$deleted":true,"_id":"xyjTkrVAJYmfsTNU"}
{"$$deleted":true,"_id":"zWyaJB8XmteJoqDW"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"AGPJxRHWdOkipza1"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"Yiifs1NT7Mewa0mJ"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"fXxtX6pTnCjmXc1T"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"z7EpwyKMieMNMSxV"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"gS3oRjfU3qH417RL"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"33NKKfh8D0GieK9Z"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"r6YwQ7xBQwuq9W9C"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"sYYexh18u9dtrliN"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"DKlSFHMGbPIyiwaO"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"LQ3cdanqmylUoQ2i"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"zqm90zKbXvQ7RwOT"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"VJ2prLAeoxYOJBW0"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"by1PwefYxmxW74mh"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"Lk8sxd948i7i8Mbb"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"wPvYREuy2kqIxeDR"}
{"name":"display","path":["react","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"mavPxqoIwa8LCIjx"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"68gkvzEMhrCCiNkz"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"yUfZcMzRIzgkisMA"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"rprCtdH1DXlRoZJA"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"zA8KSyfezcRJEhsU"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"pdCjE5h19Y0zIbR4"}
{"name":"form","path":["react","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"akg6HpR8kebTQv0W"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"blpJrzCcVFCOZ3Gq"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"1Rk04M9uUUkitKga"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"pPyIxNCOfojAavle"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"2DJWWUxgrTsx5odp"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"Vwtnzsq4gG7JBiIR"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"xqzRyxAj978XGyQm"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"wmsfIRmGLascY0X5"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"6IJBK6XnkiaJho69"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"HVhOg7uiZSD4GxQA"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"uF6MgyMsC7CgbKcq"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"Pse4CkKn82mG4yeX"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"mddasNI5QrEql7Gt"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"9LEkqpVp02Z5Zr8W"}
{"$$deleted":true,"_id":"1Rk04M9uUUkitKga"}
{"$$deleted":true,"_id":"2DJWWUxgrTsx5odp"}
{"$$deleted":true,"_id":"33NKKfh8D0GieK9Z"}
{"$$deleted":true,"_id":"68gkvzEMhrCCiNkz"}
{"$$deleted":true,"_id":"6IJBK6XnkiaJho69"}
{"$$deleted":true,"_id":"9LEkqpVp02Z5Zr8W"}
{"$$deleted":true,"_id":"AGPJxRHWdOkipza1"}
{"$$deleted":true,"_id":"DKlSFHMGbPIyiwaO"}
{"$$deleted":true,"_id":"HVhOg7uiZSD4GxQA"}
{"$$deleted":true,"_id":"LQ3cdanqmylUoQ2i"}
{"$$deleted":true,"_id":"Lk8sxd948i7i8Mbb"}
{"$$deleted":true,"_id":"Pse4CkKn82mG4yeX"}
{"$$deleted":true,"_id":"VJ2prLAeoxYOJBW0"}
{"$$deleted":true,"_id":"Vwtnzsq4gG7JBiIR"}
{"$$deleted":true,"_id":"Yiifs1NT7Mewa0mJ"}
{"$$deleted":true,"_id":"akg6HpR8kebTQv0W"}
{"$$deleted":true,"_id":"blpJrzCcVFCOZ3Gq"}
{"$$deleted":true,"_id":"by1PwefYxmxW74mh"}
{"$$deleted":true,"_id":"fXxtX6pTnCjmXc1T"}
{"$$deleted":true,"_id":"gS3oRjfU3qH417RL"}
{"$$deleted":true,"_id":"mavPxqoIwa8LCIjx"}
{"$$deleted":true,"_id":"mddasNI5QrEql7Gt"}
{"$$deleted":true,"_id":"pPyIxNCOfojAavle"}
{"$$deleted":true,"_id":"pdCjE5h19Y0zIbR4"}
{"$$deleted":true,"_id":"r6YwQ7xBQwuq9W9C"}
{"$$deleted":true,"_id":"rprCtdH1DXlRoZJA"}
{"$$deleted":true,"_id":"sYYexh18u9dtrliN"}
{"$$deleted":true,"_id":"uF6MgyMsC7CgbKcq"}
{"$$deleted":true,"_id":"wPvYREuy2kqIxeDR"}
{"$$deleted":true,"_id":"wmsfIRmGLascY0X5"}
{"$$deleted":true,"_id":"xqzRyxAj978XGyQm"}
{"$$deleted":true,"_id":"yUfZcMzRIzgkisMA"}
{"$$deleted":true,"_id":"z7EpwyKMieMNMSxV"}
{"$$deleted":true,"_id":"zA8KSyfezcRJEhsU"}
{"$$deleted":true,"_id":"zqm90zKbXvQ7RwOT"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"xVqr8d2bRrlpMeej"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"hQKsfGNkJd8CxHYb"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"sfh8Zec6ByB3cErS"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"9M6ZFtvd9K2PMiAB"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"qo0PR0Fr2rLgcTt8"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"RTUmRF0HJpO0LEbo"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"kxGy9Tv3qIrgb3vu"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"4Jf1rJouTB3Hkdzh"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"CKunlkXhFIWBR0Ic"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"kMXaXxFgq36zBTVT"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"HDWdtmv99GWsM4Ay"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"C7mRjxd25hBCJWPl"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"Uttkjhnpf4RwIPJu"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"rYsixIo8Z2jL1ezx"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"pj1XE6fKDlxj9Uut"}
{"name":"form","path":["react","data-form","form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"mQ6BeorEOfpz1607"}
{"name":"display","path":["react","data-view","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"U7GfNR1ti8LtsFJs"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"LE5w7HozBVPpRXTV"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"4qjhQgGapHuxZ85i"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"pa3jI1mdyBtYhuxK"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"271iHm4xL9vediTM"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"4BdPHy0rDHsWF60t"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"Aydv5buzVI8VhIRN"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"aDTBva4x1TScQlxA"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"TzUNX6yJt8vCDf6f"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"isypCjmSrIMOz4Uo"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"nVUU9gpGNTJbstCN"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"WzFF2crpUuAkVtld"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"SW8A2dOdHkUhOFRK"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"Gcy6WNYxJfncUGEp"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"1Ha7SKL6mStirVOt"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"3WNQwiU30CTABs6E"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"Ka3Xs5andagpoJsg"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"bDb5sa1zXCJ2b4I1"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"6YCh79qeobd9wIXv"}
{"$$deleted":true,"_id":"1Ha7SKL6mStirVOt"}
{"$$deleted":true,"_id":"271iHm4xL9vediTM"}
{"$$deleted":true,"_id":"3WNQwiU30CTABs6E"}
{"$$deleted":true,"_id":"4BdPHy0rDHsWF60t"}
{"$$deleted":true,"_id":"4Jf1rJouTB3Hkdzh"}
{"$$deleted":true,"_id":"4qjhQgGapHuxZ85i"}
{"$$deleted":true,"_id":"6YCh79qeobd9wIXv"}
{"$$deleted":true,"_id":"9M6ZFtvd9K2PMiAB"}
{"$$deleted":true,"_id":"Aydv5buzVI8VhIRN"}
{"$$deleted":true,"_id":"C7mRjxd25hBCJWPl"}
{"$$deleted":true,"_id":"CKunlkXhFIWBR0Ic"}
{"$$deleted":true,"_id":"Gcy6WNYxJfncUGEp"}
{"$$deleted":true,"_id":"HDWdtmv99GWsM4Ay"}
{"$$deleted":true,"_id":"Ka3Xs5andagpoJsg"}
{"$$deleted":true,"_id":"LE5w7HozBVPpRXTV"}
{"$$deleted":true,"_id":"RTUmRF0HJpO0LEbo"}
{"$$deleted":true,"_id":"SW8A2dOdHkUhOFRK"}
{"$$deleted":true,"_id":"TzUNX6yJt8vCDf6f"}
{"$$deleted":true,"_id":"U7GfNR1ti8LtsFJs"}
{"$$deleted":true,"_id":"Uttkjhnpf4RwIPJu"}
{"$$deleted":true,"_id":"WzFF2crpUuAkVtld"}
{"$$deleted":true,"_id":"aDTBva4x1TScQlxA"}
{"$$deleted":true,"_id":"bDb5sa1zXCJ2b4I1"}
{"$$deleted":true,"_id":"hQKsfGNkJd8CxHYb"}
{"$$deleted":true,"_id":"isypCjmSrIMOz4Uo"}
{"$$deleted":true,"_id":"kMXaXxFgq36zBTVT"}
{"$$deleted":true,"_id":"kxGy9Tv3qIrgb3vu"}
{"$$deleted":true,"_id":"mQ6BeorEOfpz1607"}
{"$$deleted":true,"_id":"nVUU9gpGNTJbstCN"}
{"$$deleted":true,"_id":"pa3jI1mdyBtYhuxK"}
{"$$deleted":true,"_id":"pj1XE6fKDlxj9Uut"}
{"$$deleted":true,"_id":"qo0PR0Fr2rLgcTt8"}
{"$$deleted":true,"_id":"rYsixIo8Z2jL1ezx"}
{"$$deleted":true,"_id":"sfh8Zec6ByB3cErS"}
{"$$deleted":true,"_id":"xVqr8d2bRrlpMeej"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"pFOEIxUgvG5NlTiK"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"oMs8F4DZPXsPWDYJ"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"iPJsmt5VqNWNFZY9"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"lYgmWGIw0Zsayn1w"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"s4d2w60e5z9umb4t"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"dQN9TPyaaF4v6CBB"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"powBpeVl25A8X7Xb"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"8FSdaF07cFYkIcXO"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"Otu55fwr2jfsgVl5"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"xkVHafvaJCHwmmB9"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"mWjYY5FNayNtvWWm"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"pY6ZFk5q58CIagiY"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"aEEoeXeBEvLWL31P"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"5XdG7qTVfJc4Ag4T"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"EoriNGvWJKw024wC"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"HFV9ITDiG8UQoZVj"}
{"name":"display","path":["react","data-view","display"],"data":"\n\n# Display Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"oGnLXftuCmo7rJon"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"Mv0ZIdrunuoztBsz"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"SKqjbhpxKe68rb1P"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"jEH22WThsqH5Rfw0"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"Lg00jWTrt6UbJp5w"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"kXgsEF6fORlvpsSE"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"FGsX2LoYlHsXVi4D"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"Dh0BW62nhjN4yHtT"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"wrq6zsbJUSXHeRHL"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"2AfdwtJ49e4sNwM7"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"k8In5Hy58ONY9cJq"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"8kclM7BX4F9MYdXM"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"RBkklQs7yOX1g5G3"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"Bcht1t34dbbWzxpB"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"WIHpArR3NyCM10Vr"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"IAXVDKhv6DjNdjsb"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"gcfHFnX1MNJ5gWZ4"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"upkPuiY3pVBafJe8"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"LEFLhlJIgME4NMHB"}
{"$$deleted":true,"_id":"2AfdwtJ49e4sNwM7"}
{"$$deleted":true,"_id":"5XdG7qTVfJc4Ag4T"}
{"$$deleted":true,"_id":"8FSdaF07cFYkIcXO"}
{"$$deleted":true,"_id":"8kclM7BX4F9MYdXM"}
{"$$deleted":true,"_id":"Bcht1t34dbbWzxpB"}
{"$$deleted":true,"_id":"Dh0BW62nhjN4yHtT"}
{"$$deleted":true,"_id":"EoriNGvWJKw024wC"}
{"$$deleted":true,"_id":"FGsX2LoYlHsXVi4D"}
{"$$deleted":true,"_id":"HFV9ITDiG8UQoZVj"}
{"$$deleted":true,"_id":"IAXVDKhv6DjNdjsb"}
{"$$deleted":true,"_id":"LEFLhlJIgME4NMHB"}
{"$$deleted":true,"_id":"Lg00jWTrt6UbJp5w"}
{"$$deleted":true,"_id":"Mv0ZIdrunuoztBsz"}
{"$$deleted":true,"_id":"Otu55fwr2jfsgVl5"}
{"$$deleted":true,"_id":"RBkklQs7yOX1g5G3"}
{"$$deleted":true,"_id":"SKqjbhpxKe68rb1P"}
{"$$deleted":true,"_id":"WIHpArR3NyCM10Vr"}
{"$$deleted":true,"_id":"aEEoeXeBEvLWL31P"}
{"$$deleted":true,"_id":"dQN9TPyaaF4v6CBB"}
{"$$deleted":true,"_id":"gcfHFnX1MNJ5gWZ4"}
{"$$deleted":true,"_id":"iPJsmt5VqNWNFZY9"}
{"$$deleted":true,"_id":"jEH22WThsqH5Rfw0"}
{"$$deleted":true,"_id":"k8In5Hy58ONY9cJq"}
{"$$deleted":true,"_id":"kXgsEF6fORlvpsSE"}
{"$$deleted":true,"_id":"lYgmWGIw0Zsayn1w"}
{"$$deleted":true,"_id":"mWjYY5FNayNtvWWm"}
{"$$deleted":true,"_id":"oGnLXftuCmo7rJon"}
{"$$deleted":true,"_id":"oMs8F4DZPXsPWDYJ"}
{"$$deleted":true,"_id":"pFOEIxUgvG5NlTiK"}
{"$$deleted":true,"_id":"pY6ZFk5q58CIagiY"}
{"$$deleted":true,"_id":"powBpeVl25A8X7Xb"}
{"$$deleted":true,"_id":"s4d2w60e5z9umb4t"}
{"$$deleted":true,"_id":"upkPuiY3pVBafJe8"}
{"$$deleted":true,"_id":"wrq6zsbJUSXHeRHL"}
{"$$deleted":true,"_id":"xkVHafvaJCHwmmB9"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"45A9tiKgwM2pjScK"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"1Ai2kEcGiFhkXwFa"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"YZ519Cn5az9F3cVV"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"40URelzTJgmW2e9y"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"eK5M0ynXOZK356pI"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"4ybyGKQDFxMIbAeF"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"feMmcfOzkREwrQW1"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"w4RJYb0Xw4EZMq5s"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"N8XVt8yBEMLs9hh4"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"KfdtcGUi6LxEN8SP"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"xUlYDEemf2SWvBDM"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"0EeeKCfngSuautSz"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"ZoTR5YIhSVuwNsbt"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"6PM2l42XsbsE4qgd"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"N73q8zF92YP9hv6x"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"hHPx9SAlCOMnFIfY"}
{"name":"display","path":["react","data-view","display"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"uTQ591Cv40xRrVUO"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"2Va3QyzuUJHCNheH"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"15lFJBLQgy4eQti8"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"pwRoHVULSY0HanxP"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"PUqAmfFHljqloigT"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"NRRWPQ7QnUHEM0m2"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"HGBth2FpltC3IZK1"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"3egF83CnAWhxDckW"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"m1IRZZA5KKPW1BGr"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"DYwNkev2ykU9ducE"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"93zT0Djh2wTPxjDo"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"9jz81v0BejfPJheU"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"VnAUP2kwLJnpAsE8"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"Vqpuerbcn4FXe8y1"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"4cidyrrfVApheKOE"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"CJJsnnuMSa2Wzeef"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"O8CRnsmdA7WZFCmG"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"bxDijtuMu6mEOBPm"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"MXtnMhYhSff1WfuW"}
{"$$deleted":true,"_id":"0EeeKCfngSuautSz"}
{"$$deleted":true,"_id":"15lFJBLQgy4eQti8"}
{"$$deleted":true,"_id":"1Ai2kEcGiFhkXwFa"}
{"$$deleted":true,"_id":"2Va3QyzuUJHCNheH"}
{"$$deleted":true,"_id":"3egF83CnAWhxDckW"}
{"$$deleted":true,"_id":"40URelzTJgmW2e9y"}
{"$$deleted":true,"_id":"45A9tiKgwM2pjScK"}
{"$$deleted":true,"_id":"4cidyrrfVApheKOE"}
{"$$deleted":true,"_id":"4ybyGKQDFxMIbAeF"}
{"$$deleted":true,"_id":"6PM2l42XsbsE4qgd"}
{"$$deleted":true,"_id":"93zT0Djh2wTPxjDo"}
{"$$deleted":true,"_id":"9jz81v0BejfPJheU"}
{"$$deleted":true,"_id":"CJJsnnuMSa2Wzeef"}
{"$$deleted":true,"_id":"DYwNkev2ykU9ducE"}
{"$$deleted":true,"_id":"HGBth2FpltC3IZK1"}
{"$$deleted":true,"_id":"KfdtcGUi6LxEN8SP"}
{"$$deleted":true,"_id":"MXtnMhYhSff1WfuW"}
{"$$deleted":true,"_id":"N73q8zF92YP9hv6x"}
{"$$deleted":true,"_id":"N8XVt8yBEMLs9hh4"}
{"$$deleted":true,"_id":"NRRWPQ7QnUHEM0m2"}
{"$$deleted":true,"_id":"O8CRnsmdA7WZFCmG"}
{"$$deleted":true,"_id":"PUqAmfFHljqloigT"}
{"$$deleted":true,"_id":"VnAUP2kwLJnpAsE8"}
{"$$deleted":true,"_id":"Vqpuerbcn4FXe8y1"}
{"$$deleted":true,"_id":"YZ519Cn5az9F3cVV"}
{"$$deleted":true,"_id":"ZoTR5YIhSVuwNsbt"}
{"$$deleted":true,"_id":"bxDijtuMu6mEOBPm"}
{"$$deleted":true,"_id":"eK5M0ynXOZK356pI"}
{"$$deleted":true,"_id":"feMmcfOzkREwrQW1"}
{"$$deleted":true,"_id":"hHPx9SAlCOMnFIfY"}
{"$$deleted":true,"_id":"m1IRZZA5KKPW1BGr"}
{"$$deleted":true,"_id":"pwRoHVULSY0HanxP"}
{"$$deleted":true,"_id":"uTQ591Cv40xRrVUO"}
{"$$deleted":true,"_id":"w4RJYb0Xw4EZMq5s"}
{"$$deleted":true,"_id":"xUlYDEemf2SWvBDM"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"5rVwSFLZDRrvlBON"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"YGdbAOeVu0E5PzDD"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"6d5tNBmJXmGS42Sz"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"ojUlN9qd9g7wKvEx"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"ggnqKYc0VRHW7k9L"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"ebujbvZBRFPNh2CI"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"24ONXVzFXGefAgYB"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"ZChxlOO3v6XlGXrH"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"Cre2C1VMn1n4rslc"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"2gjpcef26gTEh2bL"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"GOMNJS8sZah7HuF1"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"Of2dLxKnBjO1ND2Z"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"VIbEViJOqxOJlai5"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"ppqS6xG9zSFND5Rn"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"xHsxbwagItNVQNUC"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"KJyf3ARI3LZhIftq"}
{"name":"display","path":["react","data-view","display"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"39HMxqegc8isFQA9"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"aVRPqyg4zYK4kJms"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"xjve4qoZrjN1eTGp"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"i8g4jEBoZrweCrvE"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"ZOO3StEXKW1Jkwv1"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"YL7Z0QF1HAX2tCDQ"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"FTpiQ1D5SsXTrz8z"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"F18p8RG69eOPkiPO"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"EOAlaNonxXsAXsWQ"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"lwtGU0rBVheljGLf"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"gst7sd1kAqQDQ60w"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"18mvjGh1tzTMwJRr"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"7bewd9nhMGQumjh4"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"JKrmEoYKUO2ftxab"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"g8IyY19tzznBOg9d"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"sSqFA6ATUFlllTcn"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"S9GZaMzfLD1ewKhc"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"BzPzjRGxUehEwYbZ"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"7nPnAnsB44eOJE8a"}
{"$$deleted":true,"_id":"18mvjGh1tzTMwJRr"}
{"$$deleted":true,"_id":"24ONXVzFXGefAgYB"}
{"$$deleted":true,"_id":"2gjpcef26gTEh2bL"}
{"$$deleted":true,"_id":"39HMxqegc8isFQA9"}
{"$$deleted":true,"_id":"5rVwSFLZDRrvlBON"}
{"$$deleted":true,"_id":"6d5tNBmJXmGS42Sz"}
{"$$deleted":true,"_id":"7bewd9nhMGQumjh4"}
{"$$deleted":true,"_id":"7nPnAnsB44eOJE8a"}
{"$$deleted":true,"_id":"BzPzjRGxUehEwYbZ"}
{"$$deleted":true,"_id":"Cre2C1VMn1n4rslc"}
{"$$deleted":true,"_id":"EOAlaNonxXsAXsWQ"}
{"$$deleted":true,"_id":"F18p8RG69eOPkiPO"}
{"$$deleted":true,"_id":"FTpiQ1D5SsXTrz8z"}
{"$$deleted":true,"_id":"GOMNJS8sZah7HuF1"}
{"$$deleted":true,"_id":"JKrmEoYKUO2ftxab"}
{"$$deleted":true,"_id":"KJyf3ARI3LZhIftq"}
{"$$deleted":true,"_id":"Of2dLxKnBjO1ND2Z"}
{"$$deleted":true,"_id":"S9GZaMzfLD1ewKhc"}
{"$$deleted":true,"_id":"VIbEViJOqxOJlai5"}
{"$$deleted":true,"_id":"YGdbAOeVu0E5PzDD"}
{"$$deleted":true,"_id":"YL7Z0QF1HAX2tCDQ"}
{"$$deleted":true,"_id":"ZChxlOO3v6XlGXrH"}
{"$$deleted":true,"_id":"ZOO3StEXKW1Jkwv1"}
{"$$deleted":true,"_id":"aVRPqyg4zYK4kJms"}
{"$$deleted":true,"_id":"ebujbvZBRFPNh2CI"}
{"$$deleted":true,"_id":"g8IyY19tzznBOg9d"}
{"$$deleted":true,"_id":"ggnqKYc0VRHW7k9L"}
{"$$deleted":true,"_id":"gst7sd1kAqQDQ60w"}
{"$$deleted":true,"_id":"i8g4jEBoZrweCrvE"}
{"$$deleted":true,"_id":"lwtGU0rBVheljGLf"}
{"$$deleted":true,"_id":"ojUlN9qd9g7wKvEx"}
{"$$deleted":true,"_id":"ppqS6xG9zSFND5Rn"}
{"$$deleted":true,"_id":"sSqFA6ATUFlllTcn"}
{"$$deleted":true,"_id":"xHsxbwagItNVQNUC"}
{"$$deleted":true,"_id":"xjve4qoZrjN1eTGp"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"lMHzrUjv3ABPEIQN"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"5SZ2ENgLcfpMKzJr"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"GPTbdV0qemcMHtxC"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"iTzm4LIBPbm8jNxv"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"Z48lYsgfbJes0HH4"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"QM3VAOR0bKxqCxm8"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"z8JodNuecEeWLN0B"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"LfIXbc36jqLBH0OY"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"XuSZHKu3VVCskwLU"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"N7dj81QJfsVLrtLz"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"yPEAQFyp2RRkeRX0"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"gCj94M6hx6l5clEm"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"pkTOXKz5fnl13uJe"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"pKzv07OdqfBirvam"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"gBKvPmYnr9RZVgSP"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"2mowHPfFxYH26wo7"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"GwIEZMUHPYPUrp08"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"UVxJjyLh8piKvXct"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"KUla7ZaBNPkNFAKc"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"7P3iaWbsa8Uke1dn"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"5RsWMB93Sj4QEHvT"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"D9jRDozIJQatLkYZ"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"itkpZ9lfLGMY64dB"}
{"name":"flex","path":["react","layout","flex"],"data":"","type":"md","_id":"uO83lIl7JIEWy7xv"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"LYIuD7pGYxQKJOrN"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"KJTHzOuxaX7wYKDY"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"orTuROVbAUkGDvs8"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"SKeCHeBMjKM9BURF"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"dHtMWQX3bIwtWB8W"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"KeRYZJvdqIF2q7qE"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"qdEMyJDuKajZcjio"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"jxIwj6IAnUKPC3Wh"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"alYDU6lLR12Kkcry"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"7AGKVz5sHlTlFxcV"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"bftVXFQWh3rMqesj"}
{"$$deleted":true,"_id":"2mowHPfFxYH26wo7"}
{"$$deleted":true,"_id":"5RsWMB93Sj4QEHvT"}
{"$$deleted":true,"_id":"5SZ2ENgLcfpMKzJr"}
{"$$deleted":true,"_id":"7AGKVz5sHlTlFxcV"}
{"$$deleted":true,"_id":"7P3iaWbsa8Uke1dn"}
{"$$deleted":true,"_id":"D9jRDozIJQatLkYZ"}
{"$$deleted":true,"_id":"GPTbdV0qemcMHtxC"}
{"$$deleted":true,"_id":"GwIEZMUHPYPUrp08"}
{"$$deleted":true,"_id":"KJTHzOuxaX7wYKDY"}
{"$$deleted":true,"_id":"KUla7ZaBNPkNFAKc"}
{"$$deleted":true,"_id":"KeRYZJvdqIF2q7qE"}
{"$$deleted":true,"_id":"LYIuD7pGYxQKJOrN"}
{"$$deleted":true,"_id":"LfIXbc36jqLBH0OY"}
{"$$deleted":true,"_id":"N7dj81QJfsVLrtLz"}
{"$$deleted":true,"_id":"QM3VAOR0bKxqCxm8"}
{"$$deleted":true,"_id":"SKeCHeBMjKM9BURF"}
{"$$deleted":true,"_id":"UVxJjyLh8piKvXct"}
{"$$deleted":true,"_id":"XuSZHKu3VVCskwLU"}
{"$$deleted":true,"_id":"Z48lYsgfbJes0HH4"}
{"$$deleted":true,"_id":"alYDU6lLR12Kkcry"}
{"$$deleted":true,"_id":"bftVXFQWh3rMqesj"}
{"$$deleted":true,"_id":"dHtMWQX3bIwtWB8W"}
{"$$deleted":true,"_id":"gBKvPmYnr9RZVgSP"}
{"$$deleted":true,"_id":"gCj94M6hx6l5clEm"}
{"$$deleted":true,"_id":"iTzm4LIBPbm8jNxv"}
{"$$deleted":true,"_id":"itkpZ9lfLGMY64dB"}
{"$$deleted":true,"_id":"jxIwj6IAnUKPC3Wh"}
{"$$deleted":true,"_id":"lMHzrUjv3ABPEIQN"}
{"$$deleted":true,"_id":"orTuROVbAUkGDvs8"}
{"$$deleted":true,"_id":"pKzv07OdqfBirvam"}
{"$$deleted":true,"_id":"pkTOXKz5fnl13uJe"}
{"$$deleted":true,"_id":"qdEMyJDuKajZcjio"}
{"$$deleted":true,"_id":"uO83lIl7JIEWy7xv"}
{"$$deleted":true,"_id":"yPEAQFyp2RRkeRX0"}
{"$$deleted":true,"_id":"z8JodNuecEeWLN0B"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"R1ENUmriq8EfWwmG"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"pK7KCuVaUCnznNBb"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"FaYSsv9T1mWzR9BW"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"qCJ0m5ts9bt9muYl"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"oOchksNkgJtnCTxH"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"Dz65NkBTSlGp5T3q"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"n2ioOEpmNzF5DNgv"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"1OHywzGhn8pZ33V7"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"jwE0QpCbQ2RlA5cn"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"GryPf4r9CFWCdpJm"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"B3tRNn41EnKXFg7p"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"QunJwlniorWmzULd"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"me18M8KolWDi9cPn"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"ewy4mhUoxUlGPVWq"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"WAFQzQCvzZ5A6Jy2"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"yMHkR1WpIsE4aK4T"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"0MNByPcvulOPETEr"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"FzzhXF6pLQFa7jhT"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"ZiHqBXZJTi2477eJ"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"DvYK6ovbjCoiFOIn"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"PsPTUcc6nqbsF7JN"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"6dzV1V5kePYscwbY"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"HcvpH5OK0QTEZZW0"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n","type":"md","_id":"IIx1UZwBqh819m4F"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"XWzeD8hscjvwXMCa"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"zqmmEXBZQSYwpdUk"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"3ejoSU2vVCZleHmg"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"f355hLJ5acAvFGUO"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"LsOb2haSDHtTRoF6"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"BcO2ESyvaKZ3DSuB"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"I1suRJxapZcg7k1m"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"cldYuEaXYo6m70Qz"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"aFbN9xw7pqN4zfsr"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"PpvdFMeSUuWEYhJN"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"SXTD2dc3HpR2iSKr"}
{"$$deleted":true,"_id":"0MNByPcvulOPETEr"}
{"$$deleted":true,"_id":"1OHywzGhn8pZ33V7"}
{"$$deleted":true,"_id":"3ejoSU2vVCZleHmg"}
{"$$deleted":true,"_id":"6dzV1V5kePYscwbY"}
{"$$deleted":true,"_id":"B3tRNn41EnKXFg7p"}
{"$$deleted":true,"_id":"BcO2ESyvaKZ3DSuB"}
{"$$deleted":true,"_id":"DvYK6ovbjCoiFOIn"}
{"$$deleted":true,"_id":"Dz65NkBTSlGp5T3q"}
{"$$deleted":true,"_id":"FaYSsv9T1mWzR9BW"}
{"$$deleted":true,"_id":"FzzhXF6pLQFa7jhT"}
{"$$deleted":true,"_id":"GryPf4r9CFWCdpJm"}
{"$$deleted":true,"_id":"HcvpH5OK0QTEZZW0"}
{"$$deleted":true,"_id":"I1suRJxapZcg7k1m"}
{"$$deleted":true,"_id":"IIx1UZwBqh819m4F"}
{"$$deleted":true,"_id":"LsOb2haSDHtTRoF6"}
{"$$deleted":true,"_id":"PpvdFMeSUuWEYhJN"}
{"$$deleted":true,"_id":"PsPTUcc6nqbsF7JN"}
{"$$deleted":true,"_id":"QunJwlniorWmzULd"}
{"$$deleted":true,"_id":"R1ENUmriq8EfWwmG"}
{"$$deleted":true,"_id":"SXTD2dc3HpR2iSKr"}
{"$$deleted":true,"_id":"WAFQzQCvzZ5A6Jy2"}
{"$$deleted":true,"_id":"XWzeD8hscjvwXMCa"}
{"$$deleted":true,"_id":"ZiHqBXZJTi2477eJ"}
{"$$deleted":true,"_id":"aFbN9xw7pqN4zfsr"}
{"$$deleted":true,"_id":"cldYuEaXYo6m70Qz"}
{"$$deleted":true,"_id":"ewy4mhUoxUlGPVWq"}
{"$$deleted":true,"_id":"f355hLJ5acAvFGUO"}
{"$$deleted":true,"_id":"jwE0QpCbQ2RlA5cn"}
{"$$deleted":true,"_id":"me18M8KolWDi9cPn"}
{"$$deleted":true,"_id":"n2ioOEpmNzF5DNgv"}
{"$$deleted":true,"_id":"oOchksNkgJtnCTxH"}
{"$$deleted":true,"_id":"pK7KCuVaUCnznNBb"}
{"$$deleted":true,"_id":"qCJ0m5ts9bt9muYl"}
{"$$deleted":true,"_id":"yMHkR1WpIsE4aK4T"}
{"$$deleted":true,"_id":"zqmmEXBZQSYwpdUk"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"zVGvMejnfPq3zFnO"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"iYdXZeuOOckreXKm"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"b1CazrWmUDXZ98mp"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"O71rDhHdcwnDKjxp"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"Qr9mfUwC4nVqXJkv"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"DDChnI7b5FcEY3ko"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"0uX6OtDMSE5CTfJ1"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"oIRtN0IVzTVu7CB0"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"jRvyNkTuUvc7kk38"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"sfGvjDk2c3TjnUGo"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"FVUuLAEBU8sT9kEs"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"9J09nzDRGyI0qEbB"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"6WyD1yyEm6qVYwNI"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"af7evZHUJDDW1oMf"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"e6OtoAxUGj3eTjgx"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"H34SFGxhwLkMmraH"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"NPYY0qWuzGa57KZv"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"A92lqTsySSjvFil5"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"TXNXbPuRjD02UMNm"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"DqXMiPUt7hnf1AXP"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"XBSEDotlWgYa8gIj"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"Xdsu0g6CtGglD57B"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"hMFDMAVFduqqSPPF"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nThe flex component allows quick insertion of common flex functionality\n","type":"md","_id":"KE9MgwveXC1CIavU"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"zfH9VNToRCLhtCTW"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"9yupAvZgmHmVDn2g"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"OqtaQTD1DqfoYQh2"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"4AxXPgwmppkLBVjE"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"T5f8cJcYKN4YfNiQ"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"zYzzWx66RiHNrGRy"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"4z6U2AsDAcgyR4Cx"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"a0GJ7EHjeeRTt0OO"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"E03U8vwGFIAjEnSJ"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"LSM4rOIIbTzi0lWl"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"IwVUx9wtYWl8VcM8"}
{"$$deleted":true,"_id":"0uX6OtDMSE5CTfJ1"}
{"$$deleted":true,"_id":"4AxXPgwmppkLBVjE"}
{"$$deleted":true,"_id":"4z6U2AsDAcgyR4Cx"}
{"$$deleted":true,"_id":"6WyD1yyEm6qVYwNI"}
{"$$deleted":true,"_id":"9J09nzDRGyI0qEbB"}
{"$$deleted":true,"_id":"9yupAvZgmHmVDn2g"}
{"$$deleted":true,"_id":"A92lqTsySSjvFil5"}
{"$$deleted":true,"_id":"DDChnI7b5FcEY3ko"}
{"$$deleted":true,"_id":"DqXMiPUt7hnf1AXP"}
{"$$deleted":true,"_id":"E03U8vwGFIAjEnSJ"}
{"$$deleted":true,"_id":"FVUuLAEBU8sT9kEs"}
{"$$deleted":true,"_id":"H34SFGxhwLkMmraH"}
{"$$deleted":true,"_id":"IwVUx9wtYWl8VcM8"}
{"$$deleted":true,"_id":"KE9MgwveXC1CIavU"}
{"$$deleted":true,"_id":"LSM4rOIIbTzi0lWl"}
{"$$deleted":true,"_id":"NPYY0qWuzGa57KZv"}
{"$$deleted":true,"_id":"O71rDhHdcwnDKjxp"}
{"$$deleted":true,"_id":"OqtaQTD1DqfoYQh2"}
{"$$deleted":true,"_id":"Qr9mfUwC4nVqXJkv"}
{"$$deleted":true,"_id":"T5f8cJcYKN4YfNiQ"}
{"$$deleted":true,"_id":"TXNXbPuRjD02UMNm"}
{"$$deleted":true,"_id":"XBSEDotlWgYa8gIj"}
{"$$deleted":true,"_id":"Xdsu0g6CtGglD57B"}
{"$$deleted":true,"_id":"a0GJ7EHjeeRTt0OO"}
{"$$deleted":true,"_id":"af7evZHUJDDW1oMf"}
{"$$deleted":true,"_id":"b1CazrWmUDXZ98mp"}
{"$$deleted":true,"_id":"e6OtoAxUGj3eTjgx"}
{"$$deleted":true,"_id":"hMFDMAVFduqqSPPF"}
{"$$deleted":true,"_id":"iYdXZeuOOckreXKm"}
{"$$deleted":true,"_id":"jRvyNkTuUvc7kk38"}
{"$$deleted":true,"_id":"oIRtN0IVzTVu7CB0"}
{"$$deleted":true,"_id":"sfGvjDk2c3TjnUGo"}
{"$$deleted":true,"_id":"zVGvMejnfPq3zFnO"}
{"$$deleted":true,"_id":"zYzzWx66RiHNrGRy"}
{"$$deleted":true,"_id":"zfH9VNToRCLhtCTW"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"qrx4lE6XzMuzeDA6"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"Ox4N5UnzeXS05Qu7"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"wYzcBXy0kgDcwuuw"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"z5LB75yyT1mT2vLF"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"N286bN5nhyelJJNe"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"cwo2Fzmcgj37uZQC"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"XO4MDMt7P43bK1Sn"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"qP9JAOhkORKBv8g1"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"R4KDz65w3pzwAnRr"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"8IcVxZVS8k2LzyPO"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"EFB3vYgxZubiGogw"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"H4Bzq0YSgReZR51W"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"yIgdOXsmNb9s3DrX"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"fMKQ8DEHVfJcI7jM"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"LgIOQNwMAGIpXYNN"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"obmyzX41K3j7vFNn"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"gwWkwHfSjiUa70Zb"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"71GJZwHZkjlRo0cw"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"Zfpn9Ea5pnuWu2ZM"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"95vsbsZ7xFzMrb73"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"2V8YTerIxM1BXWco"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"NeCn0uaW8T6kCLXu"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"YWX2q2Vab9zAPTDj"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n","type":"md","_id":"o2wC7Vfkqwz7NnK2"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"ub27DEHJsrh8xQZd"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"4y3XlgNg2aU5OABk"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"FObDGZZDI6GIY6A2"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"QvbkfpKdZMjWIUVm"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"T7ih0HTkkGotlx60"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"ILyyMyleHSQ2MndO"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"EUI90FgqE7VKIgqa"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"BEMzzKWYXQFmtb4I"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"n1HQy39EwqAohwXN"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"BVI6mxlGGmrFPeEz"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"UGsNF5rkrxmw2Lq3"}
{"$$deleted":true,"_id":"2V8YTerIxM1BXWco"}
{"$$deleted":true,"_id":"4y3XlgNg2aU5OABk"}
{"$$deleted":true,"_id":"71GJZwHZkjlRo0cw"}
{"$$deleted":true,"_id":"8IcVxZVS8k2LzyPO"}
{"$$deleted":true,"_id":"95vsbsZ7xFzMrb73"}
{"$$deleted":true,"_id":"BEMzzKWYXQFmtb4I"}
{"$$deleted":true,"_id":"BVI6mxlGGmrFPeEz"}
{"$$deleted":true,"_id":"EFB3vYgxZubiGogw"}
{"$$deleted":true,"_id":"EUI90FgqE7VKIgqa"}
{"$$deleted":true,"_id":"FObDGZZDI6GIY6A2"}
{"$$deleted":true,"_id":"H4Bzq0YSgReZR51W"}
{"$$deleted":true,"_id":"ILyyMyleHSQ2MndO"}
{"$$deleted":true,"_id":"LgIOQNwMAGIpXYNN"}
{"$$deleted":true,"_id":"N286bN5nhyelJJNe"}
{"$$deleted":true,"_id":"NeCn0uaW8T6kCLXu"}
{"$$deleted":true,"_id":"Ox4N5UnzeXS05Qu7"}
{"$$deleted":true,"_id":"QvbkfpKdZMjWIUVm"}
{"$$deleted":true,"_id":"R4KDz65w3pzwAnRr"}
{"$$deleted":true,"_id":"T7ih0HTkkGotlx60"}
{"$$deleted":true,"_id":"UGsNF5rkrxmw2Lq3"}
{"$$deleted":true,"_id":"XO4MDMt7P43bK1Sn"}
{"$$deleted":true,"_id":"YWX2q2Vab9zAPTDj"}
{"$$deleted":true,"_id":"Zfpn9Ea5pnuWu2ZM"}
{"$$deleted":true,"_id":"cwo2Fzmcgj37uZQC"}
{"$$deleted":true,"_id":"fMKQ8DEHVfJcI7jM"}
{"$$deleted":true,"_id":"gwWkwHfSjiUa70Zb"}
{"$$deleted":true,"_id":"n1HQy39EwqAohwXN"}
{"$$deleted":true,"_id":"o2wC7Vfkqwz7NnK2"}
{"$$deleted":true,"_id":"obmyzX41K3j7vFNn"}
{"$$deleted":true,"_id":"qP9JAOhkORKBv8g1"}
{"$$deleted":true,"_id":"qrx4lE6XzMuzeDA6"}
{"$$deleted":true,"_id":"ub27DEHJsrh8xQZd"}
{"$$deleted":true,"_id":"wYzcBXy0kgDcwuuw"}
{"$$deleted":true,"_id":"yIgdOXsmNb9s3DrX"}
{"$$deleted":true,"_id":"z5LB75yyT1mT2vLF"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"FfKwI6jxsUq88dOz"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"cEAL46aLJBF30Pz2"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"Wh9FnPF9r1VQJgVW"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"fKMGnbxJGVC8giM5"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"zaMlyXmnENzW3kYS"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"qsMApkvfruZRNPbH"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"ffratZ0U1gqxijPy"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"7JnemttqpENHeABl"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"iAKqkukYaHiYzbFO"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"9a2hj4kewOod5L7K"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"C4SakwXecbNj6l4L"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"XADihATBvCzX7MgX"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"DFzQckXtTRUzwOT0"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"D8azYhJZ1nm8s1Fu"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"QXdHRi0Y2EfXqyq1"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"1kJInMVYBw7N14bF"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"1f9bEfBOc82XJ4Xp"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"5QG9NgsjUQnlGsda"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"teTWyJyQRzec2w3m"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"jTnQ7lJX9UoKKJoh"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"KoyeDrCokE9NOq88"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"t7xTfspIx5qXk02R"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"kkhOGuugrCFvPQFn"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```json\n\nProps\n\n```\n","type":"md","_id":"bi8BuUxL0WcyBX1r"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"ZdZercSuppbozvAQ"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"ifz5Icxb6guQkH4Z"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"kh5jzuyA8Vfn8TV8"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"xyS0YcHLilnX2v6l"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"XjsJtQX49ThQDTol"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"4k51qmleNOLzzNow"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"fYhwcZmenZav8YOK"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"4R6F4TrPapYstOVD"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"pEqVQqojzsCMRMiS"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"LrSFUScJ8RztkCUU"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"5hl1LB9rMOoRqRvA"}
{"$$deleted":true,"_id":"1f9bEfBOc82XJ4Xp"}
{"$$deleted":true,"_id":"1kJInMVYBw7N14bF"}
{"$$deleted":true,"_id":"4R6F4TrPapYstOVD"}
{"$$deleted":true,"_id":"4k51qmleNOLzzNow"}
{"$$deleted":true,"_id":"5QG9NgsjUQnlGsda"}
{"$$deleted":true,"_id":"5hl1LB9rMOoRqRvA"}
{"$$deleted":true,"_id":"7JnemttqpENHeABl"}
{"$$deleted":true,"_id":"9a2hj4kewOod5L7K"}
{"$$deleted":true,"_id":"C4SakwXecbNj6l4L"}
{"$$deleted":true,"_id":"D8azYhJZ1nm8s1Fu"}
{"$$deleted":true,"_id":"DFzQckXtTRUzwOT0"}
{"$$deleted":true,"_id":"FfKwI6jxsUq88dOz"}
{"$$deleted":true,"_id":"KoyeDrCokE9NOq88"}
{"$$deleted":true,"_id":"LrSFUScJ8RztkCUU"}
{"$$deleted":true,"_id":"QXdHRi0Y2EfXqyq1"}
{"$$deleted":true,"_id":"Wh9FnPF9r1VQJgVW"}
{"$$deleted":true,"_id":"XADihATBvCzX7MgX"}
{"$$deleted":true,"_id":"XjsJtQX49ThQDTol"}
{"$$deleted":true,"_id":"ZdZercSuppbozvAQ"}
{"$$deleted":true,"_id":"bi8BuUxL0WcyBX1r"}
{"$$deleted":true,"_id":"cEAL46aLJBF30Pz2"}
{"$$deleted":true,"_id":"fKMGnbxJGVC8giM5"}
{"$$deleted":true,"_id":"fYhwcZmenZav8YOK"}
{"$$deleted":true,"_id":"ffratZ0U1gqxijPy"}
{"$$deleted":true,"_id":"iAKqkukYaHiYzbFO"}
{"$$deleted":true,"_id":"ifz5Icxb6guQkH4Z"}
{"$$deleted":true,"_id":"jTnQ7lJX9UoKKJoh"}
{"$$deleted":true,"_id":"kh5jzuyA8Vfn8TV8"}
{"$$deleted":true,"_id":"kkhOGuugrCFvPQFn"}
{"$$deleted":true,"_id":"pEqVQqojzsCMRMiS"}
{"$$deleted":true,"_id":"qsMApkvfruZRNPbH"}
{"$$deleted":true,"_id":"t7xTfspIx5qXk02R"}
{"$$deleted":true,"_id":"teTWyJyQRzec2w3m"}
{"$$deleted":true,"_id":"xyS0YcHLilnX2v6l"}
{"$$deleted":true,"_id":"zaMlyXmnENzW3kYS"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"T3pPLns4pn0FCjYX"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"4GkQ1fCiPCTJrly4"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"ALrjReW9UwjBd31F"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"6JvxsiGJTU3HuTBD"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"56klFJZFnpA9HkqE"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"pSIXmZQOBpqkn26V"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"oOM0EXb965Mk69pT"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"4vhMZj86Rt3tDTRA"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"aZS9I80AGvgA0g6O"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"MHz824td77XMi9PC"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"TdWMtCfoPUbkDpb7"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"wMLDh8BppqvnPfzF"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"ThL4ZXP25orIczF5"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"bskdACUeS81L9ejl"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"w6bvtQYqxKd4nUA0"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"BPTbS3enL6L7M5R0"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"xbzhSPEEoi8YM4rg"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"Epmcchnpt3xDQhEI"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"c1pJeLnIO2n0Zr5K"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"t74SCbJkKZYhO2oN"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"RDnOpohMX1deyXmR"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"6T22zcsAyJgX5R1l"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"2xJAlaePENKxvy9m"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```j\n\n```\n","type":"md","_id":"0gbbnb9IqodvWtSt"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"fFeEuCoHNEnw4P51"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"n4pXap2C8CkKEqZ4"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"QlYwcNPcSuWz43Sd"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"3u8HB4d9yDjtc3EW"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"7lQIyqZxYQF3PrBf"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"eLl9dpTkK6TIZAPS"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"kFBff04WZFfLT3eT"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"53t2oDjona1Yhkjg"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"m0a6esZrTlbLj3xE"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"guY4dF2dSZ7buFNM"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"aGcnTOM1yeuIHNVK"}
{"$$deleted":true,"_id":"0gbbnb9IqodvWtSt"}
{"$$deleted":true,"_id":"2xJAlaePENKxvy9m"}
{"$$deleted":true,"_id":"3u8HB4d9yDjtc3EW"}
{"$$deleted":true,"_id":"4GkQ1fCiPCTJrly4"}
{"$$deleted":true,"_id":"4vhMZj86Rt3tDTRA"}
{"$$deleted":true,"_id":"53t2oDjona1Yhkjg"}
{"$$deleted":true,"_id":"56klFJZFnpA9HkqE"}
{"$$deleted":true,"_id":"6JvxsiGJTU3HuTBD"}
{"$$deleted":true,"_id":"6T22zcsAyJgX5R1l"}
{"$$deleted":true,"_id":"7lQIyqZxYQF3PrBf"}
{"$$deleted":true,"_id":"ALrjReW9UwjBd31F"}
{"$$deleted":true,"_id":"BPTbS3enL6L7M5R0"}
{"$$deleted":true,"_id":"Epmcchnpt3xDQhEI"}
{"$$deleted":true,"_id":"MHz824td77XMi9PC"}
{"$$deleted":true,"_id":"QlYwcNPcSuWz43Sd"}
{"$$deleted":true,"_id":"RDnOpohMX1deyXmR"}
{"$$deleted":true,"_id":"T3pPLns4pn0FCjYX"}
{"$$deleted":true,"_id":"TdWMtCfoPUbkDpb7"}
{"$$deleted":true,"_id":"ThL4ZXP25orIczF5"}
{"$$deleted":true,"_id":"aGcnTOM1yeuIHNVK"}
{"$$deleted":true,"_id":"aZS9I80AGvgA0g6O"}
{"$$deleted":true,"_id":"bskdACUeS81L9ejl"}
{"$$deleted":true,"_id":"c1pJeLnIO2n0Zr5K"}
{"$$deleted":true,"_id":"eLl9dpTkK6TIZAPS"}
{"$$deleted":true,"_id":"fFeEuCoHNEnw4P51"}
{"$$deleted":true,"_id":"guY4dF2dSZ7buFNM"}
{"$$deleted":true,"_id":"kFBff04WZFfLT3eT"}
{"$$deleted":true,"_id":"m0a6esZrTlbLj3xE"}
{"$$deleted":true,"_id":"n4pXap2C8CkKEqZ4"}
{"$$deleted":true,"_id":"oOM0EXb965Mk69pT"}
{"$$deleted":true,"_id":"pSIXmZQOBpqkn26V"}
{"$$deleted":true,"_id":"t74SCbJkKZYhO2oN"}
{"$$deleted":true,"_id":"w6bvtQYqxKd4nUA0"}
{"$$deleted":true,"_id":"wMLDh8BppqvnPfzF"}
{"$$deleted":true,"_id":"xbzhSPEEoi8YM4rg"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"vxPWzaWjErV7V9s1"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"kYsfLMgOZYKuDgV4"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"J1KKKB00jZAdOfKY"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"IA3laXMMP3YNs5pm"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"fnEa7m8rHgqvERLH"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"7e7XBSTFWIk0YWh9"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"84v0z44CYHEaPPj6"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"DCRy8Ykjled5tfca"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"pAgSPfBwTfYuqV9G"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"KeT402wTWxjVuBKm"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"pVEtNygnDE6AY6Lp"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"yCEnWa9Mi9zoPph7"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"N6MSL0jLGZNpjdWp"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"5zHoJ7IJGBppnex9"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"a9uAp8zhhGFARy0c"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"osefIsU0FxWALu6f"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"DIfbtpEfH6bkwfx0"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"3gHTJev9iwA7TfC3"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"eKCGOyi5V1pMXkWa"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"tezUfONEBDIFVYI3"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"6Mes9fJ0Fkre4PWo"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"VmIDXWVGoW4WrfgX"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"Yof2DvbFhCQuLRsb"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```\n\n```\n","type":"md","_id":"YnB52ULosuQtZQMp"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"5HwVNpatJAh73upq"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"rOEeF14BY25MWktq"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"ohFsSgVRfgEDgVxM"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"eKNHO7hPxDichE2K"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"zPj7toa57qAfQq7H"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"XeqZiP2aBOcacuiB"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"Aw9qAzgfgDZBTf95"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"0bgEg0OVqTr6RmXJ"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"mHgTVfyqToXO8cL0"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"kGGqnB9RAsmwpoDp"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"OOhxejH3JSrY1sCm"}
{"$$deleted":true,"_id":"0bgEg0OVqTr6RmXJ"}
{"$$deleted":true,"_id":"3gHTJev9iwA7TfC3"}
{"$$deleted":true,"_id":"5HwVNpatJAh73upq"}
{"$$deleted":true,"_id":"5zHoJ7IJGBppnex9"}
{"$$deleted":true,"_id":"6Mes9fJ0Fkre4PWo"}
{"$$deleted":true,"_id":"7e7XBSTFWIk0YWh9"}
{"$$deleted":true,"_id":"84v0z44CYHEaPPj6"}
{"$$deleted":true,"_id":"Aw9qAzgfgDZBTf95"}
{"$$deleted":true,"_id":"DCRy8Ykjled5tfca"}
{"$$deleted":true,"_id":"DIfbtpEfH6bkwfx0"}
{"$$deleted":true,"_id":"IA3laXMMP3YNs5pm"}
{"$$deleted":true,"_id":"J1KKKB00jZAdOfKY"}
{"$$deleted":true,"_id":"KeT402wTWxjVuBKm"}
{"$$deleted":true,"_id":"N6MSL0jLGZNpjdWp"}
{"$$deleted":true,"_id":"OOhxejH3JSrY1sCm"}
{"$$deleted":true,"_id":"VmIDXWVGoW4WrfgX"}
{"$$deleted":true,"_id":"XeqZiP2aBOcacuiB"}
{"$$deleted":true,"_id":"YnB52ULosuQtZQMp"}
{"$$deleted":true,"_id":"Yof2DvbFhCQuLRsb"}
{"$$deleted":true,"_id":"a9uAp8zhhGFARy0c"}
{"$$deleted":true,"_id":"eKCGOyi5V1pMXkWa"}
{"$$deleted":true,"_id":"eKNHO7hPxDichE2K"}
{"$$deleted":true,"_id":"fnEa7m8rHgqvERLH"}
{"$$deleted":true,"_id":"kGGqnB9RAsmwpoDp"}
{"$$deleted":true,"_id":"kYsfLMgOZYKuDgV4"}
{"$$deleted":true,"_id":"mHgTVfyqToXO8cL0"}
{"$$deleted":true,"_id":"ohFsSgVRfgEDgVxM"}
{"$$deleted":true,"_id":"osefIsU0FxWALu6f"}
{"$$deleted":true,"_id":"pAgSPfBwTfYuqV9G"}
{"$$deleted":true,"_id":"pVEtNygnDE6AY6Lp"}
{"$$deleted":true,"_id":"rOEeF14BY25MWktq"}
{"$$deleted":true,"_id":"tezUfONEBDIFVYI3"}
{"$$deleted":true,"_id":"vxPWzaWjErV7V9s1"}
{"$$deleted":true,"_id":"yCEnWa9Mi9zoPph7"}
{"$$deleted":true,"_id":"zPj7toa57qAfQq7H"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"HM1aW1aVC9qfYNQl"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"qMkKe2iwdZa2oPlC"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"RDgz3eS1MOw7gx0Y"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"iULYXX4LbXSWV624"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"Yj4IjyukKkYzzJAr"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"ZmpplBQ0Y9wRMGJP"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"jCFYYKji2W0Or6pA"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"8PLavNabj3AbK20q"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"6aYdn4Yb6Ms6Dr87"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"cLcuEF89WLqP4ka6"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"v13NTnTbMmWynGHU"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"fLgI9EMisdAE41Lj"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"3KtPKAElE6Bt4eI7"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"aLXje3BIP04mRX6M"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"jYIXMcY0amSBETvN"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"ejy2IowIaWxTbxx3"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"JmWPm54Xo8fFdJZR"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"jBwFM4SFrsTgcBoh"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"saCPCGSaOyBy5a61"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"lupJYsCzJHRv7mZZ"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"krhpwgvTnXGtW1iB"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"OKKx2ctk2JV1OtGl"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"qdXJeBxVGLk3jrJE"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```\n  <Flex>\n\n  </Flex>\n```\n","type":"md","_id":"vj2uE5C5S5qH4nVn"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"mts71wwiWOoJPhcl"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"JatMhOxxvJqtN2OU"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"kSBcqHDEbXCAnvri"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"ypOx4qkqY7HHA0bg"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"D1ryjQSWxDTmUWnP"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"M8PwucNFGRaAdUGF"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"vDpIf0bOofUpxW70"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"EpqlXeJEHAmxF3YE"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"PVJZ7EyaL8x1u7Id"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"MTfZrNoYEnKoVg1L"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"Za3Vxo8qSKqV5qQJ"}
{"$$deleted":true,"_id":"3KtPKAElE6Bt4eI7"}
{"$$deleted":true,"_id":"6aYdn4Yb6Ms6Dr87"}
{"$$deleted":true,"_id":"8PLavNabj3AbK20q"}
{"$$deleted":true,"_id":"D1ryjQSWxDTmUWnP"}
{"$$deleted":true,"_id":"EpqlXeJEHAmxF3YE"}
{"$$deleted":true,"_id":"HM1aW1aVC9qfYNQl"}
{"$$deleted":true,"_id":"JatMhOxxvJqtN2OU"}
{"$$deleted":true,"_id":"JmWPm54Xo8fFdJZR"}
{"$$deleted":true,"_id":"M8PwucNFGRaAdUGF"}
{"$$deleted":true,"_id":"MTfZrNoYEnKoVg1L"}
{"$$deleted":true,"_id":"OKKx2ctk2JV1OtGl"}
{"$$deleted":true,"_id":"PVJZ7EyaL8x1u7Id"}
{"$$deleted":true,"_id":"RDgz3eS1MOw7gx0Y"}
{"$$deleted":true,"_id":"Yj4IjyukKkYzzJAr"}
{"$$deleted":true,"_id":"Za3Vxo8qSKqV5qQJ"}
{"$$deleted":true,"_id":"ZmpplBQ0Y9wRMGJP"}
{"$$deleted":true,"_id":"aLXje3BIP04mRX6M"}
{"$$deleted":true,"_id":"cLcuEF89WLqP4ka6"}
{"$$deleted":true,"_id":"ejy2IowIaWxTbxx3"}
{"$$deleted":true,"_id":"fLgI9EMisdAE41Lj"}
{"$$deleted":true,"_id":"iULYXX4LbXSWV624"}
{"$$deleted":true,"_id":"jBwFM4SFrsTgcBoh"}
{"$$deleted":true,"_id":"jCFYYKji2W0Or6pA"}
{"$$deleted":true,"_id":"jYIXMcY0amSBETvN"}
{"$$deleted":true,"_id":"kSBcqHDEbXCAnvri"}
{"$$deleted":true,"_id":"krhpwgvTnXGtW1iB"}
{"$$deleted":true,"_id":"lupJYsCzJHRv7mZZ"}
{"$$deleted":true,"_id":"mts71wwiWOoJPhcl"}
{"$$deleted":true,"_id":"qMkKe2iwdZa2oPlC"}
{"$$deleted":true,"_id":"qdXJeBxVGLk3jrJE"}
{"$$deleted":true,"_id":"saCPCGSaOyBy5a61"}
{"$$deleted":true,"_id":"v13NTnTbMmWynGHU"}
{"$$deleted":true,"_id":"vDpIf0bOofUpxW70"}
{"$$deleted":true,"_id":"vj2uE5C5S5qH4nVn"}
{"$$deleted":true,"_id":"ypOx4qkqY7HHA0bg"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"PFyOqRkAn4hM5zq1"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"tYer0j9BpF8yPOF0"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"fBOmV3ishCC7EYBb"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"d1A3UD8zg4ZBkz39"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"fKyNGqBR0DHHCkgv"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"VeolOD2yJ85VdLdW"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"P0UOPLveJ998dKSw"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"o4aVQlOoIb6Rdd8K"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"jXpSfEM79vLGN2Dx"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"zvJN2C1YIhNRPbND"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"hL9WOoSk5ff2HIsL"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"9FnjTr4HZjNwQ4kH"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"D321N8y2COzcMbPg"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"rTUqOn9DHb5ekB4g"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"OEGYP9aEQGtp4De4"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"ur9n3oDkUoULvTdc"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"5hMtsNLoVrCVwtPs"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"WVZcEp5rN2VRi2XT"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"5q6jQ7AmRSkmykX8"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"NtVc0GE9sL5Gnhf9"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"jSuPDd8eCh5p90ca"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"CtnXZhLtkVcPkkFg"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"N55sbWj79N86YpHb"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shirnk={0} // flex-shrink\n  />\n\n```\n","type":"md","_id":"2D7GTxOdABdz8ZUD"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"aL2UujSWT8ptvd7S"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"auzgzotqBAK0ilO1"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"bgeu88R3jrwtKrOF"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"0J3XKBOi278iqelZ"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"Hl6ACYohcXGoO9jz"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"AHUozl4x62kXq6MG"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"u7kCIRgrElJTvTWU"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"c9cwx0L3TF8tcgui"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"JK4rpqca4M0epf69"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"NrjTfesFGsw2iOPZ"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"P8z7ejOAi7v2Ln63"}
{"$$deleted":true,"_id":"0J3XKBOi278iqelZ"}
{"$$deleted":true,"_id":"2D7GTxOdABdz8ZUD"}
{"$$deleted":true,"_id":"5hMtsNLoVrCVwtPs"}
{"$$deleted":true,"_id":"5q6jQ7AmRSkmykX8"}
{"$$deleted":true,"_id":"9FnjTr4HZjNwQ4kH"}
{"$$deleted":true,"_id":"AHUozl4x62kXq6MG"}
{"$$deleted":true,"_id":"CtnXZhLtkVcPkkFg"}
{"$$deleted":true,"_id":"D321N8y2COzcMbPg"}
{"$$deleted":true,"_id":"Hl6ACYohcXGoO9jz"}
{"$$deleted":true,"_id":"JK4rpqca4M0epf69"}
{"$$deleted":true,"_id":"N55sbWj79N86YpHb"}
{"$$deleted":true,"_id":"NrjTfesFGsw2iOPZ"}
{"$$deleted":true,"_id":"NtVc0GE9sL5Gnhf9"}
{"$$deleted":true,"_id":"OEGYP9aEQGtp4De4"}
{"$$deleted":true,"_id":"P0UOPLveJ998dKSw"}
{"$$deleted":true,"_id":"P8z7ejOAi7v2Ln63"}
{"$$deleted":true,"_id":"PFyOqRkAn4hM5zq1"}
{"$$deleted":true,"_id":"VeolOD2yJ85VdLdW"}
{"$$deleted":true,"_id":"WVZcEp5rN2VRi2XT"}
{"$$deleted":true,"_id":"aL2UujSWT8ptvd7S"}
{"$$deleted":true,"_id":"auzgzotqBAK0ilO1"}
{"$$deleted":true,"_id":"bgeu88R3jrwtKrOF"}
{"$$deleted":true,"_id":"c9cwx0L3TF8tcgui"}
{"$$deleted":true,"_id":"d1A3UD8zg4ZBkz39"}
{"$$deleted":true,"_id":"fBOmV3ishCC7EYBb"}
{"$$deleted":true,"_id":"fKyNGqBR0DHHCkgv"}
{"$$deleted":true,"_id":"hL9WOoSk5ff2HIsL"}
{"$$deleted":true,"_id":"jSuPDd8eCh5p90ca"}
{"$$deleted":true,"_id":"jXpSfEM79vLGN2Dx"}
{"$$deleted":true,"_id":"o4aVQlOoIb6Rdd8K"}
{"$$deleted":true,"_id":"rTUqOn9DHb5ekB4g"}
{"$$deleted":true,"_id":"tYer0j9BpF8yPOF0"}
{"$$deleted":true,"_id":"u7kCIRgrElJTvTWU"}
{"$$deleted":true,"_id":"ur9n3oDkUoULvTdc"}
{"$$deleted":true,"_id":"zvJN2C1YIhNRPbND"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"rSj4y4mPa17ZbFEa"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"JcZq9wRAAkG3Tp3L"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"liYR9PNvi0MTEm9d"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"e4j6dUeHfoFix6a9"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"iQHLQ6Bg5PNX2hd4"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"t28uCxeDb4y1t8KX"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"MNy9QbzqIkrWUnFg"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"ucx6uzOjVWonN4LG"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"NNHAJkaBKmvbxslQ"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"VgXTud6h2L2pPC8X"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"1y8Rp6ayTBFRdq71"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"tbQBNe1so28cXD8I"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"QpCjOEZ4qfLB3Kel"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"Dyo8Z8Z3sNOqnfST"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"m0l9Vy84WKeksdJZ"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"p1WscwOlH3sRmzVl"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"lMxyFwlFiJWIs9HF"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"A5601IKHwjU9vGZm"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"jwNK5G4IIZYWtWNR"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"3ENUAKZpygBt5cpC"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"4WZRcunkmlKcvIMO"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"bAGapucWwgjReyxZ"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"wIIPyGXxWMq4rsCH"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n\n  />\n\n```\n","type":"md","_id":"zu64UGm4l4KUNGlt"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"czrtj5tVdOHhoTMW"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"Ca6EFx7Bkaa0vBLO"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"RcKoej6DQMuYueIZ"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"9fcSPWJNewtGXNGJ"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"GfWOlO5QCOoc2QOz"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"QecCjwro9RGNhuuL"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"SHJRVDbhHxH3jrJt"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"u1jgtYhNrvstFEFk"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"Wh3XYuXcdTu5ojOg"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"tDNTIIczcIpBpM9p"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"1AGO3gdyxnUXx1XA"}
{"$$deleted":true,"_id":"1AGO3gdyxnUXx1XA"}
{"$$deleted":true,"_id":"1y8Rp6ayTBFRdq71"}
{"$$deleted":true,"_id":"3ENUAKZpygBt5cpC"}
{"$$deleted":true,"_id":"4WZRcunkmlKcvIMO"}
{"$$deleted":true,"_id":"9fcSPWJNewtGXNGJ"}
{"$$deleted":true,"_id":"A5601IKHwjU9vGZm"}
{"$$deleted":true,"_id":"Ca6EFx7Bkaa0vBLO"}
{"$$deleted":true,"_id":"Dyo8Z8Z3sNOqnfST"}
{"$$deleted":true,"_id":"GfWOlO5QCOoc2QOz"}
{"$$deleted":true,"_id":"JcZq9wRAAkG3Tp3L"}
{"$$deleted":true,"_id":"MNy9QbzqIkrWUnFg"}
{"$$deleted":true,"_id":"NNHAJkaBKmvbxslQ"}
{"$$deleted":true,"_id":"QecCjwro9RGNhuuL"}
{"$$deleted":true,"_id":"QpCjOEZ4qfLB3Kel"}
{"$$deleted":true,"_id":"RcKoej6DQMuYueIZ"}
{"$$deleted":true,"_id":"SHJRVDbhHxH3jrJt"}
{"$$deleted":true,"_id":"VgXTud6h2L2pPC8X"}
{"$$deleted":true,"_id":"Wh3XYuXcdTu5ojOg"}
{"$$deleted":true,"_id":"bAGapucWwgjReyxZ"}
{"$$deleted":true,"_id":"czrtj5tVdOHhoTMW"}
{"$$deleted":true,"_id":"e4j6dUeHfoFix6a9"}
{"$$deleted":true,"_id":"iQHLQ6Bg5PNX2hd4"}
{"$$deleted":true,"_id":"jwNK5G4IIZYWtWNR"}
{"$$deleted":true,"_id":"lMxyFwlFiJWIs9HF"}
{"$$deleted":true,"_id":"liYR9PNvi0MTEm9d"}
{"$$deleted":true,"_id":"m0l9Vy84WKeksdJZ"}
{"$$deleted":true,"_id":"p1WscwOlH3sRmzVl"}
{"$$deleted":true,"_id":"rSj4y4mPa17ZbFEa"}
{"$$deleted":true,"_id":"t28uCxeDb4y1t8KX"}
{"$$deleted":true,"_id":"tDNTIIczcIpBpM9p"}
{"$$deleted":true,"_id":"tbQBNe1so28cXD8I"}
{"$$deleted":true,"_id":"u1jgtYhNrvstFEFk"}
{"$$deleted":true,"_id":"ucx6uzOjVWonN4LG"}
{"$$deleted":true,"_id":"wIIPyGXxWMq4rsCH"}
{"$$deleted":true,"_id":"zu64UGm4l4KUNGlt"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"ye4h16NNTRdKBxyx"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"56FpIVPXN1wNxe6S"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"mS2bQKwLYafClUu5"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"E3qsjvfEZ7USrizJ"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"KWLATX36lwcZz5pf"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"SfmzxbIFKr19ZRvH"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"gPwvjEKcQYNfTRBe"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"3rPQwqY6UHbT8N8O"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"jPubwtbmmvbbHL8G"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"EUFKXjuw5rVpmZtU"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"hirl8ImXm0Sf2RFN"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"yyop2604eNlUVcCD"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"E7qh3ppXwDad8iLb"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"adxG7XapnQ4KhvyI"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"SykQSSaQwnXknLhw"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"MyUQpbbpHqgVtY1c"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"6O5Q9b3asq82diOf"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"XoCIcqKNTnbGcSM3"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"ZQup157ExsOOrfHr"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"EuCmaCIYGgn5UyTf"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"xSepGMunx3IggiC0"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"wHjg4DgWv2KsyPzk"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"ZI06yJlSmSNwQRYi"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n  />\n\n```\n","type":"md","_id":"BJUaP6dyUObBnkJ0"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"ubOYQZFMtIoh5yWw"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"pLL4k57sQ0hTvsTd"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"U2Hfue275PL0nSCi"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"VnpQAGZsz5fVPI9g"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"Zqrt7q4xfdm0neAD"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"DlRDDYLCuSyyILnQ"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"lkRhpEbxlLKv0YTQ"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"N091MJO9r58wTjPY"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"3UG02zXkCexdnjUR"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"OejuVYRM59JlKacA"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"mHZhphq1JY1iJeqY"}
{"$$deleted":true,"_id":"3UG02zXkCexdnjUR"}
{"$$deleted":true,"_id":"3rPQwqY6UHbT8N8O"}
{"$$deleted":true,"_id":"56FpIVPXN1wNxe6S"}
{"$$deleted":true,"_id":"6O5Q9b3asq82diOf"}
{"$$deleted":true,"_id":"BJUaP6dyUObBnkJ0"}
{"$$deleted":true,"_id":"DlRDDYLCuSyyILnQ"}
{"$$deleted":true,"_id":"E3qsjvfEZ7USrizJ"}
{"$$deleted":true,"_id":"E7qh3ppXwDad8iLb"}
{"$$deleted":true,"_id":"EUFKXjuw5rVpmZtU"}
{"$$deleted":true,"_id":"EuCmaCIYGgn5UyTf"}
{"$$deleted":true,"_id":"KWLATX36lwcZz5pf"}
{"$$deleted":true,"_id":"MyUQpbbpHqgVtY1c"}
{"$$deleted":true,"_id":"N091MJO9r58wTjPY"}
{"$$deleted":true,"_id":"OejuVYRM59JlKacA"}
{"$$deleted":true,"_id":"SfmzxbIFKr19ZRvH"}
{"$$deleted":true,"_id":"SykQSSaQwnXknLhw"}
{"$$deleted":true,"_id":"U2Hfue275PL0nSCi"}
{"$$deleted":true,"_id":"VnpQAGZsz5fVPI9g"}
{"$$deleted":true,"_id":"XoCIcqKNTnbGcSM3"}
{"$$deleted":true,"_id":"ZI06yJlSmSNwQRYi"}
{"$$deleted":true,"_id":"ZQup157ExsOOrfHr"}
{"$$deleted":true,"_id":"Zqrt7q4xfdm0neAD"}
{"$$deleted":true,"_id":"adxG7XapnQ4KhvyI"}
{"$$deleted":true,"_id":"gPwvjEKcQYNfTRBe"}
{"$$deleted":true,"_id":"hirl8ImXm0Sf2RFN"}
{"$$deleted":true,"_id":"jPubwtbmmvbbHL8G"}
{"$$deleted":true,"_id":"lkRhpEbxlLKv0YTQ"}
{"$$deleted":true,"_id":"mHZhphq1JY1iJeqY"}
{"$$deleted":true,"_id":"mS2bQKwLYafClUu5"}
{"$$deleted":true,"_id":"pLL4k57sQ0hTvsTd"}
{"$$deleted":true,"_id":"ubOYQZFMtIoh5yWw"}
{"$$deleted":true,"_id":"wHjg4DgWv2KsyPzk"}
{"$$deleted":true,"_id":"xSepGMunx3IggiC0"}
{"$$deleted":true,"_id":"ye4h16NNTRdKBxyx"}
{"$$deleted":true,"_id":"yyop2604eNlUVcCD"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"L8bTcwQkvkO0Fy8N"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"5CrEVAe3aPSaCnA8"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"6x2VcawUwzFb7lIy"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"YN5Y891GKUBdpbvb"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"EvvcJNUR7aY51C5D"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"0kKQc9X546m1Kgl0"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"J0Ws6ENNBh8k3AEv"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"gUhC27c5yV5I2peF"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"i02Gw8LgmmngcTlq"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"LOms3oJL6NJmBPvS"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"8SKzxzvUxCjqWXQZ"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"fnbvS8dGJSN7Mzyr"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"bXX1s4Qqiq9UfXjE"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"U4Allpt434EiNkoI"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"4mfPUdflwjjdTFs7"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"6zRMAV87FoARt8Ye"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"C915j2ERLvmdO7Mx"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"199RIBCNG09MM1Bl"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"3eRyarunG1vEWbwP"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"eTFjxibgmfPQUggA"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"AO4U3fxIznZomMKx"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"KgwWqkCPxcRJtfh9"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"AyNuGFDuMnzXt8ni"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n  />\n\n```\n","type":"md","_id":"ry49OsOlV23Ouuji"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"5NGX8xj3NHhqxg1s"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"uHiX4HIAvtoJvCl6"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"ytRRncn9F4sKyUIo"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"LHTCSqptO2Z2R0Xq"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"lPtXlFIjO0SWp6Rz"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"etrsEdxoDbW0pY6o"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"9bQEoqkIhtfnjm54"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"sJXXkZ2kskRn2oqK"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"izLEK7JbmVHHPBsP"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"rVzcykg7XRF0R6aL"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"gJloiV7fLvfZAHO5"}
{"$$deleted":true,"_id":"0kKQc9X546m1Kgl0"}
{"$$deleted":true,"_id":"199RIBCNG09MM1Bl"}
{"$$deleted":true,"_id":"3eRyarunG1vEWbwP"}
{"$$deleted":true,"_id":"4mfPUdflwjjdTFs7"}
{"$$deleted":true,"_id":"5CrEVAe3aPSaCnA8"}
{"$$deleted":true,"_id":"5NGX8xj3NHhqxg1s"}
{"$$deleted":true,"_id":"6x2VcawUwzFb7lIy"}
{"$$deleted":true,"_id":"6zRMAV87FoARt8Ye"}
{"$$deleted":true,"_id":"8SKzxzvUxCjqWXQZ"}
{"$$deleted":true,"_id":"9bQEoqkIhtfnjm54"}
{"$$deleted":true,"_id":"AO4U3fxIznZomMKx"}
{"$$deleted":true,"_id":"AyNuGFDuMnzXt8ni"}
{"$$deleted":true,"_id":"C915j2ERLvmdO7Mx"}
{"$$deleted":true,"_id":"EvvcJNUR7aY51C5D"}
{"$$deleted":true,"_id":"J0Ws6ENNBh8k3AEv"}
{"$$deleted":true,"_id":"KgwWqkCPxcRJtfh9"}
{"$$deleted":true,"_id":"L8bTcwQkvkO0Fy8N"}
{"$$deleted":true,"_id":"LHTCSqptO2Z2R0Xq"}
{"$$deleted":true,"_id":"LOms3oJL6NJmBPvS"}
{"$$deleted":true,"_id":"U4Allpt434EiNkoI"}
{"$$deleted":true,"_id":"YN5Y891GKUBdpbvb"}
{"$$deleted":true,"_id":"bXX1s4Qqiq9UfXjE"}
{"$$deleted":true,"_id":"eTFjxibgmfPQUggA"}
{"$$deleted":true,"_id":"etrsEdxoDbW0pY6o"}
{"$$deleted":true,"_id":"fnbvS8dGJSN7Mzyr"}
{"$$deleted":true,"_id":"gJloiV7fLvfZAHO5"}
{"$$deleted":true,"_id":"gUhC27c5yV5I2peF"}
{"$$deleted":true,"_id":"i02Gw8LgmmngcTlq"}
{"$$deleted":true,"_id":"izLEK7JbmVHHPBsP"}
{"$$deleted":true,"_id":"lPtXlFIjO0SWp6Rz"}
{"$$deleted":true,"_id":"rVzcykg7XRF0R6aL"}
{"$$deleted":true,"_id":"ry49OsOlV23Ouuji"}
{"$$deleted":true,"_id":"sJXXkZ2kskRn2oqK"}
{"$$deleted":true,"_id":"uHiX4HIAvtoJvCl6"}
{"$$deleted":true,"_id":"ytRRncn9F4sKyUIo"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"ABR9Mh9aC8MbqHr9"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"KHWBKrSrPYwBZVby"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"86yYmi07XaxX0U4w"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"KR1maLZXqBpmqzyu"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"QzQAif3g9o2b1sIj"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"R4DXaxAjFENH4otv"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"e1pA9KvcmZ6bz6Tp"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"yuV8EpkZmRxjeMJQ"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"lCWUr6z0YAdvce4A"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"x5QykNHsS9YApJuI"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"Du0X0LQRW9tHqIsw"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"zE4s2KvN1dVDvgXE"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"TYJWWARDAbsiRZOA"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"HqcC6jPEF2EaWPAy"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"4BLi6KpQq9TjbZZf"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"ETpCZsARHBSTEPPl"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"IlTC0KNjQ7t3l6GW"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"NWuQpSccoxqrMeRe"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"XkM5yliiBPdyzGPf"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"UHNEBQrw6Yg7h8qz"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"ryRc9YXMUtyGMgFW"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"IJyMHl7Acsetg825"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"11E9gMdpp6U6zayf"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n  />\n\n```\n","type":"md","_id":"BA21r4q3lcm1eCn6"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"JhTIC8MyCJUvE38C"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"AA2p2PEtFlx6TZAQ"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"zqsSCqgb8sKvosWc"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"gNZOBH71No3r5eGP"}
{"name":"cloner","path":["react","util","cloner"],"data":"","type":"md","_id":"4v2c1BIoPRUIdCfC"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"NxDaoaKxAi6wtdYQ"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"31pcyAyGpxtiihx3"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"7gTbZMezNcQhHnhS"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"QRWxyEckrtAVK6GG"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"MWaRWlrDjvubkeAi"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"GNvf98UCFFbAQBDd"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"mRlQUqBP0b3PuR3l"}
{"$$deleted":true,"_id":"11E9gMdpp6U6zayf"}
{"$$deleted":true,"_id":"31pcyAyGpxtiihx3"}
{"$$deleted":true,"_id":"4BLi6KpQq9TjbZZf"}
{"$$deleted":true,"_id":"4v2c1BIoPRUIdCfC"}
{"$$deleted":true,"_id":"7gTbZMezNcQhHnhS"}
{"$$deleted":true,"_id":"86yYmi07XaxX0U4w"}
{"$$deleted":true,"_id":"AA2p2PEtFlx6TZAQ"}
{"$$deleted":true,"_id":"ABR9Mh9aC8MbqHr9"}
{"$$deleted":true,"_id":"BA21r4q3lcm1eCn6"}
{"$$deleted":true,"_id":"Du0X0LQRW9tHqIsw"}
{"$$deleted":true,"_id":"ETpCZsARHBSTEPPl"}
{"$$deleted":true,"_id":"GNvf98UCFFbAQBDd"}
{"$$deleted":true,"_id":"HqcC6jPEF2EaWPAy"}
{"$$deleted":true,"_id":"IJyMHl7Acsetg825"}
{"$$deleted":true,"_id":"IlTC0KNjQ7t3l6GW"}
{"$$deleted":true,"_id":"JhTIC8MyCJUvE38C"}
{"$$deleted":true,"_id":"KHWBKrSrPYwBZVby"}
{"$$deleted":true,"_id":"KR1maLZXqBpmqzyu"}
{"$$deleted":true,"_id":"MWaRWlrDjvubkeAi"}
{"$$deleted":true,"_id":"NWuQpSccoxqrMeRe"}
{"$$deleted":true,"_id":"NxDaoaKxAi6wtdYQ"}
{"$$deleted":true,"_id":"QRWxyEckrtAVK6GG"}
{"$$deleted":true,"_id":"QzQAif3g9o2b1sIj"}
{"$$deleted":true,"_id":"R4DXaxAjFENH4otv"}
{"$$deleted":true,"_id":"TYJWWARDAbsiRZOA"}
{"$$deleted":true,"_id":"UHNEBQrw6Yg7h8qz"}
{"$$deleted":true,"_id":"XkM5yliiBPdyzGPf"}
{"$$deleted":true,"_id":"e1pA9KvcmZ6bz6Tp"}
{"$$deleted":true,"_id":"gNZOBH71No3r5eGP"}
{"$$deleted":true,"_id":"lCWUr6z0YAdvce4A"}
{"$$deleted":true,"_id":"mRlQUqBP0b3PuR3l"}
{"$$deleted":true,"_id":"ryRc9YXMUtyGMgFW"}
{"$$deleted":true,"_id":"x5QykNHsS9YApJuI"}
{"$$deleted":true,"_id":"yuV8EpkZmRxjeMJQ"}
{"$$deleted":true,"_id":"zE4s2KvN1dVDvgXE"}
{"$$deleted":true,"_id":"zqsSCqgb8sKvosWc"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"QVGscwpnxSNwAfyU"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"vwSPjY6O9oNP7TgO"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"yAtbAkRIKxPj0GiR"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"5t1MGt7EVS2Qbx1r"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"UC6OsW5SAJnTqQjj"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"ljdvnpZwSevnP5yi"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"uj8gg4oEFSgrPb3l"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"OsHjoFieRb7SynY9"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"72x8XWGIZWQFdXpl"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"9XeIWvscsWNaiqWZ"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"9QvRUAAxWRGiaW2M"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"ZSUGQTZPLF3KyPEW"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"qvr1aJINtGl4lfyM"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"5ysc4u8u8Y1OHIer"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"5Q6vBHy43PTwMIb2"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"pJ3TzYtWmuDlhi4n"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"3ADuiLJVUI9UNFCi"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"XeiXXWY1stsCTOCx"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"9pk72b09YXgsjyZt"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"7LbEnNj0PqWDNBcI"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"oSiCDo1eG8AqKM92"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"a3CStfpNOpAglBiZ"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"2mpxEmuxuWBM5UnS"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n  />\n\n```\n","type":"md","_id":"2cVJSKNbCARmr9jv"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"lj02ILicjjeaa65I"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"h2QMvGd1B2wVy6NG"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"4veh7bnefkId4WN8"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"tgsIlBAPCiVoCh0o"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n","type":"md","_id":"HT7F7h7i5nRRnekE"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"bYkM3mQcH5foS4I3"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"KwspKNxe4qDIsIs4"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"J48tUBwztV6Lh2zg"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"FDh6znBPdGeN8FOB"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"VKmrXNwhf7y76xy0"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"7BIYDGlfAQIrMhua"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"ljZLE1ZtBYxtNRxk"}
{"$$deleted":true,"_id":"2cVJSKNbCARmr9jv"}
{"$$deleted":true,"_id":"2mpxEmuxuWBM5UnS"}
{"$$deleted":true,"_id":"3ADuiLJVUI9UNFCi"}
{"$$deleted":true,"_id":"4veh7bnefkId4WN8"}
{"$$deleted":true,"_id":"5Q6vBHy43PTwMIb2"}
{"$$deleted":true,"_id":"5t1MGt7EVS2Qbx1r"}
{"$$deleted":true,"_id":"5ysc4u8u8Y1OHIer"}
{"$$deleted":true,"_id":"72x8XWGIZWQFdXpl"}
{"$$deleted":true,"_id":"7BIYDGlfAQIrMhua"}
{"$$deleted":true,"_id":"7LbEnNj0PqWDNBcI"}
{"$$deleted":true,"_id":"9QvRUAAxWRGiaW2M"}
{"$$deleted":true,"_id":"9XeIWvscsWNaiqWZ"}
{"$$deleted":true,"_id":"9pk72b09YXgsjyZt"}
{"$$deleted":true,"_id":"FDh6znBPdGeN8FOB"}
{"$$deleted":true,"_id":"HT7F7h7i5nRRnekE"}
{"$$deleted":true,"_id":"J48tUBwztV6Lh2zg"}
{"$$deleted":true,"_id":"KwspKNxe4qDIsIs4"}
{"$$deleted":true,"_id":"OsHjoFieRb7SynY9"}
{"$$deleted":true,"_id":"QVGscwpnxSNwAfyU"}
{"$$deleted":true,"_id":"UC6OsW5SAJnTqQjj"}
{"$$deleted":true,"_id":"VKmrXNwhf7y76xy0"}
{"$$deleted":true,"_id":"XeiXXWY1stsCTOCx"}
{"$$deleted":true,"_id":"ZSUGQTZPLF3KyPEW"}
{"$$deleted":true,"_id":"a3CStfpNOpAglBiZ"}
{"$$deleted":true,"_id":"bYkM3mQcH5foS4I3"}
{"$$deleted":true,"_id":"h2QMvGd1B2wVy6NG"}
{"$$deleted":true,"_id":"lj02ILicjjeaa65I"}
{"$$deleted":true,"_id":"ljZLE1ZtBYxtNRxk"}
{"$$deleted":true,"_id":"ljdvnpZwSevnP5yi"}
{"$$deleted":true,"_id":"oSiCDo1eG8AqKM92"}
{"$$deleted":true,"_id":"pJ3TzYtWmuDlhi4n"}
{"$$deleted":true,"_id":"qvr1aJINtGl4lfyM"}
{"$$deleted":true,"_id":"tgsIlBAPCiVoCh0o"}
{"$$deleted":true,"_id":"uj8gg4oEFSgrPb3l"}
{"$$deleted":true,"_id":"vwSPjY6O9oNP7TgO"}
{"$$deleted":true,"_id":"yAtbAkRIKxPj0GiR"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"XihNc9Bl5Z2mfK7c"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"TlC24f0te4KBHCKg"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"psziGS6zFwUuA9pQ"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"vWiWnvAlm5vokQMF"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"jObflYGqQnLPc3jV"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"JZEdljtlmmQboFoX"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"SVWhWmBo3tdTlyOn"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"bFI82lkfatT8WqaA"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"5mBLFDFIfuMeVY9e"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"daHpGBIQQ9iTiU7B"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"zuelQ7sFDiUNYPet"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"CD7YTdZxsfEXxfyR"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"r7AX1Nz9xSb8K5FB"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"jbiYYKEdkXyiHDhW"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"uKRnDfbFCxPI7NEc"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"rJNAxWUzroQTGpSW"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"GPPoNcPRusKFZM0u"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"XShjVDAfDNsDOBD3"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"JjtVDRjhX0cJn4Pi"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"x6zWMSwTmHyxzlKE"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"FXOdn29HGd2mRVAr"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"khq2L3CcUw75vkoV"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"U2oJlm8swo91MShW"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"jRBOdKjyfmCZ42tI"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"mL62rRyi3bVEWYGC"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"sTOaCQRjgh0zBYMW"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"NWQKNpBh9Ew3dzug"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"SFsZvYatGM5D5EBS"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n","type":"md","_id":"Z6V88gdjJWy99cgi"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"bFQa1zNYoinnKmS8"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"ozFatv8dwYHWQs0Q"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"1gTwkbDlBWkAaJZB"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"KS0YELlZ3r3J731w"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"8nvaXT94yL6Kfq0j"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"yNXyJvxPBKeMoJwi"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"sWHEh5vxO21n4fjj"}
{"$$deleted":true,"_id":"1gTwkbDlBWkAaJZB"}
{"$$deleted":true,"_id":"5mBLFDFIfuMeVY9e"}
{"$$deleted":true,"_id":"8nvaXT94yL6Kfq0j"}
{"$$deleted":true,"_id":"CD7YTdZxsfEXxfyR"}
{"$$deleted":true,"_id":"FXOdn29HGd2mRVAr"}
{"$$deleted":true,"_id":"GPPoNcPRusKFZM0u"}
{"$$deleted":true,"_id":"JZEdljtlmmQboFoX"}
{"$$deleted":true,"_id":"JjtVDRjhX0cJn4Pi"}
{"$$deleted":true,"_id":"KS0YELlZ3r3J731w"}
{"$$deleted":true,"_id":"NWQKNpBh9Ew3dzug"}
{"$$deleted":true,"_id":"SFsZvYatGM5D5EBS"}
{"$$deleted":true,"_id":"SVWhWmBo3tdTlyOn"}
{"$$deleted":true,"_id":"TlC24f0te4KBHCKg"}
{"$$deleted":true,"_id":"U2oJlm8swo91MShW"}
{"$$deleted":true,"_id":"XShjVDAfDNsDOBD3"}
{"$$deleted":true,"_id":"XihNc9Bl5Z2mfK7c"}
{"$$deleted":true,"_id":"Z6V88gdjJWy99cgi"}
{"$$deleted":true,"_id":"bFI82lkfatT8WqaA"}
{"$$deleted":true,"_id":"bFQa1zNYoinnKmS8"}
{"$$deleted":true,"_id":"daHpGBIQQ9iTiU7B"}
{"$$deleted":true,"_id":"jObflYGqQnLPc3jV"}
{"$$deleted":true,"_id":"jRBOdKjyfmCZ42tI"}
{"$$deleted":true,"_id":"jbiYYKEdkXyiHDhW"}
{"$$deleted":true,"_id":"khq2L3CcUw75vkoV"}
{"$$deleted":true,"_id":"mL62rRyi3bVEWYGC"}
{"$$deleted":true,"_id":"ozFatv8dwYHWQs0Q"}
{"$$deleted":true,"_id":"psziGS6zFwUuA9pQ"}
{"$$deleted":true,"_id":"r7AX1Nz9xSb8K5FB"}
{"$$deleted":true,"_id":"rJNAxWUzroQTGpSW"}
{"$$deleted":true,"_id":"sTOaCQRjgh0zBYMW"}
{"$$deleted":true,"_id":"sWHEh5vxO21n4fjj"}
{"$$deleted":true,"_id":"uKRnDfbFCxPI7NEc"}
{"$$deleted":true,"_id":"vWiWnvAlm5vokQMF"}
{"$$deleted":true,"_id":"x6zWMSwTmHyxzlKE"}
{"$$deleted":true,"_id":"yNXyJvxPBKeMoJwi"}
{"$$deleted":true,"_id":"zuelQ7sFDiUNYPet"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"kBJRYBRPdbFO6T9U"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"Y9xFw85YT567jJUx"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"41CBRKaNFZGhU7S2"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"Cq0c6GImvvlmhRns"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"HNy0rPVForZdd0ao"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"mCcLSRL1fpKrJLCL"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"L96E4rxP8onscffm"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"DHe3osiDKD4kf7tv"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"IwBx2tKfboyFYrK3"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"mVptQEKyZwvnTbNk"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"vTqheDN6e7qvbJyA"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"iyMrxJbFkDEz5RZP"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"2q0fkYqBoQiah2bN"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"utgKqtKpY1FXUMb6"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"bgvYs4XfSa5ihpv5"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"TKQJx1U87XLcA8Gh"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"fn2DXV2KM3rGjDQB"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"jpGapnpXajVaHYAB"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"MGtWU5P9fFE3grpy"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"iniiI34O52g32MFA"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"YukiCPQsXra6pgIm"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"Gp9w1k2U2hgyFStS"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"ssfWtw3MPqUlfOQd"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"wwguCtqGU0ngSVoN"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"njvjQTi1WcAw8p6A"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"k6ty4KalbKefFdx7"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"GTxwy93qZ4HjEhtr"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"d4959uCpwIj6IZQT"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n","type":"md","_id":"85W7C4fwSTpdPRhp"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"EdcRtz28F34TnMul"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"wRPx03PkdLTxsA4T"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"mjH9B8idLmMWyut5"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"wPYoNH8yfILmdNgS"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"pT2YaEtncwIDj7E9"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"pkX7t7OqgwlsnAyy"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"Fa0JhAPVbeY4Ufqh"}
{"$$deleted":true,"_id":"2q0fkYqBoQiah2bN"}
{"$$deleted":true,"_id":"41CBRKaNFZGhU7S2"}
{"$$deleted":true,"_id":"85W7C4fwSTpdPRhp"}
{"$$deleted":true,"_id":"Cq0c6GImvvlmhRns"}
{"$$deleted":true,"_id":"DHe3osiDKD4kf7tv"}
{"$$deleted":true,"_id":"EdcRtz28F34TnMul"}
{"$$deleted":true,"_id":"Fa0JhAPVbeY4Ufqh"}
{"$$deleted":true,"_id":"GTxwy93qZ4HjEhtr"}
{"$$deleted":true,"_id":"Gp9w1k2U2hgyFStS"}
{"$$deleted":true,"_id":"HNy0rPVForZdd0ao"}
{"$$deleted":true,"_id":"IwBx2tKfboyFYrK3"}
{"$$deleted":true,"_id":"L96E4rxP8onscffm"}
{"$$deleted":true,"_id":"MGtWU5P9fFE3grpy"}
{"$$deleted":true,"_id":"TKQJx1U87XLcA8Gh"}
{"$$deleted":true,"_id":"Y9xFw85YT567jJUx"}
{"$$deleted":true,"_id":"YukiCPQsXra6pgIm"}
{"$$deleted":true,"_id":"bgvYs4XfSa5ihpv5"}
{"$$deleted":true,"_id":"d4959uCpwIj6IZQT"}
{"$$deleted":true,"_id":"fn2DXV2KM3rGjDQB"}
{"$$deleted":true,"_id":"iniiI34O52g32MFA"}
{"$$deleted":true,"_id":"iyMrxJbFkDEz5RZP"}
{"$$deleted":true,"_id":"jpGapnpXajVaHYAB"}
{"$$deleted":true,"_id":"k6ty4KalbKefFdx7"}
{"$$deleted":true,"_id":"kBJRYBRPdbFO6T9U"}
{"$$deleted":true,"_id":"mCcLSRL1fpKrJLCL"}
{"$$deleted":true,"_id":"mVptQEKyZwvnTbNk"}
{"$$deleted":true,"_id":"mjH9B8idLmMWyut5"}
{"$$deleted":true,"_id":"njvjQTi1WcAw8p6A"}
{"$$deleted":true,"_id":"pT2YaEtncwIDj7E9"}
{"$$deleted":true,"_id":"pkX7t7OqgwlsnAyy"}
{"$$deleted":true,"_id":"ssfWtw3MPqUlfOQd"}
{"$$deleted":true,"_id":"utgKqtKpY1FXUMb6"}
{"$$deleted":true,"_id":"vTqheDN6e7qvbJyA"}
{"$$deleted":true,"_id":"wPYoNH8yfILmdNgS"}
{"$$deleted":true,"_id":"wRPx03PkdLTxsA4T"}
{"$$deleted":true,"_id":"wwguCtqGU0ngSVoN"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"t19tHTSfi8e4D3Fd"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"hrjuJtbtINx8jxwi"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"nQJveV9XqSapMgvG"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"zWhE4jlItvCLj097"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"2hFLlNPEbWwulpVi"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"RL7Numw6VUF0MR6p"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"MbfD2F4W1pjKDM8k"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"olzQ5pKjVxkv2XfG"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"3qPSnf5A0KzCr2x2"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"WO3tqiE30v3XxUMl"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"4RtOi0oivR375tZm"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"3zkJevalZxK758Z3"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"GsL0M21hrhXwzsEj"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"I6HwuVAcYOCywH6W"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"Ez0dYCW0uWRHcVq1"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"5D9hF3pluQPYoTdT"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"wk8MqA8Q3NdkzKVE"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"6Of2IjNyuaYnnOkY"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"dUsIrWmjTgOxh8W3"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"KaRmsrNudABlYnTH"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"71JqcdatBLcdeSwt"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"2M3l9KX4L9JYF23F"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"oWUpPBSMYwgUpX2g"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"2U1mo8Sk9Iji7nBP"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"XTy5gMyX11RHp4Q6"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"Bbk2ae9L0PaRVnDG"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"uKMVzUDBw7M2aEhz"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"NxsCaaZsAw3MEaeg"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n","type":"md","_id":"Ozn3U3Exvy3ktqir"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"bRwkmSiihn5BQ1bc"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"Ymd5wfOmCvAidSbo"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"M23IcizqtQkw4Ec4"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"AoaRdFO92J1gWgrx"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"ykSkJFvagGBZQGPb"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"LTozheHkpJExQWY0"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"4maqu6fcW6zgAsku"}
{"$$deleted":true,"_id":"2M3l9KX4L9JYF23F"}
{"$$deleted":true,"_id":"2U1mo8Sk9Iji7nBP"}
{"$$deleted":true,"_id":"2hFLlNPEbWwulpVi"}
{"$$deleted":true,"_id":"3qPSnf5A0KzCr2x2"}
{"$$deleted":true,"_id":"3zkJevalZxK758Z3"}
{"$$deleted":true,"_id":"4RtOi0oivR375tZm"}
{"$$deleted":true,"_id":"4maqu6fcW6zgAsku"}
{"$$deleted":true,"_id":"5D9hF3pluQPYoTdT"}
{"$$deleted":true,"_id":"6Of2IjNyuaYnnOkY"}
{"$$deleted":true,"_id":"71JqcdatBLcdeSwt"}
{"$$deleted":true,"_id":"AoaRdFO92J1gWgrx"}
{"$$deleted":true,"_id":"Bbk2ae9L0PaRVnDG"}
{"$$deleted":true,"_id":"Ez0dYCW0uWRHcVq1"}
{"$$deleted":true,"_id":"GsL0M21hrhXwzsEj"}
{"$$deleted":true,"_id":"I6HwuVAcYOCywH6W"}
{"$$deleted":true,"_id":"KaRmsrNudABlYnTH"}
{"$$deleted":true,"_id":"LTozheHkpJExQWY0"}
{"$$deleted":true,"_id":"M23IcizqtQkw4Ec4"}
{"$$deleted":true,"_id":"MbfD2F4W1pjKDM8k"}
{"$$deleted":true,"_id":"NxsCaaZsAw3MEaeg"}
{"$$deleted":true,"_id":"Ozn3U3Exvy3ktqir"}
{"$$deleted":true,"_id":"RL7Numw6VUF0MR6p"}
{"$$deleted":true,"_id":"WO3tqiE30v3XxUMl"}
{"$$deleted":true,"_id":"XTy5gMyX11RHp4Q6"}
{"$$deleted":true,"_id":"Ymd5wfOmCvAidSbo"}
{"$$deleted":true,"_id":"bRwkmSiihn5BQ1bc"}
{"$$deleted":true,"_id":"dUsIrWmjTgOxh8W3"}
{"$$deleted":true,"_id":"hrjuJtbtINx8jxwi"}
{"$$deleted":true,"_id":"nQJveV9XqSapMgvG"}
{"$$deleted":true,"_id":"oWUpPBSMYwgUpX2g"}
{"$$deleted":true,"_id":"olzQ5pKjVxkv2XfG"}
{"$$deleted":true,"_id":"t19tHTSfi8e4D3Fd"}
{"$$deleted":true,"_id":"uKMVzUDBw7M2aEhz"}
{"$$deleted":true,"_id":"wk8MqA8Q3NdkzKVE"}
{"$$deleted":true,"_id":"ykSkJFvagGBZQGPb"}
{"$$deleted":true,"_id":"zWhE4jlItvCLj097"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"DQKZhO77PcU4tdLP"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"4AJ6PIAn0PbiaBmP"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"TcDf5sfW01cbqPq0"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"jfZHJSOIULePxaAl"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"p2YKPbWgwgUi0Jy4"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"5ooQxvQYFYJQe9cf"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"nZee97rtq4MSt87O"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"LjhM8vvj4uNVmuMz"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"g7JRTv0sK2zTKNpP"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"yA7Kv8khUZ2B9x6W"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"nnviBiTKl13dbCgu"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"w1HrznuC9VMbtulX"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"xS371VFzHdGbjvDg"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"GSYZPZmtJH09oPwR"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"g1mkGjrsNPIZOO94"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"bYri4psrbgp8BVF1"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"uu6mGssB0BMEu3EK"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"EXpbJnphtdFHXOhf"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"PnDVar6RSEYFUYFQ"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"0pbkjyo46CQgba6e"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"1hQfZXATLVkytUFP"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"LdiWNSEX3YPoBXbB"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"36szAJvgscY68PJS"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"1oOsU29tTkildVI5"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"ifaFDyfxS63oElmO"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"mpSKuIuX9mOyssu5"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"vxY6QlwcTAaYKFPs"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"yuB0ar7SlyilBwKu"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n","type":"md","_id":"w4IZTtqpszA4ifWW"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"HWVggI1aXmtRhFL4"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"0XzfL7sestMVZB83"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"uyYkZxp2oycALc1x"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"jgLYUzUEXuhMAIWT"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"Q7SKsGDJTY1KJF9U"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"KnrbdDxQF5buB6eI"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"BjyoHYrKqMB0CvYt"}
{"$$deleted":true,"_id":"0XzfL7sestMVZB83"}
{"$$deleted":true,"_id":"0pbkjyo46CQgba6e"}
{"$$deleted":true,"_id":"1hQfZXATLVkytUFP"}
{"$$deleted":true,"_id":"1oOsU29tTkildVI5"}
{"$$deleted":true,"_id":"36szAJvgscY68PJS"}
{"$$deleted":true,"_id":"4AJ6PIAn0PbiaBmP"}
{"$$deleted":true,"_id":"5ooQxvQYFYJQe9cf"}
{"$$deleted":true,"_id":"BjyoHYrKqMB0CvYt"}
{"$$deleted":true,"_id":"DQKZhO77PcU4tdLP"}
{"$$deleted":true,"_id":"EXpbJnphtdFHXOhf"}
{"$$deleted":true,"_id":"GSYZPZmtJH09oPwR"}
{"$$deleted":true,"_id":"HWVggI1aXmtRhFL4"}
{"$$deleted":true,"_id":"KnrbdDxQF5buB6eI"}
{"$$deleted":true,"_id":"LdiWNSEX3YPoBXbB"}
{"$$deleted":true,"_id":"LjhM8vvj4uNVmuMz"}
{"$$deleted":true,"_id":"PnDVar6RSEYFUYFQ"}
{"$$deleted":true,"_id":"Q7SKsGDJTY1KJF9U"}
{"$$deleted":true,"_id":"TcDf5sfW01cbqPq0"}
{"$$deleted":true,"_id":"bYri4psrbgp8BVF1"}
{"$$deleted":true,"_id":"g1mkGjrsNPIZOO94"}
{"$$deleted":true,"_id":"g7JRTv0sK2zTKNpP"}
{"$$deleted":true,"_id":"ifaFDyfxS63oElmO"}
{"$$deleted":true,"_id":"jfZHJSOIULePxaAl"}
{"$$deleted":true,"_id":"jgLYUzUEXuhMAIWT"}
{"$$deleted":true,"_id":"mpSKuIuX9mOyssu5"}
{"$$deleted":true,"_id":"nZee97rtq4MSt87O"}
{"$$deleted":true,"_id":"nnviBiTKl13dbCgu"}
{"$$deleted":true,"_id":"p2YKPbWgwgUi0Jy4"}
{"$$deleted":true,"_id":"uu6mGssB0BMEu3EK"}
{"$$deleted":true,"_id":"uyYkZxp2oycALc1x"}
{"$$deleted":true,"_id":"vxY6QlwcTAaYKFPs"}
{"$$deleted":true,"_id":"w1HrznuC9VMbtulX"}
{"$$deleted":true,"_id":"w4IZTtqpszA4ifWW"}
{"$$deleted":true,"_id":"xS371VFzHdGbjvDg"}
{"$$deleted":true,"_id":"yA7Kv8khUZ2B9x6W"}
{"$$deleted":true,"_id":"yuB0ar7SlyilBwKu"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"jAVDre9VH6Lf3zK4"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"HjEHR7Fg9zFVV4Dx"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"UVRRcue5hTz3XSpy"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"sL2tCA2IxdvOt71j"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"G6aYhwkvq3Txabns"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"ofimT5ta6OTVUgsg"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"kgARdMALDVVszmlU"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"5EVaumwy90TUQtIx"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"hIqKZSuEuQu3IYPt"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"EUizPr1Uecn4u3Gr"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"nGCQC5h1z3UfTlA5"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"n9lO1x9A9ZZKPRR3"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"4sSBVUHW8inzPQG8"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"MPKg1VxJyiVtpWIJ"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"y8elVR8o66nwLmzN"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"41CpilLohoZ61AVO"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"vHMLravj3mCREt4Z"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"BUqmONws11YLTb5H"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"Qoc1A4KeblEPpln9"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"pKCcZasDoo9azWCV"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"kBcPkmgJplW3Rphz"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"Zszt17SaL8G7PBXN"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"qCSc9pnsOHkdsJix"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"iqyqeIkKQxglDr7H"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"9f3i2ENlMkGz9wBO"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"osAeWrugSVdBKIul"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"N4EloLSWQq6Gwqm4"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"7jmGl4XWKnoLSeIo"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n\nBy default, it passes all props:\n","type":"md","_id":"GtpDtWo5lJnpGQ7h"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"iLWi8oryyjkJDMGt"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"hCB9OtNOzMRrj2ty"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"PhjEWCa1Mfy6zSSH"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"bo9fJEc0otDncpae"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"3m3QVuSSP1cCmyWU"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"msFW19XneFrkswC0"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"1dPeK7Za0Bznz5V7"}
{"$$deleted":true,"_id":"1dPeK7Za0Bznz5V7"}
{"$$deleted":true,"_id":"3m3QVuSSP1cCmyWU"}
{"$$deleted":true,"_id":"41CpilLohoZ61AVO"}
{"$$deleted":true,"_id":"4sSBVUHW8inzPQG8"}
{"$$deleted":true,"_id":"5EVaumwy90TUQtIx"}
{"$$deleted":true,"_id":"7jmGl4XWKnoLSeIo"}
{"$$deleted":true,"_id":"9f3i2ENlMkGz9wBO"}
{"$$deleted":true,"_id":"BUqmONws11YLTb5H"}
{"$$deleted":true,"_id":"EUizPr1Uecn4u3Gr"}
{"$$deleted":true,"_id":"G6aYhwkvq3Txabns"}
{"$$deleted":true,"_id":"GtpDtWo5lJnpGQ7h"}
{"$$deleted":true,"_id":"HjEHR7Fg9zFVV4Dx"}
{"$$deleted":true,"_id":"MPKg1VxJyiVtpWIJ"}
{"$$deleted":true,"_id":"N4EloLSWQq6Gwqm4"}
{"$$deleted":true,"_id":"PhjEWCa1Mfy6zSSH"}
{"$$deleted":true,"_id":"Qoc1A4KeblEPpln9"}
{"$$deleted":true,"_id":"UVRRcue5hTz3XSpy"}
{"$$deleted":true,"_id":"Zszt17SaL8G7PBXN"}
{"$$deleted":true,"_id":"bo9fJEc0otDncpae"}
{"$$deleted":true,"_id":"hCB9OtNOzMRrj2ty"}
{"$$deleted":true,"_id":"hIqKZSuEuQu3IYPt"}
{"$$deleted":true,"_id":"iLWi8oryyjkJDMGt"}
{"$$deleted":true,"_id":"iqyqeIkKQxglDr7H"}
{"$$deleted":true,"_id":"jAVDre9VH6Lf3zK4"}
{"$$deleted":true,"_id":"kBcPkmgJplW3Rphz"}
{"$$deleted":true,"_id":"kgARdMALDVVszmlU"}
{"$$deleted":true,"_id":"msFW19XneFrkswC0"}
{"$$deleted":true,"_id":"n9lO1x9A9ZZKPRR3"}
{"$$deleted":true,"_id":"nGCQC5h1z3UfTlA5"}
{"$$deleted":true,"_id":"ofimT5ta6OTVUgsg"}
{"$$deleted":true,"_id":"osAeWrugSVdBKIul"}
{"$$deleted":true,"_id":"pKCcZasDoo9azWCV"}
{"$$deleted":true,"_id":"qCSc9pnsOHkdsJix"}
{"$$deleted":true,"_id":"sL2tCA2IxdvOt71j"}
{"$$deleted":true,"_id":"vHMLravj3mCREt4Z"}
{"$$deleted":true,"_id":"y8elVR8o66nwLmzN"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"8IHhXvvhWtFgLtQw"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"6o7OwxXj50UxVex4"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"a4d8PvFZWgToIVQN"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"QtwcVLEFCqppwM0x"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"jPafd0LfhLEOwuEB"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"A76e6ck0Dr4jg8nY"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"QanE2f2B1JTIuokj"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"F7X2zN8R5T4RohEJ"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"G5Qd6O6NX4iNy2r5"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"LsDBUBcPMGVrBiWx"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"srDDn6KCUMxvmF7W"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"oe6rC1V0uz1GECWr"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"BXLvTPmG3eTd9fIx"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"UvyMvYU2aU2uWMDe"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"Y3RLMG7qyK1T7yZd"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"8FQtsbTD7Z7EV6CY"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"nmwlm2Za8EYu8xLv"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"W9KeLjGDH1e5h8Bl"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"77grOInH5uuR0PnS"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"uGkPxKRzeKOy6gyI"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"CmvvJ7UoMr0VNKln"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"dDN7eUBPDIyLU3lu"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"dxaoFLaYqHV1FGg5"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"xoZQm9zVfq7xvXgM"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"F2gwYSCdIm8qxxDI"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"CKlRAwaPZyYPiPc4"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"iBD3O4rFLwiPz9d4"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"DLc8tddCK01rm9cr"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n\nBy default, it passes all props:\n\n```js\n\nconst List = () =>\n  <Cloner style={{ color: 'red' }}>\n    <ul/>\n    <ul/>\n    <ul/>\n    <ul/>\n  <Cloner/>\n\n\n```\n","type":"md","_id":"ReLq3feKA8o8qGky"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"WRMFd8xzR16sNyc7"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"lbnR2OUtNoKyZJxr"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"KHE0Ud1PxHCN9O7G"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"nux2QeobSrWl1WAf"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"cCAADHeKXjLVsH7J"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"pvbfOSJyFuAqA0gn"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"YMGS0Bu356sPPLNE"}
{"$$deleted":true,"_id":"6o7OwxXj50UxVex4"}
{"$$deleted":true,"_id":"77grOInH5uuR0PnS"}
{"$$deleted":true,"_id":"8FQtsbTD7Z7EV6CY"}
{"$$deleted":true,"_id":"8IHhXvvhWtFgLtQw"}
{"$$deleted":true,"_id":"A76e6ck0Dr4jg8nY"}
{"$$deleted":true,"_id":"BXLvTPmG3eTd9fIx"}
{"$$deleted":true,"_id":"CKlRAwaPZyYPiPc4"}
{"$$deleted":true,"_id":"CmvvJ7UoMr0VNKln"}
{"$$deleted":true,"_id":"DLc8tddCK01rm9cr"}
{"$$deleted":true,"_id":"F2gwYSCdIm8qxxDI"}
{"$$deleted":true,"_id":"F7X2zN8R5T4RohEJ"}
{"$$deleted":true,"_id":"G5Qd6O6NX4iNy2r5"}
{"$$deleted":true,"_id":"KHE0Ud1PxHCN9O7G"}
{"$$deleted":true,"_id":"LsDBUBcPMGVrBiWx"}
{"$$deleted":true,"_id":"QanE2f2B1JTIuokj"}
{"$$deleted":true,"_id":"QtwcVLEFCqppwM0x"}
{"$$deleted":true,"_id":"ReLq3feKA8o8qGky"}
{"$$deleted":true,"_id":"UvyMvYU2aU2uWMDe"}
{"$$deleted":true,"_id":"W9KeLjGDH1e5h8Bl"}
{"$$deleted":true,"_id":"WRMFd8xzR16sNyc7"}
{"$$deleted":true,"_id":"Y3RLMG7qyK1T7yZd"}
{"$$deleted":true,"_id":"YMGS0Bu356sPPLNE"}
{"$$deleted":true,"_id":"a4d8PvFZWgToIVQN"}
{"$$deleted":true,"_id":"cCAADHeKXjLVsH7J"}
{"$$deleted":true,"_id":"dDN7eUBPDIyLU3lu"}
{"$$deleted":true,"_id":"dxaoFLaYqHV1FGg5"}
{"$$deleted":true,"_id":"iBD3O4rFLwiPz9d4"}
{"$$deleted":true,"_id":"jPafd0LfhLEOwuEB"}
{"$$deleted":true,"_id":"lbnR2OUtNoKyZJxr"}
{"$$deleted":true,"_id":"nmwlm2Za8EYu8xLv"}
{"$$deleted":true,"_id":"nux2QeobSrWl1WAf"}
{"$$deleted":true,"_id":"oe6rC1V0uz1GECWr"}
{"$$deleted":true,"_id":"pvbfOSJyFuAqA0gn"}
{"$$deleted":true,"_id":"srDDn6KCUMxvmF7W"}
{"$$deleted":true,"_id":"uGkPxKRzeKOy6gyI"}
{"$$deleted":true,"_id":"xoZQm9zVfq7xvXgM"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"lP322oRcfXO0fIyI"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"E16B1MHUeMk1h1fq"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"NgMxVv2QovJnY5zt"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"CD6HHbmrs0l8gdY9"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"KlSG6qXpdYmXiFgb"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"cbzMo0lxw1wpp4uU"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"UZptQPxHEZrlU3DV"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"cVFUEXenfN3u8Sjc"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"ERLDjDVlrHcrtpiE"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"HASBOjK0ZGkt7dEY"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"RGX2BmOR9NAGcoXv"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"RZsab5V7OYsiCCvx"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"DQbrgBz5l74yzxDe"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"wVSEsWD8nXNm8z3K"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"53wE3f64Ph5hPme3"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"OyUYDZW712jPTk9c"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"PNtR60ivytedayA7"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"FnbOUV4irw0wttJs"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"0yRbOsbJ7F0khOkW"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"kGhk8MiBTS9kshSq"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"dYMMneLEKfaDc4HS"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"vGCvSVLC6jQYCEGc"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"ztSuU3iiTAThW1HF"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"ul8eADzEgaMUaf85"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"iWXKNNXsEDZSrdav"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"k0prQRb7lPunEpz3"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"gP5GOpjzSiSzBArv"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"isrddpjafLWaalQ6"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n\nBy default, it passes all props:\n\n```js\n\nconst List = () =>\n  <Cloner style={{ color: 'red' }}>\n    <ul>1</ul>\n    <ul>2</ul>\n    <ul>2</ul>\n  <Cloner/>\n\n\n```\n","type":"md","_id":"H1f2XdKpQ3L8grgi"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"JiSY1kVmyZdjQRfw"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"VpwGa7QQ2TazDIRS"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"uC8vO9shkpNvsav0"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"Yj4ycPosE2p5agox"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"DXnkwlJ0BdaS0aWP"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"TsJPlvpr1CwjBS1J"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"LUvZpsZgOXLhDYkS"}
{"$$deleted":true,"_id":"0yRbOsbJ7F0khOkW"}
{"$$deleted":true,"_id":"53wE3f64Ph5hPme3"}
{"$$deleted":true,"_id":"CD6HHbmrs0l8gdY9"}
{"$$deleted":true,"_id":"DQbrgBz5l74yzxDe"}
{"$$deleted":true,"_id":"DXnkwlJ0BdaS0aWP"}
{"$$deleted":true,"_id":"E16B1MHUeMk1h1fq"}
{"$$deleted":true,"_id":"ERLDjDVlrHcrtpiE"}
{"$$deleted":true,"_id":"FnbOUV4irw0wttJs"}
{"$$deleted":true,"_id":"H1f2XdKpQ3L8grgi"}
{"$$deleted":true,"_id":"HASBOjK0ZGkt7dEY"}
{"$$deleted":true,"_id":"JiSY1kVmyZdjQRfw"}
{"$$deleted":true,"_id":"KlSG6qXpdYmXiFgb"}
{"$$deleted":true,"_id":"LUvZpsZgOXLhDYkS"}
{"$$deleted":true,"_id":"NgMxVv2QovJnY5zt"}
{"$$deleted":true,"_id":"OyUYDZW712jPTk9c"}
{"$$deleted":true,"_id":"PNtR60ivytedayA7"}
{"$$deleted":true,"_id":"RGX2BmOR9NAGcoXv"}
{"$$deleted":true,"_id":"RZsab5V7OYsiCCvx"}
{"$$deleted":true,"_id":"TsJPlvpr1CwjBS1J"}
{"$$deleted":true,"_id":"UZptQPxHEZrlU3DV"}
{"$$deleted":true,"_id":"VpwGa7QQ2TazDIRS"}
{"$$deleted":true,"_id":"Yj4ycPosE2p5agox"}
{"$$deleted":true,"_id":"cVFUEXenfN3u8Sjc"}
{"$$deleted":true,"_id":"cbzMo0lxw1wpp4uU"}
{"$$deleted":true,"_id":"dYMMneLEKfaDc4HS"}
{"$$deleted":true,"_id":"gP5GOpjzSiSzBArv"}
{"$$deleted":true,"_id":"iWXKNNXsEDZSrdav"}
{"$$deleted":true,"_id":"isrddpjafLWaalQ6"}
{"$$deleted":true,"_id":"k0prQRb7lPunEpz3"}
{"$$deleted":true,"_id":"kGhk8MiBTS9kshSq"}
{"$$deleted":true,"_id":"lP322oRcfXO0fIyI"}
{"$$deleted":true,"_id":"uC8vO9shkpNvsav0"}
{"$$deleted":true,"_id":"ul8eADzEgaMUaf85"}
{"$$deleted":true,"_id":"vGCvSVLC6jQYCEGc"}
{"$$deleted":true,"_id":"wVSEsWD8nXNm8z3K"}
{"$$deleted":true,"_id":"ztSuU3iiTAThW1HF"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"Gb4Ir3bhqen6nK7W"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"R60U5uguRpuTvlxN"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"VgM2i0xVAy1FOxH8"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"Dqw41Htm5sJPxGdk"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"3NOkRajKC8qzhKmp"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"9i9c4rrknrUx6YwO"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"5CSkOj57IC1bsUcF"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"rE909SzVpHqxqCSq"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"7QxJrdIUUaJ3uFgF"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"pWXbhZyIWtMt9aTJ"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"HMnAkpTgVmmmN7yt"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"882NuExu6WnQYex1"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"KYcfEXTqC82zso2F"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"KdzCTZEYo4Ymy34d"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"ZNO36ShIbf83WhXg"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"HBpwkInyOAdKLDxb"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"Oh1kdiYpMsmbI3jC"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"QRJqB0IXx7VUtxxo"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"WwRdVu9m3dmjJZhI"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"42FNLIs6jVBi5qvL"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"JwOJzOwf7RWLXnv0"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"6cMzFAcXeMuowbJJ"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"7FCp127usuZkW6Zq"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"c8lfr0v9ail3e7pd"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"dMDMPrK66VXZyiT6"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"ZUeKD0RYdRYb6Occ"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"ZQRirtviwSqNqopV"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"NiwsqXYz3D9jOmkv"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n\nBy default, it passes all props:\n\n```js\n\nconst List = () =>\n  <Cloner style={{ color: 'red' }}>\n    <ul>1</ul>\n    <ul>2</ul>\n    <ul>2</ul>\n  <Cloner/>\n\n```\n","type":"md","_id":"409pD5AYZx4h55P4"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"5kFbI261D6Hqhctx"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"8j8gX8zbOdA8kOFi"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"7OoivoAa4DwCdB6j"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"GtisB3LV2YDQnaFm"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"iIHx1K7b8BexxLZq"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"Kmps9uP2e8xPvEFN"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"DuWRp7AI6YGcmp7B"}
{"$$deleted":true,"_id":"3NOkRajKC8qzhKmp"}
{"$$deleted":true,"_id":"409pD5AYZx4h55P4"}
{"$$deleted":true,"_id":"42FNLIs6jVBi5qvL"}
{"$$deleted":true,"_id":"5CSkOj57IC1bsUcF"}
{"$$deleted":true,"_id":"5kFbI261D6Hqhctx"}
{"$$deleted":true,"_id":"6cMzFAcXeMuowbJJ"}
{"$$deleted":true,"_id":"7FCp127usuZkW6Zq"}
{"$$deleted":true,"_id":"7OoivoAa4DwCdB6j"}
{"$$deleted":true,"_id":"7QxJrdIUUaJ3uFgF"}
{"$$deleted":true,"_id":"882NuExu6WnQYex1"}
{"$$deleted":true,"_id":"8j8gX8zbOdA8kOFi"}
{"$$deleted":true,"_id":"9i9c4rrknrUx6YwO"}
{"$$deleted":true,"_id":"Dqw41Htm5sJPxGdk"}
{"$$deleted":true,"_id":"DuWRp7AI6YGcmp7B"}
{"$$deleted":true,"_id":"Gb4Ir3bhqen6nK7W"}
{"$$deleted":true,"_id":"GtisB3LV2YDQnaFm"}
{"$$deleted":true,"_id":"HBpwkInyOAdKLDxb"}
{"$$deleted":true,"_id":"HMnAkpTgVmmmN7yt"}
{"$$deleted":true,"_id":"JwOJzOwf7RWLXnv0"}
{"$$deleted":true,"_id":"KYcfEXTqC82zso2F"}
{"$$deleted":true,"_id":"KdzCTZEYo4Ymy34d"}
{"$$deleted":true,"_id":"Kmps9uP2e8xPvEFN"}
{"$$deleted":true,"_id":"NiwsqXYz3D9jOmkv"}
{"$$deleted":true,"_id":"Oh1kdiYpMsmbI3jC"}
{"$$deleted":true,"_id":"QRJqB0IXx7VUtxxo"}
{"$$deleted":true,"_id":"R60U5uguRpuTvlxN"}
{"$$deleted":true,"_id":"VgM2i0xVAy1FOxH8"}
{"$$deleted":true,"_id":"WwRdVu9m3dmjJZhI"}
{"$$deleted":true,"_id":"ZNO36ShIbf83WhXg"}
{"$$deleted":true,"_id":"ZQRirtviwSqNqopV"}
{"$$deleted":true,"_id":"ZUeKD0RYdRYb6Occ"}
{"$$deleted":true,"_id":"c8lfr0v9ail3e7pd"}
{"$$deleted":true,"_id":"dMDMPrK66VXZyiT6"}
{"$$deleted":true,"_id":"iIHx1K7b8BexxLZq"}
{"$$deleted":true,"_id":"pWXbhZyIWtMt9aTJ"}
{"$$deleted":true,"_id":"rE909SzVpHqxqCSq"}
{"name":"app","path":["app","jsx","app"],"data":"","type":"md","_id":"zuHdQMl0AaltdZqJ"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"4azFG9M4uCsl6UP4"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"RyoYKQ8DAQO7IGXW"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"InoR2xcT4iSvAS2i"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"5cMUYcdvE6cfUZc2"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"hBbAeqotE9N0H300"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"axVhqD2922qhw3Ug"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"HQsY2lVI7p43yfGi"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"m0s1n8DFccMbcvMB"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"LRYIb2nCX7Mm9vdX"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"A44Kg6igNWWCaRCV"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"q7ZMvfj2nsEWzWSs"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"tDHFtHieMdoretB6"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"iTtVIGYeX6idaZPS"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"6YSBP6Ox9gKBaIxu"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"6bAFKECHbAn3X9FM"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"ukKyyvHKomIDXyQt"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"yYmRrb35RIG0ztMW"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"CmhWO8SS2tCPYG66"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"jMWLh97ZSXMHrzPt"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"FYLlLtuNPUm55QAv"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"F2AZvV8y5lWI25X3"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"3H2GslkgHukjza1v"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"NJhqreMZAZfisrhp"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"p4mHuE9dcoGieAE1"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"GR241vg5eDwBXaIL"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"2migOj7EREoqc1ky"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"c224vrcxWO2SFEk7"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"VO2QJ3ERY2wcNz2q"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n\nBy default, it passes all props:\n\n```js\n\nconst List = () =>\n  <Cloner style={{ color: 'red' }}>\n    <ul>1</ul>\n    <ul>2</ul>\n    <ul>2</ul>\n  <Cloner/>\n\n```\n","type":"md","_id":"HIsNSpvLkWIylePB"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"5iKDcMnziwSaSIvw"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"Kvs8FsCf1B4VPl9i"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"VElJ87FncEwesePU"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"LNiMqlPdBwzaGhnX"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"a5CTMzbyRJUBCRNj"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"nSeRm6JtN0cIYcHq"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"achkW4tJOXAb3rzs"}
{"$$deleted":true,"_id":"2migOj7EREoqc1ky"}
{"$$deleted":true,"_id":"3H2GslkgHukjza1v"}
{"$$deleted":true,"_id":"4azFG9M4uCsl6UP4"}
{"$$deleted":true,"_id":"5cMUYcdvE6cfUZc2"}
{"$$deleted":true,"_id":"5iKDcMnziwSaSIvw"}
{"$$deleted":true,"_id":"6YSBP6Ox9gKBaIxu"}
{"$$deleted":true,"_id":"6bAFKECHbAn3X9FM"}
{"$$deleted":true,"_id":"A44Kg6igNWWCaRCV"}
{"$$deleted":true,"_id":"CmhWO8SS2tCPYG66"}
{"$$deleted":true,"_id":"F2AZvV8y5lWI25X3"}
{"$$deleted":true,"_id":"FYLlLtuNPUm55QAv"}
{"$$deleted":true,"_id":"GR241vg5eDwBXaIL"}
{"$$deleted":true,"_id":"HIsNSpvLkWIylePB"}
{"$$deleted":true,"_id":"HQsY2lVI7p43yfGi"}
{"$$deleted":true,"_id":"InoR2xcT4iSvAS2i"}
{"$$deleted":true,"_id":"Kvs8FsCf1B4VPl9i"}
{"$$deleted":true,"_id":"LNiMqlPdBwzaGhnX"}
{"$$deleted":true,"_id":"LRYIb2nCX7Mm9vdX"}
{"$$deleted":true,"_id":"NJhqreMZAZfisrhp"}
{"$$deleted":true,"_id":"RyoYKQ8DAQO7IGXW"}
{"$$deleted":true,"_id":"VElJ87FncEwesePU"}
{"$$deleted":true,"_id":"VO2QJ3ERY2wcNz2q"}
{"$$deleted":true,"_id":"a5CTMzbyRJUBCRNj"}
{"$$deleted":true,"_id":"achkW4tJOXAb3rzs"}
{"$$deleted":true,"_id":"axVhqD2922qhw3Ug"}
{"$$deleted":true,"_id":"c224vrcxWO2SFEk7"}
{"$$deleted":true,"_id":"hBbAeqotE9N0H300"}
{"$$deleted":true,"_id":"iTtVIGYeX6idaZPS"}
{"$$deleted":true,"_id":"jMWLh97ZSXMHrzPt"}
{"$$deleted":true,"_id":"m0s1n8DFccMbcvMB"}
{"$$deleted":true,"_id":"nSeRm6JtN0cIYcHq"}
{"$$deleted":true,"_id":"p4mHuE9dcoGieAE1"}
{"$$deleted":true,"_id":"q7ZMvfj2nsEWzWSs"}
{"$$deleted":true,"_id":"tDHFtHieMdoretB6"}
{"$$deleted":true,"_id":"ukKyyvHKomIDXyQt"}
{"$$deleted":true,"_id":"yYmRrb35RIG0ztMW"}
{"$$deleted":true,"_id":"zuHdQMl0AaltdZqJ"}
{"name":"app","path":["app","jsx","app"],"data":"# App\n","type":"md","_id":"sodqIXkWnr5B4izx"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"me9XolssikGxyAUR"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"m5zH9mOLdI3OpQ4W"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"g7GfY8aLEfcaATZv"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"ySD2BI55gmDxIqUr"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"EyKH6PMQt7IKcz6M"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"utX4NuzaeeYfFu6W"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"EZ23cn0zhkterw2J"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"wljFzH1EtTDRTtpN"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"jbnhIRRrRyrXOIGS"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"wB1Ak5cyMCOG6rbF"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"WUxU8ydwHDUjzOCF"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"doyURoQqDkJ22FeR"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"Cajd6984luOaqLt6"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"0KPqpsItSG7ag8Zq"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"U9KaxhjzjhDEJzL3"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"nRxCQx04WEoJMyln"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"fIb9hGCD99juEzZz"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"oo2lgBHAY3eamluP"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"4G895aO8Eijm6QHj"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"VClxRQSDlQL8DqLk"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"GE9hjOACFYoVScUi"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"ENA7trqcR4ejoKYV"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"eKRbw0mhlsdEOP85"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"ViY3oTiE3b01Tgxf"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"FkGLNbKXuVitOsCm"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"N0f35689jDAFkl9T"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"Bnan5nNcRxq8Nwow"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"NerhZNSd7ehxGsJH"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n\nBy default, it passes all props:\n\n```js\n\nconst List = () =>\n  <Cloner style={{ color: 'red' }}>\n    <ul>1</ul>\n    <ul>2</ul>\n    <ul>2</ul>\n  <Cloner/>\n\n```\n","type":"md","_id":"dRtlXuYSFiUd6KBl"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"3rzyEUsyzz6ascrT"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"WZwEXNDkzX08YSyn"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"zl4V4Y9Ws0zuOpaH"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"YKG0ITphIBBQ5Iuh"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"r4EXqAJVCTYfcBHp"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"jt9g1meUhtpdzj5q"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"uDk35s1NX9APYHpk"}
{"$$deleted":true,"_id":"0KPqpsItSG7ag8Zq"}
{"$$deleted":true,"_id":"3rzyEUsyzz6ascrT"}
{"$$deleted":true,"_id":"4G895aO8Eijm6QHj"}
{"$$deleted":true,"_id":"Bnan5nNcRxq8Nwow"}
{"$$deleted":true,"_id":"Cajd6984luOaqLt6"}
{"$$deleted":true,"_id":"ENA7trqcR4ejoKYV"}
{"$$deleted":true,"_id":"EZ23cn0zhkterw2J"}
{"$$deleted":true,"_id":"EyKH6PMQt7IKcz6M"}
{"$$deleted":true,"_id":"FkGLNbKXuVitOsCm"}
{"$$deleted":true,"_id":"GE9hjOACFYoVScUi"}
{"$$deleted":true,"_id":"N0f35689jDAFkl9T"}
{"$$deleted":true,"_id":"NerhZNSd7ehxGsJH"}
{"$$deleted":true,"_id":"U9KaxhjzjhDEJzL3"}
{"$$deleted":true,"_id":"VClxRQSDlQL8DqLk"}
{"$$deleted":true,"_id":"ViY3oTiE3b01Tgxf"}
{"$$deleted":true,"_id":"WUxU8ydwHDUjzOCF"}
{"$$deleted":true,"_id":"WZwEXNDkzX08YSyn"}
{"$$deleted":true,"_id":"YKG0ITphIBBQ5Iuh"}
{"$$deleted":true,"_id":"dRtlXuYSFiUd6KBl"}
{"$$deleted":true,"_id":"doyURoQqDkJ22FeR"}
{"$$deleted":true,"_id":"eKRbw0mhlsdEOP85"}
{"$$deleted":true,"_id":"fIb9hGCD99juEzZz"}
{"$$deleted":true,"_id":"g7GfY8aLEfcaATZv"}
{"$$deleted":true,"_id":"jbnhIRRrRyrXOIGS"}
{"$$deleted":true,"_id":"jt9g1meUhtpdzj5q"}
{"$$deleted":true,"_id":"m5zH9mOLdI3OpQ4W"}
{"$$deleted":true,"_id":"me9XolssikGxyAUR"}
{"$$deleted":true,"_id":"nRxCQx04WEoJMyln"}
{"$$deleted":true,"_id":"oo2lgBHAY3eamluP"}
{"$$deleted":true,"_id":"r4EXqAJVCTYfcBHp"}
{"$$deleted":true,"_id":"sodqIXkWnr5B4izx"}
{"$$deleted":true,"_id":"uDk35s1NX9APYHpk"}
{"$$deleted":true,"_id":"utX4NuzaeeYfFu6W"}
{"$$deleted":true,"_id":"wB1Ak5cyMCOG6rbF"}
{"$$deleted":true,"_id":"wljFzH1EtTDRTtpN"}
{"$$deleted":true,"_id":"ySD2BI55gmDxIqUr"}
{"$$deleted":true,"_id":"zl4V4Y9Ws0zuOpaH"}
{"name":"app","path":["app","jsx","app"],"data":"# App\n","type":"md","_id":"64QweyEKjAXML66M"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"YVpkLfcMKYGJgI8Z"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"RS30oZ49qmeZJRs6"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"pFJEyxfJt3erSizB"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"Udg8TsvcHNnWR5qR"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"oY4Z02MmgPNTI8t4"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"pXKIoDGOIdA7Nj2E"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"ckiihKFA4SP39Wwn"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"sNsw1ONYjwPK97fk"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"Pq2nKgRvfItv5O52"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"6bRW4gq1WbvRjnmf"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"6usFkGtq85h2UcVr"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"t5a4CD5WsL8HzImD"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"nXh9XwlTP56QXuRy"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"CHOuCgEqERNjLs3j"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"5rrtzYSvLznFjhNn"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"nvLYjBLgHqeuLnzL"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"mZXJ0PGivfHi7B7x"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"tomkTPpg5JHLEieS"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"AfDRsuXMZQBZry3H"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"Aig2c2SaqMDaWsgH"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"gA6mJGcGK9oZzLKP"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"wKK8igETkaFmFmFu"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"OLQmJ7bUCR9uBOpg"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"JvEypaeUaPjdXItl"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"CyfSkTTKhjWK3TLg"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"V6aSKF4dTlEw3SYs"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"7Eb9YF5ArVSKwoBJ"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"Javyu2iRwm4CZmjQ"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n\nBy default, it passes all props:\n\n```js\n\nconst List = () =>\n  <Cloner style={{ color: 'red' }}>\n    <ul>1</ul>\n    <ul>2</ul>\n    <ul>2</ul>\n  <Cloner/>\n\n```\n","type":"md","_id":"aQwauPUm48BJhv64"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"hipCyK0KfhZl0l2K"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"gPNJ9jt0cGIhcoEN"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"9yNF3offD4aMCBXM"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"RqbOKnLkjZHrfDeT"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"pVMEIbfyktPZJzNk"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"LdRVpsnL2wFDjz4P"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"1f1ZATcwLiLvhCeW"}
{"$$deleted":true,"_id":"1f1ZATcwLiLvhCeW"}
{"$$deleted":true,"_id":"5rrtzYSvLznFjhNn"}
{"$$deleted":true,"_id":"64QweyEKjAXML66M"}
{"$$deleted":true,"_id":"6bRW4gq1WbvRjnmf"}
{"$$deleted":true,"_id":"6usFkGtq85h2UcVr"}
{"$$deleted":true,"_id":"7Eb9YF5ArVSKwoBJ"}
{"$$deleted":true,"_id":"9yNF3offD4aMCBXM"}
{"$$deleted":true,"_id":"AfDRsuXMZQBZry3H"}
{"$$deleted":true,"_id":"Aig2c2SaqMDaWsgH"}
{"$$deleted":true,"_id":"CHOuCgEqERNjLs3j"}
{"$$deleted":true,"_id":"CyfSkTTKhjWK3TLg"}
{"$$deleted":true,"_id":"Javyu2iRwm4CZmjQ"}
{"$$deleted":true,"_id":"JvEypaeUaPjdXItl"}
{"$$deleted":true,"_id":"LdRVpsnL2wFDjz4P"}
{"$$deleted":true,"_id":"OLQmJ7bUCR9uBOpg"}
{"$$deleted":true,"_id":"Pq2nKgRvfItv5O52"}
{"$$deleted":true,"_id":"RS30oZ49qmeZJRs6"}
{"$$deleted":true,"_id":"RqbOKnLkjZHrfDeT"}
{"$$deleted":true,"_id":"Udg8TsvcHNnWR5qR"}
{"$$deleted":true,"_id":"V6aSKF4dTlEw3SYs"}
{"$$deleted":true,"_id":"YVpkLfcMKYGJgI8Z"}
{"$$deleted":true,"_id":"aQwauPUm48BJhv64"}
{"$$deleted":true,"_id":"ckiihKFA4SP39Wwn"}
{"$$deleted":true,"_id":"gA6mJGcGK9oZzLKP"}
{"$$deleted":true,"_id":"gPNJ9jt0cGIhcoEN"}
{"$$deleted":true,"_id":"hipCyK0KfhZl0l2K"}
{"$$deleted":true,"_id":"mZXJ0PGivfHi7B7x"}
{"$$deleted":true,"_id":"nXh9XwlTP56QXuRy"}
{"$$deleted":true,"_id":"nvLYjBLgHqeuLnzL"}
{"$$deleted":true,"_id":"oY4Z02MmgPNTI8t4"}
{"$$deleted":true,"_id":"pFJEyxfJt3erSizB"}
{"$$deleted":true,"_id":"pVMEIbfyktPZJzNk"}
{"$$deleted":true,"_id":"pXKIoDGOIdA7Nj2E"}
{"$$deleted":true,"_id":"sNsw1ONYjwPK97fk"}
{"$$deleted":true,"_id":"t5a4CD5WsL8HzImD"}
{"$$deleted":true,"_id":"tomkTPpg5JHLEieS"}
{"$$deleted":true,"_id":"wKK8igETkaFmFmFu"}
{"name":"app","path":["app"],"data":"\n\n# App\n\nApps can be declared by chaining app entities via jsx:\n\n```js\n\n\n\n```\n","type":"md","_id":"llv8emXneCZfL3KK"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"LvZ7R47DRMQpbLyi"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"vMpBEriPozSoCHDr"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"D3T2uR1IqW2UEhMz"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"8d7JhDdxrdVrTQDI"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"a110FvoRxJErHnE8"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"3jYVBgzFkyn4HEmY"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"cxSdCPGjrudo1Pui"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"2bUCDyFqnE2btqhp"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"kPgOPdlqTJa3mNyb"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"g9NdtROMxed3tmjq"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"syS50wKYQhD2jWcv"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"5sEiq81JxbLyDHw9"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"W2KJWbaYNeWHjb46"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"QbTVSSGcQZ1oMaKI"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"DhzKc7LYTZ8gNH4j"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"ptI1xD9GBuzgP4bs"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"x2iilRocPlpu8EBJ"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"VtY8oKaxx6zY6CaR"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"IJXxqpiaqtQguKzE"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"fyr4Z6A02w5xXETk"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"tYfqO4XuDK0Zekg2"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"NCTKn4187jk3WCLY"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"QOT9jZt5u8GpYCfg"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"i1dMg9DJDQqSo0cd"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"JCA5xjU8NPZzoiYp"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"7AjdiFUjvD9qDRlF"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"i8vlRibiKB16rEzO"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"SjF00h5UUtofKZXE"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n\nBy default, it passes all props:\n\n```js\n\nconst List = () =>\n  <Cloner style={{ color: 'red' }}>\n    <ul>1</ul>\n    <ul>2</ul>\n    <ul>2</ul>\n  <Cloner/>\n\n```\n","type":"md","_id":"qm3F0QMV5Ja5noGb"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"YJcDez2qvDnM7KLp"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"reFnWL4hRaAyieL5"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"N8EypQ46R3JG0ZeU"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"jZkWOjybYXNe0sV4"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"TyUtscZmnBais7mg"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"Wg7J5QbFaZ7uQ6ll"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"bJkT44SVnE6pUobl"}
{"$$deleted":true,"_id":"2bUCDyFqnE2btqhp"}
{"$$deleted":true,"_id":"3jYVBgzFkyn4HEmY"}
{"$$deleted":true,"_id":"5sEiq81JxbLyDHw9"}
{"$$deleted":true,"_id":"7AjdiFUjvD9qDRlF"}
{"$$deleted":true,"_id":"8d7JhDdxrdVrTQDI"}
{"$$deleted":true,"_id":"D3T2uR1IqW2UEhMz"}
{"$$deleted":true,"_id":"DhzKc7LYTZ8gNH4j"}
{"$$deleted":true,"_id":"IJXxqpiaqtQguKzE"}
{"$$deleted":true,"_id":"JCA5xjU8NPZzoiYp"}
{"$$deleted":true,"_id":"LvZ7R47DRMQpbLyi"}
{"$$deleted":true,"_id":"N8EypQ46R3JG0ZeU"}
{"$$deleted":true,"_id":"NCTKn4187jk3WCLY"}
{"$$deleted":true,"_id":"QOT9jZt5u8GpYCfg"}
{"$$deleted":true,"_id":"QbTVSSGcQZ1oMaKI"}
{"$$deleted":true,"_id":"SjF00h5UUtofKZXE"}
{"$$deleted":true,"_id":"TyUtscZmnBais7mg"}
{"$$deleted":true,"_id":"VtY8oKaxx6zY6CaR"}
{"$$deleted":true,"_id":"W2KJWbaYNeWHjb46"}
{"$$deleted":true,"_id":"Wg7J5QbFaZ7uQ6ll"}
{"$$deleted":true,"_id":"YJcDez2qvDnM7KLp"}
{"$$deleted":true,"_id":"a110FvoRxJErHnE8"}
{"$$deleted":true,"_id":"bJkT44SVnE6pUobl"}
{"$$deleted":true,"_id":"cxSdCPGjrudo1Pui"}
{"$$deleted":true,"_id":"fyr4Z6A02w5xXETk"}
{"$$deleted":true,"_id":"g9NdtROMxed3tmjq"}
{"$$deleted":true,"_id":"i1dMg9DJDQqSo0cd"}
{"$$deleted":true,"_id":"i8vlRibiKB16rEzO"}
{"$$deleted":true,"_id":"jZkWOjybYXNe0sV4"}
{"$$deleted":true,"_id":"kPgOPdlqTJa3mNyb"}
{"$$deleted":true,"_id":"llv8emXneCZfL3KK"}
{"$$deleted":true,"_id":"ptI1xD9GBuzgP4bs"}
{"$$deleted":true,"_id":"qm3F0QMV5Ja5noGb"}
{"$$deleted":true,"_id":"reFnWL4hRaAyieL5"}
{"$$deleted":true,"_id":"syS50wKYQhD2jWcv"}
{"$$deleted":true,"_id":"tYfqO4XuDK0Zekg2"}
{"$$deleted":true,"_id":"vMpBEriPozSoCHDr"}
{"$$deleted":true,"_id":"x2iilRocPlpu8EBJ"}
{"name":"app","path":["app"],"data":"\n\n# App\n\nApps can be declared by chaining app entities via jsx:\n\n```js\n\n```\n","type":"md","_id":"VaQM45lVAOAu9tl5"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"JZo8mJB0lywEbNz8"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"XWnU8jcswZy01620"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"X0q9TWmRo6yqaGIz"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"SWPpBGqCZGdg95Im"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"kdPSPDz2XNd20dno"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"bH0a1V2eE4XWVlvF"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"52NtaZGkVXs2BHsy"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"icvY67Sz5Nffobgq"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"5V0eJhd7Y0PE1DLj"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"fi4N6bVRxhxH12Fp"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"UjkBXJhRGowyw8YU"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"EB73UnpBE6juEryr"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"1DgXsVXbHx4eJoyZ"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"370dr6RnJuSMu6Yk"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"3hMRWQLvrLNfQH4Z"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"q02kQ7WVQNdkj3RH"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"eqZAJGGIL3Krnbre"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"DcCdLeBs2GhwWjWn"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"DmYkWHC4FrKKWHc7"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"wQAsTXSSkWwSZakM"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"9tCevRCFU9x24nS0"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"LGVdfu5n2Xb0JWqk"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"Hul6kv1bJCPR5FzZ"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"WHbcC0846PFbA5Ny"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"uUabuc42RJ4RYN2N"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"xydllRHXEcRg3Qbf"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"ur8siRrHZ9oIFDuA"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"4s0M4PazjIw9EZeU"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n\nBy default, it passes all props:\n\n```js\n\nconst List = () =>\n  <Cloner style={{ color: 'red' }}>\n    <ul>1</ul>\n    <ul>2</ul>\n    <ul>2</ul>\n  <Cloner/>\n\n```\n","type":"md","_id":"iv5hhwuQ0qswWWsd"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"7qWgDy5eDLPZGK1R"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"tUDhsxksGEa6qRKm"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"Th7uRdUus5aMRPUa"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"871Dqn84fERwmyX3"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"dfbeuo1Cbfc3mptm"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"SsJuBJWVnSc7SiVS"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"kMy1l5mv2bWN4WYC"}
{"$$deleted":true,"_id":"1DgXsVXbHx4eJoyZ"}
{"$$deleted":true,"_id":"370dr6RnJuSMu6Yk"}
{"$$deleted":true,"_id":"3hMRWQLvrLNfQH4Z"}
{"$$deleted":true,"_id":"4s0M4PazjIw9EZeU"}
{"$$deleted":true,"_id":"52NtaZGkVXs2BHsy"}
{"$$deleted":true,"_id":"5V0eJhd7Y0PE1DLj"}
{"$$deleted":true,"_id":"7qWgDy5eDLPZGK1R"}
{"$$deleted":true,"_id":"871Dqn84fERwmyX3"}
{"$$deleted":true,"_id":"9tCevRCFU9x24nS0"}
{"$$deleted":true,"_id":"DcCdLeBs2GhwWjWn"}
{"$$deleted":true,"_id":"DmYkWHC4FrKKWHc7"}
{"$$deleted":true,"_id":"EB73UnpBE6juEryr"}
{"$$deleted":true,"_id":"Hul6kv1bJCPR5FzZ"}
{"$$deleted":true,"_id":"JZo8mJB0lywEbNz8"}
{"$$deleted":true,"_id":"LGVdfu5n2Xb0JWqk"}
{"$$deleted":true,"_id":"SWPpBGqCZGdg95Im"}
{"$$deleted":true,"_id":"SsJuBJWVnSc7SiVS"}
{"$$deleted":true,"_id":"Th7uRdUus5aMRPUa"}
{"$$deleted":true,"_id":"UjkBXJhRGowyw8YU"}
{"$$deleted":true,"_id":"VaQM45lVAOAu9tl5"}
{"$$deleted":true,"_id":"WHbcC0846PFbA5Ny"}
{"$$deleted":true,"_id":"X0q9TWmRo6yqaGIz"}
{"$$deleted":true,"_id":"XWnU8jcswZy01620"}
{"$$deleted":true,"_id":"bH0a1V2eE4XWVlvF"}
{"$$deleted":true,"_id":"dfbeuo1Cbfc3mptm"}
{"$$deleted":true,"_id":"eqZAJGGIL3Krnbre"}
{"$$deleted":true,"_id":"fi4N6bVRxhxH12Fp"}
{"$$deleted":true,"_id":"icvY67Sz5Nffobgq"}
{"$$deleted":true,"_id":"iv5hhwuQ0qswWWsd"}
{"$$deleted":true,"_id":"kMy1l5mv2bWN4WYC"}
{"$$deleted":true,"_id":"kdPSPDz2XNd20dno"}
{"$$deleted":true,"_id":"q02kQ7WVQNdkj3RH"}
{"$$deleted":true,"_id":"tUDhsxksGEa6qRKm"}
{"$$deleted":true,"_id":"uUabuc42RJ4RYN2N"}
{"$$deleted":true,"_id":"ur8siRrHZ9oIFDuA"}
{"$$deleted":true,"_id":"wQAsTXSSkWwSZakM"}
{"$$deleted":true,"_id":"xydllRHXEcRg3Qbf"}
{"name":"app","path":["app"],"data":"\n\n# App\n\nApps can be declared by chaining app entities via jsx:\n\n```js\nimport App from '@benzed/app'\n\n// @jsx App.declareEntity\n\nconst app = <app>\n  <rest />\n</app>\n\nApp.start(app)\n```\n","type":"md","_id":"RK8HDpFAJtNhXfQR"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"cq880LorBBjw7EIB"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"HIvoOuUdeRjXqwbb"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"JXPJhmsZ2zLer8RL"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"mkyS9TKnyWxJCwST"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"ruVNi5YtFq8aLBOr"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"b4ohythK405FxBYz"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"wYyW70JWSW3DduMC"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"tpORm05K8DAWYJAo"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"YjUMo37lDGdiFtyN"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"A09mSbbLT79M5RQV"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"w4D5VsBGG2FcL5iz"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"HHjBDgMGq9CzWnXX"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"OqfqaE0dZvKu6IOh"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"LiFXxAu1R4LUX7rf"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"fdTzjLhMG1JYdi5V"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"pjbrzs76JoIUUB9a"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"V0mSlzmoIzoz1xHB"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"QHy1zAeXCcll4zF8"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"o4EousjLAwc6WpZT"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"Emp15JKh66tFIFFz"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"5FptOjeJ0xWSALp1"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"YTq0aHmQld0tSjv4"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"mvXvx1jdnUuzWCeF"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"7vnuQQsNhk5dav4J"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"1eyYsLBsjjlF0x9w"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"A06b1O5AvbcxStuB"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"IXx4P5gEfymxkaWy"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"iTCUQVz2ZLelnxNX"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n\nBy default, it passes all props:\n\n```js\n\nconst List = () =>\n  <Cloner style={{ color: 'red' }}>\n    <ul>1</ul>\n    <ul>2</ul>\n    <ul>2</ul>\n  <Cloner/>\n\n```\n","type":"md","_id":"mCMoimlSMEjRR7xH"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"ccgBZKkE5DJmzAez"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"Ez9iUmL4nGkuMi6r"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"MxUbJrlAjVkuAt9Y"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"LijrriFotpu5Y5Ug"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"rFttxZYDq6e1ColE"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"duti4u6N2ssxnM1l"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"MPc1yx262qZ3sDws"}
{"$$deleted":true,"_id":"1eyYsLBsjjlF0x9w"}
{"$$deleted":true,"_id":"5FptOjeJ0xWSALp1"}
{"$$deleted":true,"_id":"7vnuQQsNhk5dav4J"}
{"$$deleted":true,"_id":"A06b1O5AvbcxStuB"}
{"$$deleted":true,"_id":"A09mSbbLT79M5RQV"}
{"$$deleted":true,"_id":"Emp15JKh66tFIFFz"}
{"$$deleted":true,"_id":"Ez9iUmL4nGkuMi6r"}
{"$$deleted":true,"_id":"HHjBDgMGq9CzWnXX"}
{"$$deleted":true,"_id":"HIvoOuUdeRjXqwbb"}
{"$$deleted":true,"_id":"IXx4P5gEfymxkaWy"}
{"$$deleted":true,"_id":"JXPJhmsZ2zLer8RL"}
{"$$deleted":true,"_id":"LiFXxAu1R4LUX7rf"}
{"$$deleted":true,"_id":"LijrriFotpu5Y5Ug"}
{"$$deleted":true,"_id":"MPc1yx262qZ3sDws"}
{"$$deleted":true,"_id":"MxUbJrlAjVkuAt9Y"}
{"$$deleted":true,"_id":"OqfqaE0dZvKu6IOh"}
{"$$deleted":true,"_id":"QHy1zAeXCcll4zF8"}
{"$$deleted":true,"_id":"RK8HDpFAJtNhXfQR"}
{"$$deleted":true,"_id":"V0mSlzmoIzoz1xHB"}
{"$$deleted":true,"_id":"YTq0aHmQld0tSjv4"}
{"$$deleted":true,"_id":"YjUMo37lDGdiFtyN"}
{"$$deleted":true,"_id":"b4ohythK405FxBYz"}
{"$$deleted":true,"_id":"ccgBZKkE5DJmzAez"}
{"$$deleted":true,"_id":"cq880LorBBjw7EIB"}
{"$$deleted":true,"_id":"duti4u6N2ssxnM1l"}
{"$$deleted":true,"_id":"fdTzjLhMG1JYdi5V"}
{"$$deleted":true,"_id":"iTCUQVz2ZLelnxNX"}
{"$$deleted":true,"_id":"mCMoimlSMEjRR7xH"}
{"$$deleted":true,"_id":"mkyS9TKnyWxJCwST"}
{"$$deleted":true,"_id":"mvXvx1jdnUuzWCeF"}
{"$$deleted":true,"_id":"o4EousjLAwc6WpZT"}
{"$$deleted":true,"_id":"pjbrzs76JoIUUB9a"}
{"$$deleted":true,"_id":"rFttxZYDq6e1ColE"}
{"$$deleted":true,"_id":"ruVNi5YtFq8aLBOr"}
{"$$deleted":true,"_id":"tpORm05K8DAWYJAo"}
{"$$deleted":true,"_id":"w4D5VsBGG2FcL5iz"}
{"$$deleted":true,"_id":"wYyW70JWSW3DduMC"}
{"name":"app","path":["app"],"data":"\n\n# App\n\nApps can be declared by chaining app entities via jsx:\n\n```js\nimport App from '@benzed/app'\n\n// @jsx App.declareEntity\n\nconst app = <app>\n  <rest />\n</app>\n\nApp.start(app)\n```\n","type":"md","_id":"DYYWqperw8OWmGl4"}
{"name":"adjacent","path":["array","adjacent"],"data":"The adjacent function gets the neighbour of the supplied value in an array:\n```js\nimport { adjacent } from '@benzed/array'\n\nconst next = adjacent([ 'one', 'two', 'three' ], 'one')\nconsole.log(next) // 'two'\n```\n\nIf the supplied value is at the end of the array, the returned value will\nbe wrapped around:  \n```js\nconst first = adjacent([ 1, 2, 3, 4 ], 4)\nconsole.log(first) // 1\n```\n\nOptionally takes a delta argument:\n```js\nconst array = [ 'min', 1, 2, 3, 'max' ]\nconst two = adjacent(array, 'min', 2)\nconsole.log(two) // 2\n\nconst min = adjacent(array, 'max', -4)\nconsole.log(min) // 'min'\n```\n\nOptionally bindable:\n```js\nconst three = [1,2,3]::adjacent(1, 2)\nconsole.log(three) // 3\n```\n","type":"md","_id":"6ut773qOxwDzWUIn"}
{"name":"first","path":["array","first"],"data":"Returns the first element of an array\n```js\nimport { first } from '@benzed/array'\n\nfirst([ 'one', 'two', 'three' ]) // 'one'\n```\n","type":"md","_id":"LGPTEuyCDaqCFKAm"}
{"name":"flatten","path":["array","flatten"],"data":"The flatten function takes an Array and decomposes any nested arrays.\n\n```js\nimport { flatten } from '@benzed/array'\n\nconst flattened = flatten([1, [2], [3, [4]]])\nconsole.log(flattened) // [1, 2, 3, 4]\n```\n\nOptionally bindable:\n\n```js\nconst flattened = [1, [2]]::flatten()\nconsole.log(flattened) // [1, 2]\n```\n","type":"md","_id":"VF5bd2n2kx5oc51d"}
{"name":"last","path":["array","last"],"data":"Returns the last element of an array\n```js\nimport { last } from '@benzed/array'\n\nlast([ 'one', 'two', 'three' ]) // 'three'\n```\n","type":"md","_id":"0gJSvlGS0W3peDRM"}
{"name":"pluck","path":["array","pluck"],"data":"\nThe pluck function removes a number of items from an array that pass a test:\n```js\nimport { pluck } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst even = pluck(arr, n => n % 2 === 0)\n\nconsole.log(even) // [ 2, 4, 6 ]\nconsole.log(arr) // [ 1, 3, 5 ]\n```\n\nThe input array is mutated, and items that pass the test are returned in a new array.\n\nCan also take a count argument, which maximizes the number of elements returned:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst firstTwoOdd = pluck(arr, n => n % 2 === 1, 2)\n\nconsole.log(firstTwoOdd) // [ 1, 3 ]\nconsole.log(arr) // [ 2, 4, 5, 6 ]\n```\n\nPluck is also optionally bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nconst odd = arr::pluck(n => n % 2 === 1)\n\nconsole.log(odd) // [ 1, 3, 5 ]\nconsole.log(arr) // [ 2, 4, 6 ]\n```\n","type":"md","_id":"GqlyoXowqkxbnmTa"}
{"name":"shuffle","path":["array","shuffle"],"data":"The shuffle function randomizes the order of an array.\nMutates the array in place, does not return a new array:\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"XIcKfNHUw6mx4nJ6"}
{"name":"unique","path":["array","unique"],"data":"\nThe shuffle function randomizes the order of an array.\n\nReturns the Array, mutated in place.\n\n```js\nimport { shuffle } from '@benzed/array'\n\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\nshuffle(arr)\n\nconsole.log(arr) // will now be in a random order\n```\n\nOptionally Bindable:\n```js\nconst arr = [ 1, 2, 3, 4, 5, 6 ]\narr::shuffle()\n```\n\nAlso works on strings:\n```js\nconst str = '1234578'\nstr::shuffle() // returns a randomized string\n```\n","type":"md","_id":"1LA4kA6SswKxhrjg"}
{"name":"wrap","path":["array","wrap"],"data":"\n\nThe wrap function ensures that a given value is an array. If it is not an\narray, the value gets wrapped into one:\n```js\nimport { wrap } from '@benzed/array'\n\nconst one = wrap(1)\n\nconsole.log(one) // [1]\nconsole.log(wrap(one)) // [1]\n```\n\nOptionally Bindable:\n```js\n1::wrap() // [1]\n```\n\n","type":"md","_id":"FCShew2zVblWRhCk"}
{"name":"unwrap","path":["array","unwrap"],"data":"\n\nThe unwrap function ensures that a given value is not an array. If it is an array,\nthe first element in the array is returned:\n```js\nimport { unwrap } from '@benzed/array'\n\nconst one = unwrap([1])\n\nconsole.log(one) // 1\nconsole.log(unwrap(one)) // 1\n```\n\nOptionally Bindable:\n```js\n[1]::unwrap() // 1\n```\n","type":"md","_id":"tyuJrpw9Jp6ZLDQv"}
{"name":"api","path":["dev","documentation","api"],"data":"Heading\n=======\n\n# h1\n## h2\n### h3\n#### h4\n##### h5\n###### h6\n\nParagraphs are separated\nby a blank line.\n\nTwo spaces at the end of a line  \nproduces a line break.\n\nText attributes _italic_, **bold**, `monospace`.  \n\nHorizontal rule:\n\n---\n\nBullet list:\n\n  * apples\n  * oranges\n  * pears\n\nNumbered list:\n\n  1. wash\n  2. rinse\n  3. repeat\n\nA [link][example].\n\n  [example]: http://example.com\n\n![Image](Image_icon.png \"icon\")\n\n> Markdown uses email-style\n> characters for blockquoting.\n\n```js\n\nimport Monkey from './monkey'\n\n// Code with Syntax Highlighting, as well\n\nconst result = value => (value * 2 + 1) - Infinity\nconst x = true || false\n\nclass Code extends Monkey { }\n\n```\n","type":"md","_id":"iAbo22rvCtNXnSvS"}
{"name":"display","path":["react","app","display"],"data":"\n\n# App Components\n","type":"md","_id":"HQ7zlKoFw5sTuxpK"}
{"name":"service-view","path":["react","app","service-view"],"data":"# ServiceView\n\nService view is a table that fetches service-table data.\n","type":"md","_id":"f2Bq61szl54cGOco"}
{"name":"client-state-tree","path":["react","app","state-tree","client-state-tree"],"data":"# Client State Tree\n","type":"md","_id":"cAaLY3YJDw9JCzId"}
{"name":"service-state-tree","path":["react","app","state-tree","service-state-tree"],"data":"# Service State Tree\n","type":"md","_id":"DE0E28NXnqc3kt6V"}
{"name":"ui-state-tree","path":["react","app","state-tree","ui-state-tree"],"data":"# Ui State Tree\n","type":"md","_id":"n1Wk4DbT2vXMMxdg"}
{"name":"data-form","path":["react","data-form"],"data":"\n\n# Data Form Components\n\nForm components are for inputting data.\n\nThe components here are opinionated, but low level enough that they should be\nable to be mutated for any purpose.\n\n```js\nimport { Form } from '@benzed/react'\n\nconst form = <Form>\n  <Form.String value={value} onChange={onChange} placeholder='age' />\n  <Form.Number />\n</Form>\n\n```\n","type":"md","_id":"hP5eJKHWbxoJDANP"}
{"name":"data-view","path":["react","data-view"],"data":"\n\n# Data View Components\n\nDisplay components are specifically for displaying data.\n\nThe components listed here are low level, requiring specific props and input\nmethods for data to become visible.\n\nTables and Grids are virtualized, only rendering data that's currently visible.\n","type":"md","_id":"L1QIZnuCjdteHNK4"}
{"name":"display","path":["react","effect","display"],"data":"\n\n# Effect Components\n","type":"md","_id":"y5rKAtMT2PMVKuTb"}
{"name":"fade","path":["react","effect","fade"],"data":"","type":"md","_id":"w9qV11ffbUbxuwM2"}
{"name":"scroll-visible","path":["react","effect","scroll-visible"],"data":"","type":"md","_id":"jsvOMqGGGoAKJ3JZ"}
{"name":"slide","path":["react","effect","slide"],"data":"","type":"md","_id":"ShrvALDJK6IxFmtT"}
{"name":"visible","path":["react","effect","visible"],"data":"","type":"md","_id":"ZiAQXsI51c3wIGQG"}
{"name":"layout","path":["react","layout"],"data":"\n\n# Layout Components\n","type":"md","_id":"umnGfGPz9wSz4Jwu"}
{"name":"flex","path":["react","layout","flex"],"data":"# Flex Component\n\nLayout component with props that manipulate flex properties.\n\n```js\n  <Flex\n    grow={1} // flex-grow\n    shrink={0} // flex-shrink\n    basis={0} // flex-basis\n    justify='center' // justify-content\n    items='center' // align-items\n    content='stretch' // align-content\n    self='stretch' // align-self\n    wrap // wrap\n  />\n\n```\n","type":"md","_id":"pAOTYbKoQqWRhrfT"}
{"name":"modal","path":["react","layout","modal"],"data":"","type":"md","_id":"FCzkCTYxtAdq3HCV"}
{"name":"scroll","path":["react","layout","scroll"],"data":"","type":"md","_id":"E2j9OZDfun6ihRCc"}
{"name":"state-tree","path":["react","state-tree"],"data":"# State Tree\n","type":"md","_id":"NF8rmM1zJJfiSHoC"}
{"name":"util","path":["react","util"],"data":"\n\n# Utility Classes and Methods\n","type":"md","_id":"BLpIave9EQLx2HSN"}
{"name":"cloner","path":["react","util","cloner"],"data":"# Cloner Component\n\nCloner is a component that passes it's props to each of it's children.\n\nBy default, it passes all props:\n\n```js\n\nconst List = () =>\n  <Cloner style={{ color: 'red' }}>\n    <ul>1</ul>\n    <ul>2</ul>\n    <ul>2</ul>\n  <Cloner/>\n\n```\n","type":"md","_id":"jSbaBn9brM0bull9"}
{"name":"is-client","path":["react","util","is-client"],"data":"# isClient\n\nReturns true if the current javascript environment has a global window object.\n\n```js\nimport { isClient } from '@benzed/react'\n\nisClient() // true if browser, false if node\n\n```\n","type":"md","_id":"Lzid6nEgf9POqoN0"}
{"name":"is-event","path":["react","util","is-event"],"data":"# isEvent\n\nReturns true if the passed argument is an object with a 'target' property\n\n```js\nimport { isEvent } from '@benzed/react'\n\nconst notEvent = 'nope-just-a-string'\nisEvent(notEvent) // false\n\nconst fakeEvent = { target: true }\nisEvent(fakeEvent) // true\n\n```\n","type":"md","_id":"SJUa0mY0kXLpLPA6"}
{"name":"styler","path":["react","util","styler"],"data":"The Styler class is a syntax shortening class that creates style functions\nfor styled components.\n\nYou wouldn't instance a Styler directly. Instead, you'd create an interface\nfor one:\n```js\nimport { Styler } from '@benzed/react'\nimport styled from 'styled-components'\n\nconst $ = Styler.createInterface()\n\nconst RedDiv = styled.div`\n  background-color: ${$.prop('color')};\n`\n// <RedDiv color='red' /> will have a red background\n```\n\nThe interface contains the same methods and properties that the class does,\nand using those properties creates new instances of stylers:\n\n```js\n$.prop('hidden')\n// equivalent to\nnew Styler().prop('hidden')\n```\n\nInterfaces can be created with a theme, which will add theme getters to\nthe resulting Styler.\n```js\nconst theme = {\n  bg: 'black',\n  fg: 'white'\n}\n\nconst $ = Styler.createInterface(theme)\n\nconst Section = styled.section`\n  background-color: ${$.theme.bg};\n  color: ${$.theme.fg};\n`\n\n// <Section /> will have be theme colored\n```\n","type":"md","_id":"SdXa5Lmrx18Sj5of"}
{"name":"between","path":["string","between"],"data":"The between function returns a subset of a string, that which exists between two delimeters.\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('<b>bold</b>', '<b>', '</b>')\n\nconsole.log(text) // bold\n```\n\nReturns null if markers cannot be found:\n```js\nimport { between } from '@benzed/string'\n\nconst text = between('Hello world!', '{', '}')\n\nconsole.log(text) // null\n```\n","type":"md","_id":"xz4gIVYfaFfXP9EF"}
{"name":"capitalize","path":["string","capitalize"],"data":"Describe the capitalize function.\n\n```js\nimport { capitalize } from '@benzed/string'\n```\n","type":"md","_id":"MPHalTSyKjRX8qww"}
{"name":"from-camel-case","path":["string","from-camel-case"],"data":"Describe the fromCamelCase function.\n\n```js\nimport { fromCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"RTyMxbxNsjISJSt9"}
{"name":"to-camel-case","path":["string","to-camel-case"],"data":"Describe the toCamelCase function.\n\n```js\nimport { toCamelCase } from '@benzed/string'\n```\n","type":"md","_id":"OXviV2IZrwd06crc"}
